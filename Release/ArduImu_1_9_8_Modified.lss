
ArduImu_1_9_8_Modified.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  00004f34  00004fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a7  008001ae  008001ae  00005076  2**0
                  ALLOC
  3 .debug_aranges 00000d40  00000000  00000000  00005076  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000024b7  00000000  00000000  00005db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001e21c  00000000  00000000  0000826d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000584b  00000000  00000000  00026489  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000c605  00000000  00000000  0002bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000016a0  00000000  00000000  000382dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005e6d  00000000  00000000  0003997c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009278  00000000  00000000  0003f7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f08  00000000  00000000  00048a61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
       0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__ctors_end>
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
}
       4:	0c 94 3b 20 	jmp	0x4076	; 0x4076 <__vector_1>
        _vprintf(1, fmt, ap);
        va_end(ap);
}

int
BetterStream::txspace(void)
       8:	0c 94 68 20 	jmp	0x40d0	; 0x40d0 <__vector_2>

// Constructor /////////////////////////////////////////////////////////////////

FastSerial::FastSerial(const uint8_t portNumber, volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
					   volatile uint8_t *ucsra, volatile uint8_t *ucsrb, const uint8_t u2x,
					   const uint8_t portEnableBits, const uint8_t portTxBits) :
       c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>

// Constructors ////////////////////////////////////////////////////////////////
AP_GPS_NMEA::AP_GPS_NMEA(Stream *s) :
    GPS(s)
{
}
      10:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
}

///
/// write a block of configuration data to a GPS
///
void GPS::_write_progstr_block(Stream *_fs, const prog_char *pstr, uint8_t size)
      14:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
      18:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>


long convert_to_dec(float x)
{
  return x*10000000;
}
      1c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      20:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
#endif
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
      24:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
      28:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      2c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      30:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      34:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      38:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      3c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      40:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <__vector_16>
      44:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      48:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__vector_18>
      4c:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__vector_19>
      50:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      54:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      58:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      5c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      60:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_24>
      64:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <_ZN10FastSerialC1EhPVhS1_S1_S1_hhh+0x12>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 05       	cpc	r19, r15
      d2:	a8 4c       	sbci	r26, 0xC8	; 200
      d4:	cd b2       	in	r12, 0x1d	; 29
      d6:	d4 4e       	sbci	r29, 0xE4	; 228
      d8:	b9 38       	cpi	r27, 0x89	; 137
      da:	36 a9       	ldd	r19, Z+54	; 0x36
      dc:	02 0c       	add	r0, r2
      de:	50 b9       	out	0x00, r21	; 0
      e0:	91 86       	std	Z+9, r9	; 0x09
      e2:	88 08       	sbc	r8, r8
      e4:	3c a6       	std	Y+44, r3	; 0x2c
      e6:	aa aa       	std	Y+50, r10	; 0x32
      e8:	2a be       	out	0x3a, r2	; 58
      ea:	00 00       	nop
      ec:	00 80       	ld	r0, Z
      ee:	3f 24       	eor	r3, r15

000000ef <_ZN11AP_GPS_NMEA17_SiRF_init_stringE>:
      ef:	24 50 53 52 46 31 30 33 2c 30 2c 30 2c 31 2c 31     $PSRF103,0,0,1,1
      ff:	2a 32 35 0d 0a 24 50 53 52 46 31 30 33 2c 31 2c     *25..$PSRF103,1,
     10f:	30 2c 30 2c 31 2a 32 35 0d 0a 24 50 53 52 46 31     0,0,1*25..$PSRF1
     11f:	30 33 2c 32 2c 30 2c 30 2c 31 2a 32 36 0d 0a 24     03,2,0,0,1*26..$
     12f:	50 53 52 46 31 30 33 2c 33 2c 30 2c 30 2c 31 2a     PSRF103,3,0,0,1*
     13f:	32 37 0d 0a 24 50 53 52 46 31 30 33 2c 34 2c 30     27..$PSRF103,4,0
     14f:	2c 31 2c 31 2a 32 30 0d 0a 24 50 53 52 46 31 30     ,1,1*20..$PSRF10
     15f:	33 2c 35 2c 30 2c 31 2c 31 2a 32 30 0d 0a 24 50     3,5,0,1,1*20..$P
     16f:	53 52 46 31 30 33 2c 36 2c 30 2c 30 2c 31 2a 32     SRF103,6,0,0,1*2
     17f:	32 0d 0a 24 50 53 52 46 31 30 33 2c 38 2c 30 2c     2..$PSRF103,8,0,
     18f:	30 2c 31 2a 32 43 0d 0a 24 50 53 52 46 31 35 31     0,1*2C..$PSRF151
     19f:	2c 31 2a 33 46 0d 0a 24 50 53 52 46 31 30 36 2c     ,1*3F..$PSRF106,
     1af:	32 31 2a 30 46 0d 0a 00                             21*0F...

000001b7 <_ZN11AP_GPS_NMEA16_MTK_init_stringE>:
     1b7:	24 50 4d 54 4b 33 31 34 2c 30 2c 30 2c 31 2c 31     $PMTK314,0,0,1,1
     1c7:	2c 30 2c 30 2c 30 2c 30 2c 30 2c 30 2c 30 2c 30     ,0,0,0,0,0,0,0,0
     1d7:	2c 30 2c 30 2c 30 2c 30 2c 30 2a 32 38 0d 0a 24     ,0,0,0,0,0*28..$
     1e7:	50 4d 54 4b 33 33 30 2c 30 2a 32 45 0d 0a 24 50     PMTK330,0*2E..$P
     1f7:	4d 54 4b 33 31 33 2c 31 2a 32 45 0d 0a 24 50 4d     MTK313,1*2E..$PM
     207:	54 4b 33 30 31 2c 32 2a 32 45 0d 0a 00              TK301,2*2E...

00000214 <_ZN11AP_GPS_NMEA18_ublox_init_stringE>:
     214:	24 50 55 42 58 2c 34 30 2c 67 67 61 2c 30 2c 31     $PUBX,40,gga,0,1
     224:	2c 30 2c 30 2c 30 2c 30 2a 37 42 0d 0a 24 50 55     ,0,0,0,0*7B..$PU
     234:	42 58 2c 34 30 2c 76 74 67 2c 30 2c 31 2c 30 2c     BX,40,vtg,0,1,0,
     244:	30 2c 30 2c 30 2a 37 46 0d 0a 24 50 55 42 58 2c     0,0,0*7F..$PUBX,
     254:	34 30 2c 72 6d 63 2c 30 2c 30 2c 30 2c 30 2c 30     40,rmc,0,0,0,0,0
     264:	2c 30 2a 36 37 0d 0a 00                             ,0*67...

0000026c <_ZN11AP_GPS_NMEA13_gprmc_stringE>:
     26c:	47 50 52 4d 43 00                                   GPRMC.

00000272 <_ZN11AP_GPS_NMEA13_gpgga_stringE>:
     272:	47 50 47 47 41 00                                   GPGGA.

00000278 <_ZN11AP_GPS_NMEA13_gpvtg_stringE>:
     278:	47 50 56 54 47 00                                   GPVTG.

0000027e <port_to_mode_PGM>:
     27e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000288 <port_to_output_PGM>:
     288:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000292 <port_to_input_PGM>:
     292:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029c <digital_pin_to_port_PGM>:
     29c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2ac:	03 03 03 03                                         ....

000002b0 <digital_pin_to_bit_mask_PGM>:
     2b0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     2c0:	04 08 10 20                                         ... 

000002c4 <digital_pin_to_timer_PGM>:
     2c4:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     2d4:	00 00 00 00                                         ....

000002d8 <__ctors_start>:
     2d8:	ba 04       	cpc	r11, r10
     2da:	fb 0e       	add	r15, r27

000002dc <__ctors_end>:
     2dc:	11 24       	eor	r1, r1
     2de:	1f be       	out	0x3f, r1	; 63
     2e0:	cf ef       	ldi	r28, 0xFF	; 255
     2e2:	d8 e0       	ldi	r29, 0x08	; 8
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	cd bf       	out	0x3d, r28	; 61

000002e8 <__do_copy_data>:
     2e8:	11 e0       	ldi	r17, 0x01	; 1
     2ea:	a0 e0       	ldi	r26, 0x00	; 0
     2ec:	b1 e0       	ldi	r27, 0x01	; 1
     2ee:	e4 e3       	ldi	r30, 0x34	; 52
     2f0:	ff e4       	ldi	r31, 0x4F	; 79
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <.do_copy_data_start>

000002f4 <.do_copy_data_loop>:
     2f4:	05 90       	lpm	r0, Z+
     2f6:	0d 92       	st	X+, r0

000002f8 <.do_copy_data_start>:
     2f8:	ae 3a       	cpi	r26, 0xAE	; 174
     2fa:	b1 07       	cpc	r27, r17
     2fc:	d9 f7       	brne	.-10     	; 0x2f4 <.do_copy_data_loop>

000002fe <__do_clear_bss>:
     2fe:	14 e0       	ldi	r17, 0x04	; 4
     300:	ae ea       	ldi	r26, 0xAE	; 174
     302:	b1 e0       	ldi	r27, 0x01	; 1
     304:	01 c0       	rjmp	.+2      	; 0x308 <.do_clear_bss_start>

00000306 <.do_clear_bss_loop>:
     306:	1d 92       	st	X+, r1

00000308 <.do_clear_bss_start>:
     308:	a5 35       	cpi	r26, 0x55	; 85
     30a:	b1 07       	cpc	r27, r17
     30c:	e1 f7       	brne	.-8      	; 0x306 <.do_clear_bss_loop>

0000030e <__do_global_ctors>:
     30e:	12 e0       	ldi	r17, 0x02	; 2
     310:	cc ed       	ldi	r28, 0xDC	; 220
     312:	d2 e0       	ldi	r29, 0x02	; 2
     314:	04 c0       	rjmp	.+8      	; 0x31e <.do_global_ctors_start>

00000316 <.do_global_ctors_loop>:
     316:	22 97       	sbiw	r28, 0x02	; 2
     318:	fe 01       	movw	r30, r28
     31a:	0e 94 94 27 	call	0x4f28	; 0x4f28 <__tablejump__>

0000031e <.do_global_ctors_start>:
     31e:	c8 3d       	cpi	r28, 0xD8	; 216
     320:	d1 07       	cpc	r29, r17
     322:	c9 f7       	brne	.-14     	; 0x316 <.do_global_ctors_loop>
     324:	0e 94 95 20 	call	0x412a	; 0x412a <main>
     328:	0c 94 98 27 	jmp	0x4f30	; 0x4f30 <_exit>

0000032c <__bad_interrupt>:
     32c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000330 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     330:	88 0f       	add	r24, r24
     332:	80 93 ba 00 	sts	0x00BA, r24
}
     336:	08 95       	ret

00000338 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
     338:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     33a:	41 32       	cpi	r20, 0x21	; 33
     33c:	10 f0       	brcs	.+4      	; 0x342 <twi_readFrom+0xa>
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	42 c0       	rjmp	.+132    	; 0x3c6 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     342:	80 91 ae 01 	lds	r24, 0x01AE
     346:	88 23       	and	r24, r24
     348:	e1 f7       	brne	.-8      	; 0x342 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	90 93 ae 01 	sts	0x01AE, r25
  twi_sendStop = sendStop;
     350:	20 93 b0 01 	sts	0x01B0, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	80 93 1b 02 	sts	0x021B, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     35a:	10 92 d6 01 	sts	0x01D6, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     35e:	41 50       	subi	r20, 0x01	; 1
     360:	40 93 d7 01 	sts	0x01D7, r20
     364:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     366:	90 93 af 01 	sts	0x01AF, r25
  twi_slarw |= address << 1;
     36a:	80 91 af 01 	lds	r24, 0x01AF
     36e:	33 0f       	add	r19, r19
     370:	83 2b       	or	r24, r19
     372:	80 93 af 01 	sts	0x01AF, r24

  if (true == twi_inRepStart) {
     376:	80 91 b1 01 	lds	r24, 0x01B1
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	41 f4       	brne	.+16     	; 0x38e <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     37e:	10 92 b1 01 	sts	0x01B1, r1
    TWDR = twi_slarw;
     382:	80 91 af 01 	lds	r24, 0x01AF
     386:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     38a:	85 ec       	ldi	r24, 0xC5	; 197
     38c:	01 c0       	rjmp	.+2      	; 0x390 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     38e:	85 ee       	ldi	r24, 0xE5	; 229
     390:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     394:	80 91 ae 01 	lds	r24, 0x01AE
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	e1 f3       	breq	.-8      	; 0x394 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
     39c:	80 91 d6 01 	lds	r24, 0x01D6
     3a0:	84 17       	cp	r24, r20
     3a2:	10 f4       	brcc	.+4      	; 0x3a8 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
     3a4:	40 91 d6 01 	lds	r20, 0x01D6
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
     3ae:	fb 01       	movw	r30, r22
     3b0:	e2 0f       	add	r30, r18
     3b2:	f3 1f       	adc	r31, r19
     3b4:	d9 01       	movw	r26, r18
     3b6:	aa 54       	subi	r26, 0x4A	; 74
     3b8:	be 4f       	sbci	r27, 0xFE	; 254
     3ba:	8c 91       	ld	r24, X
     3bc:	80 83       	st	Z, r24
     3be:	2f 5f       	subi	r18, 0xFF	; 255
     3c0:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     3c2:	24 17       	cp	r18, r20
     3c4:	a0 f3       	brcs	.-24     	; 0x3ae <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     3c6:	84 2f       	mov	r24, r20
     3c8:	08 95       	ret

000003ca <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	58 2f       	mov	r21, r24
     3d0:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     3d2:	41 32       	cpi	r20, 0x21	; 33
     3d4:	10 f0       	brcs	.+4      	; 0x3da <twi_writeTo+0x10>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	4a c0       	rjmp	.+148    	; 0x46e <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     3da:	80 91 ae 01 	lds	r24, 0x01AE
     3de:	88 23       	and	r24, r24
     3e0:	e1 f7       	brne	.-8      	; 0x3da <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	80 93 ae 01 	sts	0x01AE, r24
  twi_sendStop = sendStop;
     3e8:	00 93 b0 01 	sts	0x01B0, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	80 93 1b 02 	sts	0x021B, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     3f2:	10 92 d6 01 	sts	0x01D6, r1
  twi_masterBufferLength = length;
     3f6:	40 93 d7 01 	sts	0x01D7, r20
     3fa:	a6 eb       	ldi	r26, 0xB6	; 182
     3fc:	b1 e0       	ldi	r27, 0x01	; 1
     3fe:	fb 01       	movw	r30, r22
     400:	02 c0       	rjmp	.+4      	; 0x406 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     402:	81 91       	ld	r24, Z+
     404:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     406:	8e 2f       	mov	r24, r30
     408:	86 1b       	sub	r24, r22
     40a:	84 17       	cp	r24, r20
     40c:	d0 f3       	brcs	.-12     	; 0x402 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     40e:	10 92 af 01 	sts	0x01AF, r1
  twi_slarw |= address << 1;
     412:	80 91 af 01 	lds	r24, 0x01AF
     416:	55 0f       	add	r21, r21
     418:	85 2b       	or	r24, r21
     41a:	80 93 af 01 	sts	0x01AF, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     41e:	80 91 b1 01 	lds	r24, 0x01B1
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	41 f4       	brne	.+16     	; 0x436 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     426:	10 92 b1 01 	sts	0x01B1, r1
    TWDR = twi_slarw;				
     42a:	80 91 af 01 	lds	r24, 0x01AF
     42e:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     432:	85 ec       	ldi	r24, 0xC5	; 197
     434:	01 c0       	rjmp	.+2      	; 0x438 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
     436:	85 ee       	ldi	r24, 0xE5	; 229
     438:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     43c:	11 23       	and	r17, r17
     43e:	21 f0       	breq	.+8      	; 0x448 <twi_writeTo+0x7e>
     440:	80 91 ae 01 	lds	r24, 0x01AE
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	e1 f3       	breq	.-8      	; 0x440 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
     448:	80 91 1b 02 	lds	r24, 0x021B
     44c:	8f 3f       	cpi	r24, 0xFF	; 255
     44e:	11 f4       	brne	.+4      	; 0x454 <twi_writeTo+0x8a>
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0d c0       	rjmp	.+26     	; 0x46e <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     454:	80 91 1b 02 	lds	r24, 0x021B
     458:	80 32       	cpi	r24, 0x20	; 32
     45a:	11 f4       	brne	.+4      	; 0x460 <twi_writeTo+0x96>
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	07 c0       	rjmp	.+14     	; 0x46e <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     460:	80 91 1b 02 	lds	r24, 0x021B
     464:	80 33       	cpi	r24, 0x30	; 48
     466:	11 f0       	breq	.+4      	; 0x46c <twi_writeTo+0xa2>
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	01 c0       	rjmp	.+2      	; 0x46e <twi_writeTo+0xa4>
     46c:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     474:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     476:	61 32       	cpi	r22, 0x21	; 33
     478:	10 f0       	brcs	.+4      	; 0x47e <twi_transmit+0xa>
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     47e:	80 91 ae 01 	lds	r24, 0x01AE
     482:	84 30       	cpi	r24, 0x04	; 4
     484:	11 f0       	breq	.+4      	; 0x48a <twi_transmit+0x16>
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     48a:	60 93 f9 01 	sts	0x01F9, r22
     48e:	a8 ed       	ldi	r26, 0xD8	; 216
     490:	b1 e0       	ldi	r27, 0x01	; 1
     492:	84 2f       	mov	r24, r20
     494:	9c 01       	movw	r18, r24
     496:	f9 01       	movw	r30, r18
     498:	02 c0       	rjmp	.+4      	; 0x49e <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
     49a:	81 91       	ld	r24, Z+
     49c:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     49e:	8e 2f       	mov	r24, r30
     4a0:	84 1b       	sub	r24, r20
     4a2:	86 17       	cp	r24, r22
     4a4:	d0 f3       	brcs	.-12     	; 0x49a <twi_transmit+0x26>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     4a8:	08 95       	ret

000004aa <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     4aa:	90 93 b5 01 	sts	0x01B5, r25
     4ae:	80 93 b4 01 	sts	0x01B4, r24
}
     4b2:	08 95       	ret

000004b4 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     4b4:	90 93 b3 01 	sts	0x01B3, r25
     4b8:	80 93 b2 01 	sts	0x01B2, r24
}
     4bc:	08 95       	ret

000004be <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     4be:	88 23       	and	r24, r24
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <twi_reply+0x8>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     4c2:	85 ec       	ldi	r24, 0xC5	; 197
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <twi_reply+0xa>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     4c6:	85 e8       	ldi	r24, 0x85	; 133
     4c8:	80 93 bc 00 	sts	0x00BC, r24
     4cc:	08 95       	ret

000004ce <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     4ce:	85 ed       	ldi	r24, 0xD5	; 213
     4d0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     4d4:	80 91 bc 00 	lds	r24, 0x00BC
     4d8:	84 fd       	sbrc	r24, 4
     4da:	fc cf       	rjmp	.-8      	; 0x4d4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     4dc:	10 92 ae 01 	sts	0x01AE, r1
}
     4e0:	08 95       	ret

000004e2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     4e2:	85 ec       	ldi	r24, 0xC5	; 197
     4e4:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     4e8:	10 92 ae 01 	sts	0x01AE, r1
}
     4ec:	08 95       	ret

000004ee <__vector_24>:

SIGNAL(TWI_vect)
{
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	4f 93       	push	r20
     4fe:	5f 93       	push	r21
     500:	6f 93       	push	r22
     502:	7f 93       	push	r23
     504:	8f 93       	push	r24
     506:	9f 93       	push	r25
     508:	af 93       	push	r26
     50a:	bf 93       	push	r27
     50c:	ef 93       	push	r30
     50e:	ff 93       	push	r31
  switch(TW_STATUS){
     510:	80 91 b9 00 	lds	r24, 0x00B9
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	88 7f       	andi	r24, 0xF8	; 248
     518:	90 70       	andi	r25, 0x00	; 0
     51a:	80 36       	cpi	r24, 0x60	; 96
     51c:	91 05       	cpc	r25, r1
     51e:	09 f4       	brne	.+2      	; 0x522 <__vector_24+0x34>
     520:	f2 c0       	rjmp	.+484    	; 0x706 <__vector_24+0x218>
     522:	81 36       	cpi	r24, 0x61	; 97
     524:	91 05       	cpc	r25, r1
     526:	cc f5       	brge	.+114    	; 0x59a <__vector_24+0xac>
     528:	88 32       	cpi	r24, 0x28	; 40
     52a:	91 05       	cpc	r25, r1
     52c:	09 f4       	brne	.+2      	; 0x530 <__vector_24+0x42>
     52e:	7b c0       	rjmp	.+246    	; 0x626 <__vector_24+0x138>
     530:	89 32       	cpi	r24, 0x29	; 41
     532:	91 05       	cpc	r25, r1
     534:	b4 f4       	brge	.+44     	; 0x562 <__vector_24+0x74>
     536:	80 31       	cpi	r24, 0x10	; 16
     538:	91 05       	cpc	r25, r1
     53a:	09 f4       	brne	.+2      	; 0x53e <__vector_24+0x50>
     53c:	6f c0       	rjmp	.+222    	; 0x61c <__vector_24+0x12e>
     53e:	81 31       	cpi	r24, 0x11	; 17
     540:	91 05       	cpc	r25, r1
     542:	3c f4       	brge	.+14     	; 0x552 <__vector_24+0x64>
     544:	00 97       	sbiw	r24, 0x00	; 0
     546:	09 f4       	brne	.+2      	; 0x54a <__vector_24+0x5c>
     548:	47 c1       	rjmp	.+654    	; 0x7d8 <__vector_24+0x2ea>
     54a:	08 97       	sbiw	r24, 0x08	; 8
     54c:	09 f0       	breq	.+2      	; 0x550 <__vector_24+0x62>
     54e:	4f c1       	rjmp	.+670    	; 0x7ee <__vector_24+0x300>
     550:	65 c0       	rjmp	.+202    	; 0x61c <__vector_24+0x12e>
     552:	88 31       	cpi	r24, 0x18	; 24
     554:	91 05       	cpc	r25, r1
     556:	09 f4       	brne	.+2      	; 0x55a <__vector_24+0x6c>
     558:	66 c0       	rjmp	.+204    	; 0x626 <__vector_24+0x138>
     55a:	80 97       	sbiw	r24, 0x20	; 32
     55c:	09 f0       	breq	.+2      	; 0x560 <__vector_24+0x72>
     55e:	47 c1       	rjmp	.+654    	; 0x7ee <__vector_24+0x300>
     560:	82 c0       	rjmp	.+260    	; 0x666 <__vector_24+0x178>
     562:	80 34       	cpi	r24, 0x40	; 64
     564:	91 05       	cpc	r25, r1
     566:	09 f4       	brne	.+2      	; 0x56a <__vector_24+0x7c>
     568:	a4 c0       	rjmp	.+328    	; 0x6b2 <__vector_24+0x1c4>
     56a:	81 34       	cpi	r24, 0x41	; 65
     56c:	91 05       	cpc	r25, r1
     56e:	44 f4       	brge	.+16     	; 0x580 <__vector_24+0x92>
     570:	80 33       	cpi	r24, 0x30	; 48
     572:	91 05       	cpc	r25, r1
     574:	09 f4       	brne	.+2      	; 0x578 <__vector_24+0x8a>
     576:	82 c0       	rjmp	.+260    	; 0x67c <__vector_24+0x18e>
     578:	c8 97       	sbiw	r24, 0x38	; 56
     57a:	09 f0       	breq	.+2      	; 0x57e <__vector_24+0x90>
     57c:	38 c1       	rjmp	.+624    	; 0x7ee <__vector_24+0x300>
     57e:	89 c0       	rjmp	.+274    	; 0x692 <__vector_24+0x1a4>
     580:	80 35       	cpi	r24, 0x50	; 80
     582:	91 05       	cpc	r25, r1
     584:	09 f4       	brne	.+2      	; 0x588 <__vector_24+0x9a>
     586:	89 c0       	rjmp	.+274    	; 0x69a <__vector_24+0x1ac>
     588:	88 35       	cpi	r24, 0x58	; 88
     58a:	91 05       	cpc	r25, r1
     58c:	09 f4       	brne	.+2      	; 0x590 <__vector_24+0xa2>
     58e:	96 c0       	rjmp	.+300    	; 0x6bc <__vector_24+0x1ce>
     590:	88 34       	cpi	r24, 0x48	; 72
     592:	91 05       	cpc	r25, r1
     594:	09 f0       	breq	.+2      	; 0x598 <__vector_24+0xaa>
     596:	2b c1       	rjmp	.+598    	; 0x7ee <__vector_24+0x300>
     598:	ae c0       	rjmp	.+348    	; 0x6f6 <__vector_24+0x208>
     59a:	88 39       	cpi	r24, 0x98	; 152
     59c:	91 05       	cpc	r25, r1
     59e:	09 f4       	brne	.+2      	; 0x5a2 <__vector_24+0xb4>
     5a0:	13 c1       	rjmp	.+550    	; 0x7c8 <__vector_24+0x2da>
     5a2:	89 39       	cpi	r24, 0x99	; 153
     5a4:	91 05       	cpc	r25, r1
     5a6:	ec f4       	brge	.+58     	; 0x5e2 <__vector_24+0xf4>
     5a8:	88 37       	cpi	r24, 0x78	; 120
     5aa:	91 05       	cpc	r25, r1
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <__vector_24+0xc2>
     5ae:	ab c0       	rjmp	.+342    	; 0x706 <__vector_24+0x218>
     5b0:	89 37       	cpi	r24, 0x79	; 121
     5b2:	91 05       	cpc	r25, r1
     5b4:	4c f4       	brge	.+18     	; 0x5c8 <__vector_24+0xda>
     5b6:	88 36       	cpi	r24, 0x68	; 104
     5b8:	91 05       	cpc	r25, r1
     5ba:	09 f4       	brne	.+2      	; 0x5be <__vector_24+0xd0>
     5bc:	a4 c0       	rjmp	.+328    	; 0x706 <__vector_24+0x218>
     5be:	80 37       	cpi	r24, 0x70	; 112
     5c0:	91 05       	cpc	r25, r1
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <__vector_24+0xd8>
     5c4:	14 c1       	rjmp	.+552    	; 0x7ee <__vector_24+0x300>
     5c6:	9f c0       	rjmp	.+318    	; 0x706 <__vector_24+0x218>
     5c8:	88 38       	cpi	r24, 0x88	; 136
     5ca:	91 05       	cpc	r25, r1
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <__vector_24+0xe2>
     5ce:	fc c0       	rjmp	.+504    	; 0x7c8 <__vector_24+0x2da>
     5d0:	80 39       	cpi	r24, 0x90	; 144
     5d2:	91 05       	cpc	r25, r1
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <__vector_24+0xea>
     5d6:	9d c0       	rjmp	.+314    	; 0x712 <__vector_24+0x224>
     5d8:	80 38       	cpi	r24, 0x80	; 128
     5da:	91 05       	cpc	r25, r1
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <__vector_24+0xf2>
     5de:	07 c1       	rjmp	.+526    	; 0x7ee <__vector_24+0x300>
     5e0:	98 c0       	rjmp	.+304    	; 0x712 <__vector_24+0x224>
     5e2:	80 3b       	cpi	r24, 0xB0	; 176
     5e4:	91 05       	cpc	r25, r1
     5e6:	09 f4       	brne	.+2      	; 0x5ea <__vector_24+0xfc>
     5e8:	c6 c0       	rjmp	.+396    	; 0x776 <__vector_24+0x288>
     5ea:	81 3b       	cpi	r24, 0xB1	; 177
     5ec:	91 05       	cpc	r25, r1
     5ee:	4c f4       	brge	.+18     	; 0x602 <__vector_24+0x114>
     5f0:	80 3a       	cpi	r24, 0xA0	; 160
     5f2:	91 05       	cpc	r25, r1
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <__vector_24+0x10a>
     5f6:	9f c0       	rjmp	.+318    	; 0x736 <__vector_24+0x248>
     5f8:	88 3a       	cpi	r24, 0xA8	; 168
     5fa:	91 05       	cpc	r25, r1
     5fc:	09 f0       	breq	.+2      	; 0x600 <__vector_24+0x112>
     5fe:	f7 c0       	rjmp	.+494    	; 0x7ee <__vector_24+0x300>
     600:	ba c0       	rjmp	.+372    	; 0x776 <__vector_24+0x288>
     602:	80 3c       	cpi	r24, 0xC0	; 192
     604:	91 05       	cpc	r25, r1
     606:	09 f4       	brne	.+2      	; 0x60a <__vector_24+0x11c>
     608:	e3 c0       	rjmp	.+454    	; 0x7d0 <__vector_24+0x2e2>
     60a:	88 3c       	cpi	r24, 0xC8	; 200
     60c:	91 05       	cpc	r25, r1
     60e:	09 f4       	brne	.+2      	; 0x612 <__vector_24+0x124>
     610:	df c0       	rjmp	.+446    	; 0x7d0 <__vector_24+0x2e2>
     612:	88 3b       	cpi	r24, 0xB8	; 184
     614:	91 05       	cpc	r25, r1
     616:	09 f0       	breq	.+2      	; 0x61a <__vector_24+0x12c>
     618:	ea c0       	rjmp	.+468    	; 0x7ee <__vector_24+0x300>
     61a:	c2 c0       	rjmp	.+388    	; 0x7a0 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     61c:	80 91 af 01 	lds	r24, 0x01AF
     620:	80 93 bb 00 	sts	0x00BB, r24
     624:	cf c0       	rjmp	.+414    	; 0x7c4 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     626:	90 91 d6 01 	lds	r25, 0x01D6
     62a:	80 91 d7 01 	lds	r24, 0x01D7
     62e:	98 17       	cp	r25, r24
     630:	68 f4       	brcc	.+26     	; 0x64c <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     632:	90 91 d6 01 	lds	r25, 0x01D6
     636:	e9 2f       	mov	r30, r25
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ea 54       	subi	r30, 0x4A	; 74
     63c:	fe 4f       	sbci	r31, 0xFE	; 254
     63e:	80 81       	ld	r24, Z
     640:	80 93 bb 00 	sts	0x00BB, r24
     644:	9f 5f       	subi	r25, 0xFF	; 255
     646:	90 93 d6 01 	sts	0x01D6, r25
     64a:	bc c0       	rjmp	.+376    	; 0x7c4 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
     64c:	80 91 b0 01 	lds	r24, 0x01B0
     650:	88 23       	and	r24, r24
     652:	09 f4       	brne	.+2      	; 0x656 <__vector_24+0x168>
     654:	4b c0       	rjmp	.+150    	; 0x6ec <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     656:	85 ed       	ldi	r24, 0xD5	; 213
     658:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     65c:	80 91 bc 00 	lds	r24, 0x00BC
     660:	84 fd       	sbrc	r24, 4
     662:	fc cf       	rjmp	.-8      	; 0x65c <__vector_24+0x16e>
     664:	c2 c0       	rjmp	.+388    	; 0x7ea <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 1b 02 	sts	0x021B, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     66c:	85 ed       	ldi	r24, 0xD5	; 213
     66e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     672:	80 91 bc 00 	lds	r24, 0x00BC
     676:	84 fd       	sbrc	r24, 4
     678:	fc cf       	rjmp	.-8      	; 0x672 <__vector_24+0x184>
     67a:	b7 c0       	rjmp	.+366    	; 0x7ea <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     67c:	80 e3       	ldi	r24, 0x30	; 48
     67e:	80 93 1b 02 	sts	0x021B, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     682:	85 ed       	ldi	r24, 0xD5	; 213
     684:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     688:	80 91 bc 00 	lds	r24, 0x00BC
     68c:	84 fd       	sbrc	r24, 4
     68e:	fc cf       	rjmp	.-8      	; 0x688 <__vector_24+0x19a>
     690:	ac c0       	rjmp	.+344    	; 0x7ea <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     692:	88 e3       	ldi	r24, 0x38	; 56
     694:	80 93 1b 02 	sts	0x021B, r24
     698:	9b c0       	rjmp	.+310    	; 0x7d0 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     69a:	80 91 d6 01 	lds	r24, 0x01D6
     69e:	90 91 bb 00 	lds	r25, 0x00BB
     6a2:	e8 2f       	mov	r30, r24
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	ea 54       	subi	r30, 0x4A	; 74
     6a8:	fe 4f       	sbci	r31, 0xFE	; 254
     6aa:	90 83       	st	Z, r25
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	80 93 d6 01 	sts	0x01D6, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     6b2:	90 91 d6 01 	lds	r25, 0x01D6
     6b6:	80 91 d7 01 	lds	r24, 0x01D7
     6ba:	82 c0       	rjmp	.+260    	; 0x7c0 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     6bc:	80 91 d6 01 	lds	r24, 0x01D6
     6c0:	90 91 bb 00 	lds	r25, 0x00BB
     6c4:	e8 2f       	mov	r30, r24
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ea 54       	subi	r30, 0x4A	; 74
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	90 83       	st	Z, r25
     6ce:	8f 5f       	subi	r24, 0xFF	; 255
     6d0:	80 93 d6 01 	sts	0x01D6, r24
	if (twi_sendStop)
     6d4:	80 91 b0 01 	lds	r24, 0x01B0
     6d8:	88 23       	and	r24, r24
     6da:	41 f0       	breq	.+16     	; 0x6ec <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     6dc:	85 ed       	ldi	r24, 0xD5	; 213
     6de:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     6e2:	80 91 bc 00 	lds	r24, 0x00BC
     6e6:	84 fd       	sbrc	r24, 4
     6e8:	fc cf       	rjmp	.-8      	; 0x6e2 <__vector_24+0x1f4>
     6ea:	7f c0       	rjmp	.+254    	; 0x7ea <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 b1 01 	sts	0x01B1, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     6f2:	84 ea       	ldi	r24, 0xA4	; 164
     6f4:	6e c0       	rjmp	.+220    	; 0x7d2 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     6f6:	85 ed       	ldi	r24, 0xD5	; 213
     6f8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     6fc:	80 91 bc 00 	lds	r24, 0x00BC
     700:	84 fd       	sbrc	r24, 4
     702:	fc cf       	rjmp	.-8      	; 0x6fc <__vector_24+0x20e>
     704:	72 c0       	rjmp	.+228    	; 0x7ea <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	80 93 ae 01 	sts	0x01AE, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     70c:	10 92 1a 02 	sts	0x021A, r1
     710:	59 c0       	rjmp	.+178    	; 0x7c4 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     712:	80 91 1a 02 	lds	r24, 0x021A
     716:	80 32       	cpi	r24, 0x20	; 32
     718:	08 f0       	brcs	.+2      	; 0x71c <__vector_24+0x22e>
     71a:	56 c0       	rjmp	.+172    	; 0x7c8 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     71c:	80 91 1a 02 	lds	r24, 0x021A
     720:	90 91 bb 00 	lds	r25, 0x00BB
     724:	e8 2f       	mov	r30, r24
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	e6 50       	subi	r30, 0x06	; 6
     72a:	fe 4f       	sbci	r31, 0xFE	; 254
     72c:	90 83       	st	Z, r25
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	80 93 1a 02 	sts	0x021A, r24
     734:	47 c0       	rjmp	.+142    	; 0x7c4 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     736:	80 91 1a 02 	lds	r24, 0x021A
     73a:	80 32       	cpi	r24, 0x20	; 32
     73c:	30 f4       	brcc	.+12     	; 0x74a <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     73e:	e0 91 1a 02 	lds	r30, 0x021A
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	e6 50       	subi	r30, 0x06	; 6
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     74a:	85 ed       	ldi	r24, 0xD5	; 213
     74c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     750:	80 91 bc 00 	lds	r24, 0x00BC
     754:	84 fd       	sbrc	r24, 4
     756:	fc cf       	rjmp	.-8      	; 0x750 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     758:	10 92 ae 01 	sts	0x01AE, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     75c:	60 91 1a 02 	lds	r22, 0x021A
     760:	e0 91 b4 01 	lds	r30, 0x01B4
     764:	f0 91 b5 01 	lds	r31, 0x01B5
     768:	8a ef       	ldi	r24, 0xFA	; 250
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     770:	10 92 1a 02 	sts	0x021A, r1
     774:	2d c0       	rjmp	.+90     	; 0x7d0 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     776:	84 e0       	ldi	r24, 0x04	; 4
     778:	80 93 ae 01 	sts	0x01AE, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     77c:	10 92 f8 01 	sts	0x01F8, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     780:	10 92 f9 01 	sts	0x01F9, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     784:	e0 91 b2 01 	lds	r30, 0x01B2
     788:	f0 91 b3 01 	lds	r31, 0x01B3
     78c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     78e:	80 91 f9 01 	lds	r24, 0x01F9
     792:	88 23       	and	r24, r24
     794:	29 f4       	brne	.+10     	; 0x7a0 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 f9 01 	sts	0x01F9, r24
        twi_txBuffer[0] = 0x00;
     79c:	10 92 d8 01 	sts	0x01D8, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     7a0:	90 91 f8 01 	lds	r25, 0x01F8
     7a4:	e9 2f       	mov	r30, r25
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	e8 52       	subi	r30, 0x28	; 40
     7aa:	fe 4f       	sbci	r31, 0xFE	; 254
     7ac:	80 81       	ld	r24, Z
     7ae:	80 93 bb 00 	sts	0x00BB, r24
     7b2:	9f 5f       	subi	r25, 0xFF	; 255
     7b4:	90 93 f8 01 	sts	0x01F8, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     7b8:	90 91 f8 01 	lds	r25, 0x01F8
     7bc:	80 91 f9 01 	lds	r24, 0x01F9
     7c0:	98 17       	cp	r25, r24
     7c2:	10 f4       	brcc	.+4      	; 0x7c8 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     7c4:	85 ec       	ldi	r24, 0xC5	; 197
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     7c8:	85 e8       	ldi	r24, 0x85	; 133
     7ca:	80 93 bc 00 	sts	0x00BC, r24
     7ce:	0f c0       	rjmp	.+30     	; 0x7ee <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     7d0:	85 ec       	ldi	r24, 0xC5	; 197
     7d2:	80 93 bc 00 	sts	0x00BC, r24
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     7d8:	10 92 1b 02 	sts	0x021B, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     7dc:	85 ed       	ldi	r24, 0xD5	; 213
     7de:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     7e2:	80 91 bc 00 	lds	r24, 0x00BC
     7e6:	84 fd       	sbrc	r24, 4
     7e8:	fc cf       	rjmp	.-8      	; 0x7e2 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     7ea:	10 92 ae 01 	sts	0x01AE, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     810:	10 92 ae 01 	sts	0x01AE, r1
  twi_sendStop = true;		// default value
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 b0 01 	sts	0x01B0, r24
  twi_inRepStart = false;
     81a:	10 92 b1 01 	sts	0x01B1, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     81e:	82 e1       	ldi	r24, 0x12	; 18
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
  digitalWrite(SCL, 1);
     826:	83 e1       	ldi	r24, 0x13	; 19
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     82e:	e9 eb       	ldi	r30, 0xB9	; 185
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     838:	80 81       	ld	r24, Z
     83a:	8d 7f       	andi	r24, 0xFD	; 253
     83c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     83e:	88 e4       	ldi	r24, 0x48	; 72
     840:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     844:	85 e4       	ldi	r24, 0x45	; 69
     846:	80 93 bc 00 	sts	0x00BC, r24
}
     84a:	08 95       	ret

0000084c <atol>:
     84c:	1f 93       	push	r17
     84e:	fc 01       	movw	r30, r24
     850:	99 27       	eor	r25, r25
     852:	88 27       	eor	r24, r24
     854:	bc 01       	movw	r22, r24
     856:	e8 94       	clt
     858:	11 91       	ld	r17, Z+
     85a:	10 32       	cpi	r17, 0x20	; 32
     85c:	e9 f3       	breq	.-6      	; 0x858 <atol+0xc>
     85e:	19 30       	cpi	r17, 0x09	; 9
     860:	10 f0       	brcs	.+4      	; 0x866 <atol+0x1a>
     862:	1e 30       	cpi	r17, 0x0E	; 14
     864:	c8 f3       	brcs	.-14     	; 0x858 <atol+0xc>
     866:	1b 32       	cpi	r17, 0x2B	; 43
     868:	51 f0       	breq	.+20     	; 0x87e <atol+0x32>
     86a:	1d 32       	cpi	r17, 0x2D	; 45
     86c:	49 f4       	brne	.+18     	; 0x880 <atol+0x34>
     86e:	68 94       	set
     870:	06 c0       	rjmp	.+12     	; 0x87e <atol+0x32>
     872:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__mulsi_const_10>
     876:	61 0f       	add	r22, r17
     878:	71 1d       	adc	r23, r1
     87a:	81 1d       	adc	r24, r1
     87c:	91 1d       	adc	r25, r1
     87e:	11 91       	ld	r17, Z+
     880:	10 53       	subi	r17, 0x30	; 48
     882:	1a 30       	cpi	r17, 0x0A	; 10
     884:	b0 f3       	brcs	.-20     	; 0x872 <atol+0x26>
     886:	3e f4       	brtc	.+14     	; 0x896 <atol+0x4a>
     888:	90 95       	com	r25
     88a:	80 95       	com	r24
     88c:	70 95       	com	r23
     88e:	61 95       	neg	r22
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	8f 4f       	sbci	r24, 0xFF	; 255
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	1f 91       	pop	r17
     898:	08 95       	ret

0000089a <strcmp_P>:
     89a:	fb 01       	movw	r30, r22
     89c:	dc 01       	movw	r26, r24
     89e:	8d 91       	ld	r24, X+
     8a0:	05 90       	lpm	r0, Z+
     8a2:	80 19       	sub	r24, r0
     8a4:	01 10       	cpse	r0, r1
     8a6:	d9 f3       	breq	.-10     	; 0x89e <strcmp_P+0x4>
     8a8:	99 0b       	sbc	r25, r25
     8aa:	08 95       	ret

000008ac <__eewr_word>:
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	d7 2e       	mov	r13, r23
     8b8:	7a 01       	movw	r14, r20
     8ba:	8c 01       	movw	r16, r24
     8bc:	fa 01       	movw	r30, r20
     8be:	09 95       	icall
     8c0:	c8 01       	movw	r24, r16
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	6d 2d       	mov	r22, r13
     8c6:	f7 01       	movw	r30, r14
     8c8:	09 95       	icall
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	08 95       	ret

000008d6 <__mulsi_const_10>:
     8d6:	59 2f       	mov	r21, r25
     8d8:	48 2f       	mov	r20, r24
     8da:	37 2f       	mov	r19, r23
     8dc:	26 2f       	mov	r18, r22
     8de:	66 0f       	add	r22, r22
     8e0:	77 1f       	adc	r23, r23
     8e2:	88 1f       	adc	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	66 0f       	add	r22, r22
     8e8:	77 1f       	adc	r23, r23
     8ea:	88 1f       	adc	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	62 0f       	add	r22, r18
     8f0:	73 1f       	adc	r23, r19
     8f2:	84 1f       	adc	r24, r20
     8f4:	95 1f       	adc	r25, r21
     8f6:	66 0f       	add	r22, r22
     8f8:	77 1f       	adc	r23, r23
     8fa:	88 1f       	adc	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	08 95       	ret

00000900 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 61 02 	sts	0x0261, r24
  // set address of targeted slave
  txAddress = address;
     906:	60 93 3e 02 	sts	0x023E, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     90a:	10 92 5f 02 	sts	0x025F, r1
  txBufferLength = 0;
     90e:	10 92 60 02 	sts	0x0260, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
     912:	08 95       	ret

00000914 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
     914:	20 91 3d 02 	lds	r18, 0x023D
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	80 91 3c 02 	lds	r24, 0x023C
     91e:	28 1b       	sub	r18, r24
     920:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
     922:	c9 01       	movw	r24, r18
     924:	08 95       	ret

00000926 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     926:	40 91 3c 02 	lds	r20, 0x023C
     92a:	80 91 3d 02 	lds	r24, 0x023D
     92e:	48 17       	cp	r20, r24
     930:	18 f0       	brcs	.+6      	; 0x938 <_ZN7TwoWire4readEv+0x12>
     932:	2f ef       	ldi	r18, 0xFF	; 255
     934:	3f ef       	ldi	r19, 0xFF	; 255
     936:	0a c0       	rjmp	.+20     	; 0x94c <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
     938:	e4 2f       	mov	r30, r20
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	e4 5e       	subi	r30, 0xE4	; 228
     93e:	fd 4f       	sbci	r31, 0xFD	; 253
     940:	80 81       	ld	r24, Z
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
     946:	4f 5f       	subi	r20, 0xFF	; 255
     948:	40 93 3c 02 	sts	0x023C, r20
  }

  return value;
}
     94c:	c9 01       	movw	r24, r18
     94e:	08 95       	ret

00000950 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
     950:	e0 91 3c 02 	lds	r30, 0x023C
     954:	80 91 3d 02 	lds	r24, 0x023D
     958:	e8 17       	cp	r30, r24
     95a:	18 f0       	brcs	.+6      	; 0x962 <_ZN7TwoWire4peekEv+0x12>
     95c:	ef ef       	ldi	r30, 0xFF	; 255
     95e:	ff ef       	ldi	r31, 0xFF	; 255
     960:	06 c0       	rjmp	.+12     	; 0x96e <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	e4 5e       	subi	r30, 0xE4	; 228
     966:	fd 4f       	sbci	r31, 0xFD	; 253
     968:	80 81       	ld	r24, Z
     96a:	e8 2f       	mov	r30, r24
     96c:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
     96e:	cf 01       	movw	r24, r30
     970:	08 95       	ret

00000972 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     972:	08 95       	ret

00000974 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     974:	10 92 65 02 	sts	0x0265, r1
     978:	10 92 64 02 	sts	0x0264, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     97c:	88 ee       	ldi	r24, 0xE8	; 232
     97e:	93 e0       	ldi	r25, 0x03	; 3
     980:	a0 e0       	ldi	r26, 0x00	; 0
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	80 93 66 02 	sts	0x0266, r24
     988:	90 93 67 02 	sts	0x0267, r25
     98c:	a0 93 68 02 	sts	0x0268, r26
     990:	b0 93 69 02 	sts	0x0269, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     994:	8f e7       	ldi	r24, 0x7F	; 127
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	90 93 63 02 	sts	0x0263, r25
     99c:	80 93 62 02 	sts	0x0262, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     9a0:	08 95       	ret

000009a2 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	7c 01       	movw	r14, r24
     9b4:	6b 01       	movw	r12, r22
     9b6:	8a 01       	movw	r16, r20
{
  if(transmitting){
     9b8:	80 91 61 02 	lds	r24, 0x0261
     9bc:	88 23       	and	r24, r24
     9be:	a1 f0       	breq	.+40     	; 0x9e8 <_ZN7TwoWire5writeEPKhj+0x46>
     9c0:	c0 e0       	ldi	r28, 0x00	; 0
     9c2:	d0 e0       	ldi	r29, 0x00	; 0
     9c4:	0d c0       	rjmp	.+26     	; 0x9e0 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
     9c6:	d7 01       	movw	r26, r14
     9c8:	ed 91       	ld	r30, X+
     9ca:	fc 91       	ld	r31, X
     9cc:	d6 01       	movw	r26, r12
     9ce:	ac 0f       	add	r26, r28
     9d0:	bd 1f       	adc	r27, r29
     9d2:	01 90       	ld	r0, Z+
     9d4:	f0 81       	ld	r31, Z
     9d6:	e0 2d       	mov	r30, r0
     9d8:	c7 01       	movw	r24, r14
     9da:	6c 91       	ld	r22, X
     9dc:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     9de:	21 96       	adiw	r28, 0x01	; 1
     9e0:	c0 17       	cp	r28, r16
     9e2:	d1 07       	cpc	r29, r17
     9e4:	80 f3       	brcs	.-32     	; 0x9c6 <_ZN7TwoWire5writeEPKhj+0x24>
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     9e8:	cb 01       	movw	r24, r22
     9ea:	64 2f       	mov	r22, r20
     9ec:	0e 94 3a 02 	call	0x474	; 0x474 <twi_transmit>
  }
  return quantity;
}
     9f0:	c8 01       	movw	r24, r16
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	08 95       	ret

00000a04 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	0f 92       	push	r0
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	fc 01       	movw	r30, r24
     a10:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
     a12:	80 91 61 02 	lds	r24, 0x0261
     a16:	88 23       	and	r24, r24
     a18:	c9 f0       	breq	.+50     	; 0xa4c <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     a1a:	80 91 60 02 	lds	r24, 0x0260
     a1e:	80 32       	cpi	r24, 0x20	; 32
     a20:	38 f0       	brcs	.+14     	; 0xa30 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	93 83       	std	Z+3, r25	; 0x03
     a28:	82 83       	std	Z+2, r24	; 0x02
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	15 c0       	rjmp	.+42     	; 0xa5a <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     a30:	80 91 5f 02 	lds	r24, 0x025F
     a34:	e8 2f       	mov	r30, r24
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	e1 5c       	subi	r30, 0xC1	; 193
     a3a:	fd 4f       	sbci	r31, 0xFD	; 253
     a3c:	99 81       	ldd	r25, Y+1	; 0x01
     a3e:	90 83       	st	Z, r25
    ++txBufferIndex;
     a40:	8f 5f       	subi	r24, 0xFF	; 255
     a42:	80 93 5f 02 	sts	0x025F, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     a46:	80 93 60 02 	sts	0x0260, r24
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     a4c:	ce 01       	movw	r24, r28
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	0e 94 3a 02 	call	0x474	; 0x474 <twi_transmit>
     a56:	21 e0       	ldi	r18, 0x01	; 1
     a58:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
     a5a:	c9 01       	movw	r24, r18
     a5c:	0f 90       	pop	r0
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	08 95       	ret

00000a64 <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     a64:	0f 93       	push	r16
     a66:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     a68:	80 91 3e 02 	lds	r24, 0x023E
     a6c:	6f e3       	ldi	r22, 0x3F	; 63
     a6e:	72 e0       	ldi	r23, 0x02	; 2
     a70:	40 91 60 02 	lds	r20, 0x0260
     a74:	21 e0       	ldi	r18, 0x01	; 1
     a76:	0e 94 e5 01 	call	0x3ca	; 0x3ca <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     a7a:	10 92 5f 02 	sts	0x025F, r1
  txBufferLength = 0;
     a7e:	10 92 60 02 	sts	0x0260, r1
  // indicate that we are done transmitting
  transmitting = 0;
     a82:	10 92 61 02 	sts	0x0261, r1
  return ret;
}
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN7TwoWire15endTransmissionEh>
}
     a90:	08 95       	ret

00000a92 <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
     a92:	41 32       	cpi	r20, 0x21	; 33
     a94:	08 f0       	brcs	.+2      	; 0xa98 <_ZN7TwoWire11requestFromEhhh+0x6>
     a96:	40 e2       	ldi	r20, 0x20	; 32
     a98:	86 2f       	mov	r24, r22
     a9a:	6c e1       	ldi	r22, 0x1C	; 28
     a9c:	72 e0       	ldi	r23, 0x02	; 2
     a9e:	0e 94 9c 01 	call	0x338	; 0x338 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     aa2:	10 92 3c 02 	sts	0x023C, r1
  rxBufferLength = read;
     aa6:	80 93 3d 02 	sts	0x023D, r24

  return read;
}
     aaa:	08 95       	ret

00000aac <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
     aac:	21 e0       	ldi	r18, 0x01	; 1
     aae:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN7TwoWire11requestFromEhhh>
}
     ab2:	08 95       	ret

00000ab4 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     ab4:	10 92 3c 02 	sts	0x023C, r1
  rxBufferLength = 0;
     ab8:	10 92 3d 02 	sts	0x023D, r1

  txBufferIndex = 0;
     abc:	10 92 5f 02 	sts	0x025F, r1
  txBufferLength = 0;
     ac0:	10 92 60 02 	sts	0x0260, r1

  twi_init();
     ac4:	0e 94 08 04 	call	0x810	; 0x810 <twi_init>
}
     ac8:	08 95       	ret

00000aca <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     aca:	2c b5       	in	r18, 0x2c	; 44
     acc:	38 2f       	mov	r19, r24
     ace:	33 70       	andi	r19, 0x03	; 3
     ad0:	2c 7f       	andi	r18, 0xFC	; 252
     ad2:	32 2b       	or	r19, r18
     ad4:	3c bd       	out	0x2c, r19	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
     ad6:	2d b5       	in	r18, 0x2d	; 45
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	95 95       	asr	r25
     adc:	87 95       	ror	r24
     ade:	95 95       	asr	r25
     ae0:	87 95       	ror	r24
     ae2:	81 70       	andi	r24, 0x01	; 1
     ae4:	2e 7f       	andi	r18, 0xFE	; 254
     ae6:	82 2b       	or	r24, r18
     ae8:	8d bd       	out	0x2d, r24	; 45
}
     aea:	08 95       	ret

00000aec <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
     aec:	8a e0       	ldi	r24, 0x0A	; 10
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
     af4:	8a e0       	ldi	r24, 0x0A	; 10
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     afc:	8c b5       	in	r24, 0x2c	; 44
     afe:	80 61       	ori	r24, 0x10	; 16
     b00:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     b02:	8c b5       	in	r24, 0x2c	; 44
     b04:	80 64       	ori	r24, 0x40	; 64
     b06:	8c bd       	out	0x2c, r24	; 44
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
     b08:	8d e0       	ldi	r24, 0x0D	; 13
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>
  pinMode(MOSI, OUTPUT);
     b10:	8b e0       	ldi	r24, 0x0B	; 11
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>
}
     b18:	08 95       	ret

00000b1a <_ZN12BetterStream7print_PEPK11prog_char_t>:
#include "BetterStream.h"

// Stream extensions////////////////////////////////////////////////////////////

void
BetterStream::print_P(const prog_char_t *s)
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ec 01       	movw	r28, r24
     b28:	8b 01       	movw	r16, r22
{
        char    c;

        while ('\0' != (c = pgm_read_byte((const prog_char *)s++)))
                write(c);
     b2a:	7c 01       	movw	r14, r24
     b2c:	07 c0       	rjmp	.+14     	; 0xb3c <_ZN12BetterStream7print_PEPK11prog_char_t+0x22>
void
BetterStream::print_P(const prog_char_t *s)
{
        char    c;

        while ('\0' != (c = pgm_read_byte((const prog_char *)s++)))
     b2e:	e8 81       	ld	r30, Y
     b30:	f9 81       	ldd	r31, Y+1	; 0x01
     b32:	01 90       	ld	r0, Z+
     b34:	f0 81       	ld	r31, Z
     b36:	e0 2d       	mov	r30, r0
     b38:	c7 01       	movw	r24, r14
     b3a:	09 95       	icall
     b3c:	f8 01       	movw	r30, r16
     b3e:	0f 5f       	subi	r16, 0xFF	; 255
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	64 91       	lpm	r22, Z+
     b44:	66 23       	and	r22, r22
     b46:	99 f7       	brne	.-26     	; 0xb2e <_ZN12BetterStream7print_PEPK11prog_char_t+0x14>
                write(c);
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	08 95       	ret

00000b56 <_ZN10FastSerial5beginEl>:
	begin(57600);
}

// Public Methods //////////////////////////////////////////////////////////////

void FastSerial::begin(long baud)
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	dc 01       	movw	r26, r24
{
	begin(baud, 0, 0);
     b5c:	ed 91       	ld	r30, X+
     b5e:	fc 91       	ld	r31, X
     b60:	02 88       	ldd	r0, Z+18	; 0x12
     b62:	f3 89       	ldd	r31, Z+19	; 0x13
     b64:	e0 2d       	mov	r30, r0
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	09 95       	icall
}
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	08 95       	ret

00000b76 <_ZN10FastSerialC1EhPVhS1_S1_S1_hhh>:

// Constructor /////////////////////////////////////////////////////////////////

FastSerial::FastSerial(const uint8_t portNumber, volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
					   volatile uint8_t *ucsra, volatile uint8_t *ucsrb, const uint8_t u2x,
					   const uint8_t portEnableBits, const uint8_t portTxBits) :
     b76:	8f 92       	push	r8
     b78:	af 92       	push	r10
     b7a:	cf 92       	push	r12
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
     b8e:	13 82       	std	Z+3, r1	; 0x03
     b90:	12 82       	std	Z+2, r1	; 0x02
     b92:	88 ee       	ldi	r24, 0xE8	; 232
     b94:	93 e0       	ldi	r25, 0x03	; 3
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	84 83       	std	Z+4, r24	; 0x04
     b9c:	95 83       	std	Z+5, r25	; 0x05
     b9e:	a6 83       	std	Z+6, r26	; 0x06
     ba0:	b7 83       	std	Z+7, r27	; 0x07
					   _ucsrb(ucsrb),
					   _u2x(u2x),
					   _portEnableBits(portEnableBits),
					   _portTxBits(portTxBits),
					   _rxBuffer(&__FastSerial__rxBuffer[portNumber]),
					   _txBuffer(&__FastSerial__txBuffer[portNumber])
     ba2:	8f e8       	ldi	r24, 0x8F	; 143
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	80 83       	st	Z, r24
     baa:	55 87       	std	Z+13, r21	; 0x0d
     bac:	44 87       	std	Z+12, r20	; 0x0c
     bae:	37 87       	std	Z+15, r19	; 0x0f
     bb0:	26 87       	std	Z+14, r18	; 0x0e
     bb2:	11 8b       	std	Z+17, r17	; 0x11
     bb4:	00 8b       	std	Z+16, r16	; 0x10
     bb6:	f3 8a       	std	Z+19, r15	; 0x13
     bb8:	e2 8a       	std	Z+18, r14	; 0x12
     bba:	c4 8a       	std	Z+20, r12	; 0x14
     bbc:	a5 8a       	std	Z+21, r10	; 0x15
     bbe:	86 8a       	std	Z+22, r8	; 0x16
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	cb 01       	movw	r24, r22
     bc4:	23 e0       	ldi	r18, 0x03	; 3
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	2a 95       	dec	r18
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <_ZN10FastSerialC1EhPVhS1_S1_S1_hhh+0x50>
     bce:	9c 01       	movw	r18, r24
     bd0:	22 59       	subi	r18, 0x92	; 146
     bd2:	3d 4f       	sbci	r19, 0xFD	; 253
     bd4:	30 8f       	std	Z+24, r19	; 0x18
     bd6:	27 8b       	std	Z+23, r18	; 0x17
     bd8:	8a 58       	subi	r24, 0x8A	; 138
     bda:	9d 4f       	sbci	r25, 0xFD	; 253
     bdc:	92 8f       	std	Z+26, r25	; 0x1a
     bde:	81 8f       	std	Z+25, r24	; 0x19
	/// Bit mask for initialized ports
	static uint8_t _serialInitialized;

	/// Set if the serial port has been initialized
	static void setInitialized(uint8_t port) {
		_serialInitialized |= (1<<port);
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 c0       	rjmp	.+4      	; 0xbea <_ZN10FastSerialC1EhPVhS1_S1_S1_hhh+0x74>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	6a 95       	dec	r22
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <_ZN10FastSerialC1EhPVhS1_S1_S1_hhh+0x70>
     bee:	20 91 7e 02 	lds	r18, 0x027E
     bf2:	28 2b       	or	r18, r24
     bf4:	20 93 7e 02 	sts	0x027E, r18
{
	setInitialized(portNumber);
	begin(57600);
     bf8:	cf 01       	movw	r24, r30
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	51 ee       	ldi	r21, 0xE1	; 225
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN10FastSerial5beginEl>
}
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	ff 90       	pop	r15
     c10:	ef 90       	pop	r14
     c12:	cf 90       	pop	r12
     c14:	af 90       	pop	r10
     c16:	8f 90       	pop	r8
     c18:	08 95       	ret

00000c1a <_ZN10FastSerial9availableEv>:
	_freeBuffer(_rxBuffer);
	_freeBuffer(_txBuffer);
	_open = false;
}

int FastSerial::available(void)
     c1a:	fc 01       	movw	r30, r24
{
	if (!_open)
     c1c:	83 8d       	ldd	r24, Z+27	; 0x1b
     c1e:	88 23       	and	r24, r24
     c20:	19 f4       	brne	.+6      	; 0xc28 <_ZN10FastSerial9availableEv+0xe>
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	3f ef       	ldi	r19, 0xFF	; 255
     c26:	0d c0       	rjmp	.+26     	; 0xc42 <_ZN10FastSerial9availableEv+0x28>
		return (-1);
	return ((_rxBuffer->head - _rxBuffer->tail) & _rxBuffer->mask);
     c28:	07 88       	ldd	r0, Z+23	; 0x17
     c2a:	f0 8d       	ldd	r31, Z+24	; 0x18
     c2c:	e0 2d       	mov	r30, r0
     c2e:	20 81       	ld	r18, Z
     c30:	31 81       	ldd	r19, Z+1	; 0x01
     c32:	82 81       	ldd	r24, Z+2	; 0x02
     c34:	93 81       	ldd	r25, Z+3	; 0x03
     c36:	28 1b       	sub	r18, r24
     c38:	39 0b       	sbc	r19, r25
     c3a:	84 81       	ldd	r24, Z+4	; 0x04
     c3c:	95 81       	ldd	r25, Z+5	; 0x05
     c3e:	28 23       	and	r18, r24
     c40:	39 23       	and	r19, r25
}
     c42:	c9 01       	movw	r24, r18
     c44:	08 95       	ret

00000c46 <_ZN10FastSerial7txspaceEv>:

int FastSerial::txspace(void)
     c46:	fc 01       	movw	r30, r24
{
	if (!_open)
     c48:	83 8d       	ldd	r24, Z+27	; 0x1b
     c4a:	88 23       	and	r24, r24
     c4c:	19 f4       	brne	.+6      	; 0xc54 <_ZN10FastSerial7txspaceEv+0xe>
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	3f ef       	ldi	r19, 0xFF	; 255
     c52:	11 c0       	rjmp	.+34     	; 0xc76 <_ZN10FastSerial7txspaceEv+0x30>
		return (-1);
	return ((_txBuffer->mask+1) - ((_txBuffer->head - _txBuffer->tail) & _txBuffer->mask));
     c54:	01 8c       	ldd	r0, Z+25	; 0x19
     c56:	f2 8d       	ldd	r31, Z+26	; 0x1a
     c58:	e0 2d       	mov	r30, r0
     c5a:	20 81       	ld	r18, Z
     c5c:	31 81       	ldd	r19, Z+1	; 0x01
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	28 1b       	sub	r18, r24
     c64:	39 0b       	sbc	r19, r25
     c66:	20 95       	com	r18
     c68:	30 95       	com	r19
     c6a:	84 81       	ldd	r24, Z+4	; 0x04
     c6c:	95 81       	ldd	r25, Z+5	; 0x05
     c6e:	28 23       	and	r18, r24
     c70:	39 23       	and	r19, r25
     c72:	2f 5f       	subi	r18, 0xFF	; 255
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
}
     c76:	c9 01       	movw	r24, r18
     c78:	08 95       	ret

00000c7a <_ZN10FastSerial4readEv>:

int FastSerial::read(void)
     c7a:	fc 01       	movw	r30, r24
{
	uint8_t c;

	// if the head and tail are equal, the buffer is empty
	if (!_open || (_rxBuffer->head == _rxBuffer->tail))
     c7c:	83 8d       	ldd	r24, Z+27	; 0x1b
     c7e:	88 23       	and	r24, r24
     c80:	61 f0       	breq	.+24     	; 0xc9a <_ZN10FastSerial4readEv+0x20>
     c82:	a7 89       	ldd	r26, Z+23	; 0x17
     c84:	b0 8d       	ldd	r27, Z+24	; 0x18
     c86:	2d 91       	ld	r18, X+
     c88:	3c 91       	ld	r19, X
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	12 96       	adiw	r26, 0x02	; 2
     c8e:	8d 91       	ld	r24, X+
     c90:	9c 91       	ld	r25, X
     c92:	13 97       	sbiw	r26, 0x03	; 3
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	21 f4       	brne	.+8      	; 0xca2 <_ZN10FastSerial4readEv+0x28>
     c9a:	4f ef       	ldi	r20, 0xFF	; 255
     c9c:	5f ef       	ldi	r21, 0xFF	; 255
	// pull character from tail
	c = _rxBuffer->bytes[_rxBuffer->tail];
	_rxBuffer->tail = (_rxBuffer->tail + 1) & _rxBuffer->mask;

	return (c);
}
     c9e:	ca 01       	movw	r24, r20
     ca0:	08 95       	ret
	// if the head and tail are equal, the buffer is empty
	if (!_open || (_rxBuffer->head == _rxBuffer->tail))
		return (-1);

	// pull character from tail
	c = _rxBuffer->bytes[_rxBuffer->tail];
     ca2:	12 96       	adiw	r26, 0x02	; 2
     ca4:	8d 91       	ld	r24, X+
     ca6:	9c 91       	ld	r25, X
     ca8:	13 97       	sbiw	r26, 0x03	; 3
     caa:	16 96       	adiw	r26, 0x06	; 6
     cac:	ed 91       	ld	r30, X+
     cae:	fc 91       	ld	r31, X
     cb0:	17 97       	sbiw	r26, 0x07	; 7
     cb2:	e8 0f       	add	r30, r24
     cb4:	f9 1f       	adc	r31, r25
     cb6:	40 81       	ld	r20, Z
	_rxBuffer->tail = (_rxBuffer->tail + 1) & _rxBuffer->mask;
     cb8:	12 96       	adiw	r26, 0x02	; 2
     cba:	8d 91       	ld	r24, X+
     cbc:	9c 91       	ld	r25, X
     cbe:	13 97       	sbiw	r26, 0x03	; 3
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	14 96       	adiw	r26, 0x04	; 4
     cc4:	2d 91       	ld	r18, X+
     cc6:	3c 91       	ld	r19, X
     cc8:	15 97       	sbiw	r26, 0x05	; 5
     cca:	82 23       	and	r24, r18
     ccc:	93 23       	and	r25, r19
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2

	return (c);
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	e2 cf       	rjmp	.-60     	; 0xc9e <_ZN10FastSerial4readEv+0x24>

00000cda <_ZN10FastSerial4peekEv>:
}

int FastSerial::peek(void)
     cda:	fc 01       	movw	r30, r24
{

	// if the head and tail are equal, the buffer is empty
	if (!_open || (_rxBuffer->head == _rxBuffer->tail))
     cdc:	83 8d       	ldd	r24, Z+27	; 0x1b
     cde:	88 23       	and	r24, r24
     ce0:	51 f0       	breq	.+20     	; 0xcf6 <_ZN10FastSerial4peekEv+0x1c>
     ce2:	07 88       	ldd	r0, Z+23	; 0x17
     ce4:	f0 8d       	ldd	r31, Z+24	; 0x18
     ce6:	e0 2d       	mov	r30, r0
     ce8:	20 81       	ld	r18, Z
     cea:	31 81       	ldd	r19, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	28 17       	cp	r18, r24
     cf2:	39 07       	cpc	r19, r25
     cf4:	21 f4       	brne	.+8      	; 0xcfe <_ZN10FastSerial4peekEv+0x24>
     cf6:	2f ef       	ldi	r18, 0xFF	; 255
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
		return (-1);

	// pull character from tail
	return (_rxBuffer->bytes[_rxBuffer->tail]);
}
     cfa:	c9 01       	movw	r24, r18
     cfc:	08 95       	ret
	// if the head and tail are equal, the buffer is empty
	if (!_open || (_rxBuffer->head == _rxBuffer->tail))
		return (-1);

	// pull character from tail
	return (_rxBuffer->bytes[_rxBuffer->tail]);
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	06 80       	ldd	r0, Z+6	; 0x06
     d04:	f7 81       	ldd	r31, Z+7	; 0x07
     d06:	e0 2d       	mov	r30, r0
     d08:	e8 0f       	add	r30, r24
     d0a:	f9 1f       	adc	r31, r25
     d0c:	80 81       	ld	r24, Z
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f3 cf       	rjmp	.-26     	; 0xcfa <_ZN10FastSerial4peekEv+0x20>

00000d14 <_ZN10FastSerial5flushEv>:
}

void FastSerial::flush(void)
     d14:	dc 01       	movw	r26, r24
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of head but before writing
	// the value to tail; the previous value of rx_buffer_head
	// may be written to tail, making it appear as if the buffer
	// were full, not empty.
	_rxBuffer->head = _rxBuffer->tail;
     d16:	57 96       	adiw	r26, 0x17	; 23
     d18:	ed 91       	ld	r30, X+
     d1a:	fc 91       	ld	r31, X
     d1c:	58 97       	sbiw	r26, 0x18	; 24
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	91 83       	std	Z+1, r25	; 0x01
     d24:	80 83       	st	Z, r24

	// don't reverse this or there may be problems if the TX interrupt
	// occurs after reading the value of _txBuffer->tail but before writing
	// the value to _txBuffer->head.
	_txBuffer->tail = _txBuffer->head;
     d26:	59 96       	adiw	r26, 0x19	; 25
     d28:	ed 91       	ld	r30, X+
     d2a:	fc 91       	ld	r31, X
     d2c:	5a 97       	sbiw	r26, 0x1a	; 26
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	93 83       	std	Z+3, r25	; 0x03
     d34:	82 83       	std	Z+2, r24	; 0x02
}
     d36:	08 95       	ret

00000d38 <_ZN10FastSerial5writeEh>:

#if defined(ARDUINO) && ARDUINO >= 100
size_t FastSerial::write(uint8_t c)
     d38:	dc 01       	movw	r26, r24
{
	uint16_t i;

	if (!_open) // drop bytes if not open
     d3a:	5b 96       	adiw	r26, 0x1b	; 27
     d3c:	8c 91       	ld	r24, X
     d3e:	5b 97       	sbiw	r26, 0x1b	; 27
     d40:	88 23       	and	r24, r24
     d42:	a9 f1       	breq	.+106    	; 0xdae <_ZN10FastSerial5writeEh+0x76>
		return 0;

	// wait for room in the tx buffer
	i = (_txBuffer->head + 1) & _txBuffer->mask;
     d44:	59 96       	adiw	r26, 0x19	; 25
     d46:	ed 91       	ld	r30, X+
     d48:	fc 91       	ld	r31, X
     d4a:	5a 97       	sbiw	r26, 0x1a	; 26
     d4c:	20 81       	ld	r18, Z
     d4e:	31 81       	ldd	r19, Z+1	; 0x01
     d50:	2f 5f       	subi	r18, 0xFF	; 255
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	84 81       	ldd	r24, Z+4	; 0x04
     d56:	95 81       	ldd	r25, Z+5	; 0x05
     d58:	28 23       	and	r18, r24
     d5a:	39 23       	and	r19, r25

	// if the port is set into non-blocking mode, then drop the byte
	// if there isn't enough room for it in the transmit buffer
	if (_nonblocking_writes && i == _txBuffer->tail) {
     d5c:	5c 96       	adiw	r26, 0x1c	; 28
     d5e:	8c 91       	ld	r24, X
     d60:	5c 97       	sbiw	r26, 0x1c	; 28
     d62:	88 23       	and	r24, r24
     d64:	29 f0       	breq	.+10     	; 0xd70 <_ZN10FastSerial5writeEh+0x38>
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	28 17       	cp	r18, r24
     d6c:	39 07       	cpc	r19, r25
     d6e:	f9 f0       	breq	.+62     	; 0xdae <_ZN10FastSerial5writeEh+0x76>
		return 0;
	}

	while (i == _txBuffer->tail)
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	28 17       	cp	r18, r24
     d76:	39 07       	cpc	r19, r25
     d78:	d9 f3       	breq	.-10     	; 0xd70 <_ZN10FastSerial5writeEh+0x38>
		;

	// add byte to the buffer
	_txBuffer->bytes[_txBuffer->head] = c;
     d7a:	80 81       	ld	r24, Z
     d7c:	91 81       	ldd	r25, Z+1	; 0x01
     d7e:	06 80       	ldd	r0, Z+6	; 0x06
     d80:	f7 81       	ldd	r31, Z+7	; 0x07
     d82:	e0 2d       	mov	r30, r0
     d84:	e8 0f       	add	r30, r24
     d86:	f9 1f       	adc	r31, r25
     d88:	60 83       	st	Z, r22
	_txBuffer->head = i;
     d8a:	59 96       	adiw	r26, 0x19	; 25
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	5a 97       	sbiw	r26, 0x1a	; 26
     d92:	31 83       	std	Z+1, r19	; 0x01
     d94:	20 83       	st	Z, r18

	// enable the data-ready interrupt, as it may be off if the buffer is empty
	*_ucsrb |= _portTxBits;
     d96:	52 96       	adiw	r26, 0x12	; 18
     d98:	ed 91       	ld	r30, X+
     d9a:	fc 91       	ld	r31, X
     d9c:	53 97       	sbiw	r26, 0x13	; 19
     d9e:	80 81       	ld	r24, Z
     da0:	56 96       	adiw	r26, 0x16	; 22
     da2:	9c 91       	ld	r25, X
     da4:	89 2b       	or	r24, r25
     da6:	80 83       	st	Z, r24
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <_ZN10FastSerial5writeEh+0x7a>

	// return number of bytes written (always 1)
	return 1;
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
}
     db2:	c9 01       	movw	r24, r18
     db4:	08 95       	ret

00000db6 <_ZN10FastSerial11_freeBufferEPNS_6BufferE>:
	buffer->bytes = (uint8_t *) malloc(buffer->mask + 1);

	return (buffer->bytes != NULL);
}

void FastSerial::_freeBuffer(Buffer *buffer)
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
{
	buffer->head = buffer->tail = 0;
     dbc:	1b 82       	std	Y+3, r1	; 0x03
     dbe:	1a 82       	std	Y+2, r1	; 0x02
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	99 83       	std	Y+1, r25	; 0x01
     dc6:	88 83       	st	Y, r24
	buffer->mask = 0;
     dc8:	1d 82       	std	Y+5, r1	; 0x05
     dca:	1c 82       	std	Y+4, r1	; 0x04
	if (NULL != buffer->bytes) {
     dcc:	8e 81       	ldd	r24, Y+6	; 0x06
     dce:	9f 81       	ldd	r25, Y+7	; 0x07
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	21 f0       	breq	.+8      	; 0xddc <_ZN10FastSerial11_freeBufferEPNS_6BufferE+0x26>
		free(buffer->bytes);
     dd4:	0e 94 2b 21 	call	0x4256	; 0x4256 <free>
		buffer->bytes = NULL;
     dd8:	1f 82       	std	Y+7, r1	; 0x07
     dda:	1e 82       	std	Y+6, r1	; 0x06
	}
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <_ZN10FastSerial3endEv>:
	}

	*_ucsrb |= _portEnableBits;
}

void FastSerial::end()
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	8c 01       	movw	r16, r24
{
	*_ucsrb &= ~(_portEnableBits | _portTxBits);
     de8:	dc 01       	movw	r26, r24
     dea:	52 96       	adiw	r26, 0x12	; 18
     dec:	ed 91       	ld	r30, X+
     dee:	fc 91       	ld	r31, X
     df0:	53 97       	sbiw	r26, 0x13	; 19
     df2:	20 81       	ld	r18, Z
     df4:	56 96       	adiw	r26, 0x16	; 22
     df6:	8c 91       	ld	r24, X
     df8:	56 97       	sbiw	r26, 0x16	; 22
     dfa:	55 96       	adiw	r26, 0x15	; 21
     dfc:	9c 91       	ld	r25, X
     dfe:	55 97       	sbiw	r26, 0x15	; 21
     e00:	89 2b       	or	r24, r25
     e02:	80 95       	com	r24
     e04:	82 23       	and	r24, r18
     e06:	80 83       	st	Z, r24

	_freeBuffer(_rxBuffer);
     e08:	57 96       	adiw	r26, 0x17	; 23
     e0a:	8d 91       	ld	r24, X+
     e0c:	9c 91       	ld	r25, X
     e0e:	58 97       	sbiw	r26, 0x18	; 24
     e10:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN10FastSerial11_freeBufferEPNS_6BufferE>
	_freeBuffer(_txBuffer);
     e14:	f8 01       	movw	r30, r16
     e16:	81 8d       	ldd	r24, Z+25	; 0x19
     e18:	92 8d       	ldd	r25, Z+26	; 0x1a
     e1a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN10FastSerial11_freeBufferEPNS_6BufferE>
	_open = false;
     e1e:	d8 01       	movw	r26, r16
     e20:	5b 96       	adiw	r26, 0x1b	; 27
     e22:	1c 92       	st	X, r1
}
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <_ZN10FastSerial12_allocBufferEPNS_6BufferEj>:
}
#endif

// Buffer management ///////////////////////////////////////////////////////////

bool FastSerial::_allocBuffer(Buffer *buffer, unsigned int size)
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	8c 01       	movw	r16, r24
{
	uint16_t	mask;
	uint8_t		shift;

	// init buffer state
	buffer->head = buffer->tail = 0;
     e34:	fc 01       	movw	r30, r24
     e36:	13 82       	std	Z+3, r1	; 0x03
     e38:	12 82       	std	Z+2, r1	; 0x02
     e3a:	82 81       	ldd	r24, Z+2	; 0x02
     e3c:	93 81       	ldd	r25, Z+3	; 0x03
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	80 83       	st	Z, r24
     e42:	41 e0       	ldi	r20, 0x01	; 1

	// Compute the power of 2 greater or equal to the requested buffer size
	// and then a mask to simplify wrapping operations.  Using __builtin_clz
	// would seem to make sense, but it uses a 256(!) byte table.
	// Note that we ignore requests for more than BUFFER_MAX space.
	for (shift = 1; (1U << shift) < min(_max_buffer_size, size); shift++)
     e44:	a1 e0       	ldi	r26, 0x01	; 1
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x22>
     e4a:	4f 5f       	subi	r20, 0xFF	; 255
     e4c:	fd 01       	movw	r30, r26
     e4e:	04 2e       	mov	r0, r20
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x2c>
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x28>
     e5a:	9b 01       	movw	r18, r22
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	61 30       	cpi	r22, 0x01	; 1
     e60:	78 07       	cpc	r23, r24
     e62:	10 f0       	brcs	.+4      	; 0xe68 <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x3e>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	32 e0       	ldi	r19, 0x02	; 2
     e68:	e2 17       	cp	r30, r18
     e6a:	f3 07       	cpc	r31, r19
     e6c:	70 f3       	brcs	.-36     	; 0xe4a <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x20>
		;
	mask = (1 << shift) - 1;
     e6e:	c1 e0       	ldi	r28, 0x01	; 1
     e70:	d0 e0       	ldi	r29, 0x00	; 0
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x4e>
     e74:	cc 0f       	add	r28, r28
     e76:	dd 1f       	adc	r29, r29
     e78:	4a 95       	dec	r20
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x4a>
     e7c:	21 97       	sbiw	r28, 0x01	; 1

	// If the descriptor already has a buffer allocated we need to take
	// care of it.
	if (buffer->bytes) {
     e7e:	f8 01       	movw	r30, r16
     e80:	26 81       	ldd	r18, Z+6	; 0x06
     e82:	37 81       	ldd	r19, Z+7	; 0x07
     e84:	21 15       	cp	r18, r1
     e86:	31 05       	cpc	r19, r1
     e88:	41 f0       	breq	.+16     	; 0xe9a <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x70>

		// If the allocated buffer is already the correct size then
		// we have nothing to do
		if (buffer->mask == mask)
     e8a:	84 81       	ldd	r24, Z+4	; 0x04
     e8c:	95 81       	ldd	r25, Z+5	; 0x05
     e8e:	8c 17       	cp	r24, r28
     e90:	9d 07       	cpc	r25, r29
     e92:	89 f0       	breq	.+34     	; 0xeb6 <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x8c>
			return true;

		// Dispose of the old buffer.
		free(buffer->bytes);
     e94:	c9 01       	movw	r24, r18
     e96:	0e 94 2b 21 	call	0x4256	; 0x4256 <free>
	}
	buffer->mask = mask;
     e9a:	f8 01       	movw	r30, r16
     e9c:	d5 83       	std	Z+5, r29	; 0x05
     e9e:	c4 83       	std	Z+4, r28	; 0x04

	// allocate memory for the buffer - if this fails, we fail.
	buffer->bytes = (uint8_t *) malloc(buffer->mask + 1);
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	0e 94 a4 20 	call	0x4148	; 0x4148 <malloc>
     ea8:	9c 01       	movw	r18, r24
     eaa:	f8 01       	movw	r30, r16
     eac:	97 83       	std	Z+7, r25	; 0x07
     eae:	86 83       	std	Z+6, r24	; 0x06

	return (buffer->bytes != NULL);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	23 2b       	or	r18, r19
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <_ZN10FastSerial12_allocBufferEPNS_6BufferEj+0x8e>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <_ZN10FastSerial5beginEljj>:
void FastSerial::begin(long baud)
{
	begin(baud, 0, 0);
}

void FastSerial::begin(long baud, unsigned int rxSpace, unsigned int txSpace)
     ec2:	af 92       	push	r10
     ec4:	bf 92       	push	r11
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
     ed8:	5a 01       	movw	r10, r20
     eda:	6b 01       	movw	r12, r22
     edc:	79 01       	movw	r14, r18
	uint16_t ubrr;
	bool use_u2x = true;
	bool need_allocate = true;

	// if we are currently open...
	if (_open) {
     ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee0:	88 23       	and	r24, r24
     ee2:	a1 f1       	breq	.+104    	; 0xf4c <_ZN10FastSerial5beginEljj+0x8a>
		// If the caller wants to preserve the buffer sizing, work out what
		// it currently is...
		if (0 == rxSpace)
     ee4:	21 15       	cp	r18, r1
     ee6:	31 05       	cpc	r19, r1
     ee8:	39 f4       	brne	.+14     	; 0xef8 <_ZN10FastSerial5beginEljj+0x36>
			rxSpace = _rxBuffer->mask + 1;
     eea:	ef 89       	ldd	r30, Y+23	; 0x17
     eec:	f8 8d       	ldd	r31, Y+24	; 0x18
     eee:	e4 80       	ldd	r14, Z+4	; 0x04
     ef0:	f5 80       	ldd	r15, Z+5	; 0x05
     ef2:	08 94       	sec
     ef4:	e1 1c       	adc	r14, r1
     ef6:	f1 1c       	adc	r15, r1
		if (0 == txSpace)
     ef8:	01 15       	cp	r16, r1
     efa:	11 05       	cpc	r17, r1
     efc:	31 f4       	brne	.+12     	; 0xf0a <_ZN10FastSerial5beginEljj+0x48>
			txSpace = _txBuffer->mask + 1;
     efe:	e9 8d       	ldd	r30, Y+25	; 0x19
     f00:	fa 8d       	ldd	r31, Y+26	; 0x1a
     f02:	04 81       	ldd	r16, Z+4	; 0x04
     f04:	15 81       	ldd	r17, Z+5	; 0x05
     f06:	0f 5f       	subi	r16, 0xFF	; 255
     f08:	1f 4f       	sbci	r17, 0xFF	; 255

		if (rxSpace == (_rxBuffer->mask + 1) && 
     f0a:	ef 89       	ldd	r30, Y+23	; 0x17
     f0c:	f8 8d       	ldd	r31, Y+24	; 0x18
     f0e:	84 81       	ldd	r24, Z+4	; 0x04
     f10:	95 81       	ldd	r25, Z+5	; 0x05
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	e8 16       	cp	r14, r24
     f16:	f9 06       	cpc	r15, r25
     f18:	91 f4       	brne	.+36     	; 0xf3e <_ZN10FastSerial5beginEljj+0x7c>
     f1a:	e9 8d       	ldd	r30, Y+25	; 0x19
     f1c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     f1e:	84 81       	ldd	r24, Z+4	; 0x04
     f20:	95 81       	ldd	r25, Z+5	; 0x05
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	08 17       	cp	r16, r24
     f26:	19 07       	cpc	r17, r25
     f28:	51 f4       	brne	.+20     	; 0xf3e <_ZN10FastSerial5beginEljj+0x7c>
			txSpace == (_txBuffer->mask + 1)) {
			// avoid re-allocating the buffers if possible
			need_allocate = false;
			*_ucsrb &= ~(_portEnableBits | _portTxBits);
     f2a:	ea 89       	ldd	r30, Y+18	; 0x12
     f2c:	fb 89       	ldd	r31, Y+19	; 0x13
     f2e:	20 81       	ld	r18, Z
     f30:	8e 89       	ldd	r24, Y+22	; 0x16
     f32:	9d 89       	ldd	r25, Y+21	; 0x15
     f34:	89 2b       	or	r24, r25
     f36:	80 95       	com	r24
     f38:	82 23       	and	r24, r18
     f3a:	80 83       	st	Z, r24
     f3c:	28 c0       	rjmp	.+80     	; 0xf8e <_ZN10FastSerial5beginEljj+0xcc>
		} else {
			// close the port in its current configuration, clears _open
			end();
     f3e:	e8 81       	ld	r30, Y
     f40:	f9 81       	ldd	r31, Y+1	; 0x01
     f42:	00 88       	ldd	r0, Z+16	; 0x10
     f44:	f1 89       	ldd	r31, Z+17	; 0x11
     f46:	e0 2d       	mov	r30, r0
     f48:	ce 01       	movw	r24, r28
     f4a:	09 95       	icall
		}
	}

	if (need_allocate) {
		// allocate buffers
		if (!_allocBuffer(_rxBuffer, rxSpace ? : _default_rx_buffer_size) || !_allocBuffer(_txBuffer, txSpace ?	: _default_tx_buffer_size)) {
     f4c:	8f 89       	ldd	r24, Y+23	; 0x17
     f4e:	98 8d       	ldd	r25, Y+24	; 0x18
     f50:	e1 14       	cp	r14, r1
     f52:	f1 04       	cpc	r15, r1
     f54:	19 f4       	brne	.+6      	; 0xf5c <_ZN10FastSerial5beginEljj+0x9a>
     f56:	70 e8       	ldi	r23, 0x80	; 128
     f58:	e7 2e       	mov	r14, r23
     f5a:	f1 2c       	mov	r15, r1
     f5c:	b7 01       	movw	r22, r14
     f5e:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN10FastSerial12_allocBufferEPNS_6BufferEj>
     f62:	88 23       	and	r24, r24
     f64:	61 f0       	breq	.+24     	; 0xf7e <_ZN10FastSerial5beginEljj+0xbc>
     f66:	89 8d       	ldd	r24, Y+25	; 0x19
     f68:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f6a:	01 15       	cp	r16, r1
     f6c:	11 05       	cpc	r17, r1
     f6e:	11 f4       	brne	.+4      	; 0xf74 <_ZN10FastSerial5beginEljj+0xb2>
     f70:	00 e1       	ldi	r16, 0x10	; 16
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	b8 01       	movw	r22, r16
     f76:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN10FastSerial12_allocBufferEPNS_6BufferEj>
     f7a:	88 23       	and	r24, r24
     f7c:	41 f4       	brne	.+16     	; 0xf8e <_ZN10FastSerial5beginEljj+0xcc>
			end();
     f7e:	e8 81       	ld	r30, Y
     f80:	f9 81       	ldd	r31, Y+1	; 0x01
     f82:	00 88       	ldd	r0, Z+16	; 0x10
     f84:	f1 89       	ldd	r31, Z+17	; 0x11
     f86:	e0 2d       	mov	r30, r0
     f88:	ce 01       	movw	r24, r28
     f8a:	09 95       	icall
     f8c:	4c c0       	rjmp	.+152    	; 0x1026 <_ZN10FastSerial5beginEljj+0x164>
			return; // couldn't allocate buffers - fatal
		}
	}

	// reset buffer pointers
	_txBuffer->head = _txBuffer->tail = 0;
     f8e:	e9 8d       	ldd	r30, Y+25	; 0x19
     f90:	fa 8d       	ldd	r31, Y+26	; 0x1a
     f92:	13 82       	std	Z+3, r1	; 0x03
     f94:	12 82       	std	Z+2, r1	; 0x02
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
	_rxBuffer->head = _rxBuffer->tail = 0;
     f9e:	ef 89       	ldd	r30, Y+23	; 0x17
     fa0:	f8 8d       	ldd	r31, Y+24	; 0x18
     fa2:	13 82       	std	Z+3, r1	; 0x03
     fa4:	12 82       	std	Z+2, r1	; 0x02
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24

	// mark the port as open
	_open = true;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	8b 8f       	std	Y+27, r24	; 0x1b

	// If the user has supplied a new baud rate, compute the new UBRR value.
	if (baud > 0) {
     fb2:	1a 14       	cp	r1, r10
     fb4:	1b 04       	cpc	r1, r11
     fb6:	1c 04       	cpc	r1, r12
     fb8:	1d 04       	cpc	r1, r13
     fba:	54 f5       	brge	.+84     	; 0x1010 <_ZN10FastSerial5beginEljj+0x14e>
     fbc:	e8 89       	ldd	r30, Y+16	; 0x10
     fbe:	f9 89       	ldd	r31, Y+17	; 0x11
#if F_CPU == 16000000UL
		// hardcoded exception for compatibility with the bootloader shipped
		// with the Duemilanove and previous boards and the firmware on the 8U2
		// on the Uno and Mega 2560.
		if (baud == 57600)
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	a8 16       	cp	r10, r24
     fc4:	81 ee       	ldi	r24, 0xE1	; 225
     fc6:	b8 06       	cpc	r11, r24
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	c8 06       	cpc	r12, r24
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	d8 06       	cpc	r13, r24
     fd0:	31 f1       	breq	.+76     	; 0x101e <_ZN10FastSerial5beginEljj+0x15c>
			use_u2x = false;
#endif

		if (use_u2x) {
			*_ucsra = 1 << _u2x;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0c 88       	ldd	r0, Y+20	; 0x14
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <_ZN10FastSerial5beginEljj+0x11c>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <_ZN10FastSerial5beginEljj+0x118>
     fe2:	80 83       	st	Z, r24
			ubrr = (F_CPU / 4 / baud - 1) / 2;
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	79 e0       	ldi	r23, 0x09	; 9
     fe8:	8d e3       	ldi	r24, 0x3D	; 61
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a6 01       	movw	r20, r12
     fee:	95 01       	movw	r18, r10
     ff0:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__udivmodsi4>
     ff4:	21 50       	subi	r18, 0x01	; 1
     ff6:	30 40       	sbci	r19, 0x00	; 0
     ff8:	40 40       	sbci	r20, 0x00	; 0
     ffa:	50 40       	sbci	r21, 0x00	; 0
     ffc:	56 95       	lsr	r21
     ffe:	47 95       	ror	r20
    1000:	37 95       	ror	r19
    1002:	27 95       	ror	r18
		} else {
			*_ucsra = 0;
			ubrr = (F_CPU / 8 / baud - 1) / 2;
		}

		*_ubrrh = ubrr >> 8;
    1004:	ec 85       	ldd	r30, Y+12	; 0x0c
    1006:	fd 85       	ldd	r31, Y+13	; 0x0d
    1008:	30 83       	st	Z, r19
		*_ubrrl = ubrr;
    100a:	ee 85       	ldd	r30, Y+14	; 0x0e
    100c:	ff 85       	ldd	r31, Y+15	; 0x0f
    100e:	20 83       	st	Z, r18
	}

	*_ucsrb |= _portEnableBits;
    1010:	ea 89       	ldd	r30, Y+18	; 0x12
    1012:	fb 89       	ldd	r31, Y+19	; 0x13
    1014:	80 81       	ld	r24, Z
    1016:	9d 89       	ldd	r25, Y+21	; 0x15
    1018:	89 2b       	or	r24, r25
    101a:	80 83       	st	Z, r24
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <_ZN10FastSerial5beginEljj+0x164>

		if (use_u2x) {
			*_ucsra = 1 << _u2x;
			ubrr = (F_CPU / 4 / baud - 1) / 2;
		} else {
			*_ucsra = 0;
    101e:	10 82       	st	Z, r1
    1020:	20 e1       	ldi	r18, 0x10	; 16
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	ef cf       	rjmp	.-34     	; 0x1004 <_ZN10FastSerial5beginEljj+0x142>
		*_ubrrh = ubrr >> 8;
		*_ubrrl = ubrr;
	}

	*_ucsrb |= _portEnableBits;
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	08 95       	ret

0000103c <_ZN11AP_GPS_NMEAC1EP6Stream>:
// Convenience macros //////////////////////////////////////////////////////////
//
#define DIGIT_TO_VAL(_x)	(_x - '0')

// Constructors ////////////////////////////////////////////////////////////////
AP_GPS_NMEA::AP_GPS_NMEA(Stream *s) :
    103c:	fc 01       	movw	r30, r24
    /// @note The stream is expected to be set up and configured for the
    ///       correct bitrate before ::init is called.
    ///
    /// @param	s	Stream connected to the GPS module.
    ///
    GPS(Stream *s) : _port(s) {};
    103e:	74 ab       	std	Z+52, r23	; 0x34
    1040:	63 ab       	std	Z+51, r22	; 0x33
    GPS(s)
    1042:	87 ea       	ldi	r24, 0xA7	; 167
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
{
}
    104a:	08 95       	ret

0000104c <_ZN11AP_GPS_NMEA14_parse_degreesEv>:
        }
    }
    return ret;
}

uint32_t AP_GPS_NMEA::_parse_degrees()
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    uint8_t deg = 0, min = 0;
    unsigned int frac_min = 0;
	int32_t ret = 0;

    // scan for decimal point or end of field
    for (p = _term; isdigit(*p); p++)
    1056:	9c 01       	movw	r18, r24
    1058:	27 5a       	subi	r18, 0xA7	; 167
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	d9 01       	movw	r26, r18
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x16>
    1060:	11 96       	adiw	r26, 0x01	; 1
    1062:	7c 91       	ld	r23, X
    1064:	87 2f       	mov	r24, r23
    1066:	99 27       	eor	r25, r25
    1068:	87 fd       	sbrc	r24, 7
    106a:	90 95       	com	r25
    106c:	c0 97       	sbiw	r24, 0x30	; 48
    106e:	0a 97       	sbiw	r24, 0x0a	; 10
    1070:	b8 f3       	brcs	.-18     	; 0x1060 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x14>
    1072:	ad 01       	movw	r20, r26
    1074:	42 1b       	sub	r20, r18
    1076:	53 0b       	sbc	r21, r19
    1078:	f9 01       	movw	r30, r18
    107a:	dd 24       	eor	r13, r13
    q = _term;

    // convert degrees
    while ((p - q) > 2) {
        if (deg)
            deg *= 10;
    107c:	9a e0       	ldi	r25, 0x0A	; 10
    107e:	0a c0       	rjmp	.+20     	; 0x1094 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x48>
        ;
    q = _term;

    // convert degrees
    while ((p - q) > 2) {
        if (deg)
    1080:	dd 20       	and	r13, r13
    1082:	19 f0       	breq	.+6      	; 0x108a <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x3e>
            deg *= 10;
    1084:	d9 9e       	mul	r13, r25
    1086:	d0 2c       	mov	r13, r0
    1088:	11 24       	eor	r1, r1
        deg += DIGIT_TO_VAL(*q++);
    108a:	81 91       	ld	r24, Z+
    108c:	80 53       	subi	r24, 0x30	; 48
    108e:	d8 0e       	add	r13, r24
    1090:	41 50       	subi	r20, 0x01	; 1
    1092:	50 40       	sbci	r21, 0x00	; 0
    for (p = _term; isdigit(*p); p++)
        ;
    q = _term;

    // convert degrees
    while ((p - q) > 2) {
    1094:	43 30       	cpi	r20, 0x03	; 3
    1096:	51 05       	cpc	r21, r1
    1098:	9c f7       	brge	.-26     	; 0x1080 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x34>
    109a:	60 e0       	ldi	r22, 0x00	; 0
    }

    // convert minutes
    while (p > q) {
        if (min)
            min *= 10;
    109c:	9a e0       	ldi	r25, 0x0A	; 10
    109e:	08 c0       	rjmp	.+16     	; 0x10b0 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x64>
        deg += DIGIT_TO_VAL(*q++);
    }

    // convert minutes
    while (p > q) {
        if (min)
    10a0:	66 23       	and	r22, r22
    10a2:	19 f0       	breq	.+6      	; 0x10aa <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x5e>
            min *= 10;
    10a4:	69 9f       	mul	r22, r25
    10a6:	60 2d       	mov	r22, r0
    10a8:	11 24       	eor	r1, r1
        min += DIGIT_TO_VAL(*q++);
    10aa:	81 91       	ld	r24, Z+
    10ac:	80 53       	subi	r24, 0x30	; 48
    10ae:	68 0f       	add	r22, r24
            deg *= 10;
        deg += DIGIT_TO_VAL(*q++);
    }

    // convert minutes
    while (p > q) {
    10b0:	ea 17       	cp	r30, r26
    10b2:	fb 07       	cpc	r31, r27
    10b4:	a8 f3       	brcs	.-22     	; 0x10a0 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x54>
    }

    // convert fractional minutes
    // expect up to four digits, result is in
    // ten-thousandths of a minute
    if (*p == '.') {
    10b6:	7e 32       	cpi	r23, 0x2E	; 46
    10b8:	19 f0       	breq	.+6      	; 0x10c0 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x74>
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	22 c0       	rjmp	.+68     	; 0x1104 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0xb8>
        q = p + 1;
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
        for (int i = 0; i < 5; i++) {
            frac_min = (int32_t)(frac_min * 10);
    10ca:	c9 01       	movw	r24, r18
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	73 e0       	ldi	r23, 0x03	; 3
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	7a 95       	dec	r23
    10d8:	e1 f7       	brne	.-8      	; 0x10d2 <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x86>
    10da:	28 0f       	add	r18, r24
    10dc:	39 1f       	adc	r19, r25
            if (isdigit(*q))
    10de:	8c 91       	ld	r24, X
    10e0:	e8 2f       	mov	r30, r24
    10e2:	ff 27       	eor	r31, r31
    10e4:	e7 fd       	sbrc	r30, 7
    10e6:	f0 95       	com	r31
    10e8:	cf 01       	movw	r24, r30
    10ea:	c0 97       	sbiw	r24, 0x30	; 48
    10ec:	0a 97       	sbiw	r24, 0x0a	; 10
    10ee:	28 f4       	brcc	.+10     	; 0x10fa <_ZN11AP_GPS_NMEA14_parse_degreesEv+0xae>
                frac_min += *q++ - '0';
    10f0:	20 53       	subi	r18, 0x30	; 48
    10f2:	30 40       	sbci	r19, 0x00	; 0
    10f4:	2e 0f       	add	r18, r30
    10f6:	3f 1f       	adc	r19, r31
    10f8:	11 96       	adiw	r26, 0x01	; 1
    // convert fractional minutes
    // expect up to four digits, result is in
    // ten-thousandths of a minute
    if (*p == '.') {
        q = p + 1;
        for (int i = 0; i < 5; i++) {
    10fa:	4f 5f       	subi	r20, 0xFF	; 255
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	45 30       	cpi	r20, 0x05	; 5
    1100:	51 05       	cpc	r21, r1
    1102:	19 f7       	brne	.-58     	; 0x10ca <_ZN11AP_GPS_NMEA14_parse_degreesEv+0x7e>
    1104:	79 01       	movw	r14, r18
    1106:	00 e0       	ldi	r16, 0x00	; 0
    1108:	10 e0       	ldi	r17, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	20 ea       	ldi	r18, 0xA0	; 160
    1112:	36 e8       	ldi	r19, 0x86	; 134
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    111c:	e6 0e       	add	r14, r22
    111e:	f7 1e       	adc	r15, r23
    1120:	08 1f       	adc	r16, r24
    1122:	19 1f       	adc	r17, r25
    1124:	c8 01       	movw	r24, r16
    1126:	b7 01       	movw	r22, r14
    1128:	26 e0       	ldi	r18, 0x06	; 6
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__udivmodsi4>
    1134:	79 01       	movw	r14, r18
    1136:	8a 01       	movw	r16, r20
    1138:	6d 2d       	mov	r22, r13
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	20 e4       	ldi	r18, 0x40	; 64
    1142:	32 e4       	ldi	r19, 0x42	; 66
    1144:	4f e0       	ldi	r20, 0x0F	; 15
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    114c:	e6 0e       	add	r14, r22
    114e:	f7 1e       	adc	r15, r23
    1150:	08 1f       	adc	r16, r24
    1152:	19 1f       	adc	r17, r25
                frac_min += *q++ - '0';
        }
    }
	ret = (int32_t)deg * (int32_t)1000000UL + (int32_t)((min * 100000UL + frac_min) / 6UL);
    return ret;
}
    1154:	b7 01       	movw	r22, r14
    1156:	c8 01       	movw	r24, r16
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	08 95       	ret

00001164 <_ZN11AP_GPS_NMEA14_parse_decimalEv>:
        return a - 'a' + 10;
    else
        return a - '0';
}

uint32_t AP_GPS_NMEA::_parse_decimal()
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
{
    char *p = _term;
    1170:	ec 01       	movw	r28, r24
    1172:	c7 5a       	subi	r28, 0xA7	; 167
    1174:	df 4f       	sbci	r29, 0xFF	; 255
    uint32_t ret = 100UL * atol(p);
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 26 04 	call	0x84c	; 0x84c <atol>
    117c:	24 e6       	ldi	r18, 0x64	; 100
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    1188:	7b 01       	movw	r14, r22
    118a:	8c 01       	movw	r16, r24
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <_ZN11AP_GPS_NMEA14_parse_decimalEv+0x2c>
    while (isdigit(*p))
        ++p;
    118e:	21 96       	adiw	r28, 0x01	; 1

uint32_t AP_GPS_NMEA::_parse_decimal()
{
    char *p = _term;
    uint32_t ret = 100UL * atol(p);
    while (isdigit(*p))
    1190:	28 81       	ld	r18, Y
    1192:	82 2f       	mov	r24, r18
    1194:	99 27       	eor	r25, r25
    1196:	87 fd       	sbrc	r24, 7
    1198:	90 95       	com	r25
    119a:	c0 97       	sbiw	r24, 0x30	; 48
    119c:	0a 97       	sbiw	r24, 0x0a	; 10
    119e:	b8 f3       	brcs	.-18     	; 0x118e <_ZN11AP_GPS_NMEA14_parse_decimalEv+0x2a>
        ++p;
    if (*p == '.') {
    11a0:	2e 32       	cpi	r18, 0x2E	; 46
    11a2:	49 f5       	brne	.+82     	; 0x11f6 <_ZN11AP_GPS_NMEA14_parse_decimalEv+0x92>
        if (isdigit(p[1])) {
    11a4:	29 81       	ldd	r18, Y+1	; 0x01
    11a6:	82 2f       	mov	r24, r18
    11a8:	99 27       	eor	r25, r25
    11aa:	87 fd       	sbrc	r24, 7
    11ac:	90 95       	com	r25
    11ae:	c0 97       	sbiw	r24, 0x30	; 48
    11b0:	0a 97       	sbiw	r24, 0x0a	; 10
    11b2:	08 f5       	brcc	.+66     	; 0x11f6 <_ZN11AP_GPS_NMEA14_parse_decimalEv+0x92>
            ret += 10 * (p[1] - '0');
    11b4:	8a e0       	ldi	r24, 0x0A	; 10
    11b6:	28 02       	muls	r18, r24
    11b8:	c0 01       	movw	r24, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	80 5e       	subi	r24, 0xE0	; 224
    11be:	91 40       	sbci	r25, 0x01	; 1
    11c0:	aa 27       	eor	r26, r26
    11c2:	97 fd       	sbrc	r25, 7
    11c4:	a0 95       	com	r26
    11c6:	ba 2f       	mov	r27, r26
    11c8:	e8 0e       	add	r14, r24
    11ca:	f9 1e       	adc	r15, r25
    11cc:	0a 1f       	adc	r16, r26
    11ce:	1b 1f       	adc	r17, r27
            if (isdigit(p[2]))
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	33 27       	eor	r19, r19
    11d6:	27 fd       	sbrc	r18, 7
    11d8:	30 95       	com	r19
    11da:	20 53       	subi	r18, 0x30	; 48
    11dc:	30 40       	sbci	r19, 0x00	; 0
    11de:	2a 30       	cpi	r18, 0x0A	; 10
    11e0:	31 05       	cpc	r19, r1
    11e2:	48 f4       	brcc	.+18     	; 0x11f6 <_ZN11AP_GPS_NMEA14_parse_decimalEv+0x92>
                ret += p[2] - '0';
    11e4:	c9 01       	movw	r24, r18
    11e6:	aa 27       	eor	r26, r26
    11e8:	97 fd       	sbrc	r25, 7
    11ea:	a0 95       	com	r26
    11ec:	ba 2f       	mov	r27, r26
    11ee:	e8 0e       	add	r14, r24
    11f0:	f9 1e       	adc	r15, r25
    11f2:	0a 1f       	adc	r16, r26
    11f4:	1b 1f       	adc	r17, r27
        }
    }
    return ret;
}
    11f6:	b7 01       	movw	r22, r14
    11f8:	c8 01       	movw	r24, r16
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	08 95       	ret

00001208 <_ZN11AP_GPS_NMEA14_term_completeEv>:
    return ret;
}

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool AP_GPS_NMEA::_term_complete()
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
{
    // handle the last term in a message
    if (_is_checksum_term) {
    1212:	c8 5a       	subi	r28, 0xA8	; 168
    1214:	df 4f       	sbci	r29, 0xFF	; 255
    1216:	88 81       	ld	r24, Y
    1218:	c8 55       	subi	r28, 0x58	; 88
    121a:	d0 40       	sbci	r29, 0x00	; 0
    121c:	88 23       	and	r24, r24
    121e:	09 f4       	brne	.+2      	; 0x1222 <_ZN11AP_GPS_NMEA14_term_completeEv+0x1a>
    1220:	15 c1       	rjmp	.+554    	; 0x144c <_ZN11AP_GPS_NMEA14_term_completeEv+0x244>
        uint8_t checksum = 16 * _from_hex(_term[0]) + _from_hex(_term[1]);
    1222:	c7 5a       	subi	r28, 0xA7	; 167
    1224:	df 4f       	sbci	r29, 0xFF	; 255
    1226:	98 81       	ld	r25, Y
    1228:	c9 55       	subi	r28, 0x59	; 89
    122a:	d0 40       	sbci	r29, 0x00	; 0
//
// internal utilities
//
int AP_GPS_NMEA::_from_hex(char a)
{
    if (a >= 'A' && a <= 'F')
    122c:	89 2f       	mov	r24, r25
    122e:	81 54       	subi	r24, 0x41	; 65
    1230:	86 30       	cpi	r24, 0x06	; 6
    1232:	38 f4       	brcc	.+14     	; 0x1242 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3a>
        return a - 'A' + 10;
    1234:	29 2f       	mov	r18, r25
    1236:	33 27       	eor	r19, r19
    1238:	27 fd       	sbrc	r18, 7
    123a:	30 95       	com	r19
    123c:	27 53       	subi	r18, 0x37	; 55
    123e:	30 40       	sbci	r19, 0x00	; 0
    1240:	0c c0       	rjmp	.+24     	; 0x125a <_ZN11AP_GPS_NMEA14_term_completeEv+0x52>
    1242:	29 2f       	mov	r18, r25
    1244:	33 27       	eor	r19, r19
    1246:	27 fd       	sbrc	r18, 7
    1248:	30 95       	com	r19
    else if (a >= 'a' && a <= 'f')
    124a:	91 56       	subi	r25, 0x61	; 97
    124c:	96 30       	cpi	r25, 0x06	; 6
    124e:	18 f4       	brcc	.+6      	; 0x1256 <_ZN11AP_GPS_NMEA14_term_completeEv+0x4e>
        return a - 'a' + 10;
    1250:	27 55       	subi	r18, 0x57	; 87
    1252:	30 40       	sbci	r19, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <_ZN11AP_GPS_NMEA14_term_completeEv+0x52>
    else
        return a - '0';
    1256:	20 53       	subi	r18, 0x30	; 48
    1258:	30 40       	sbci	r19, 0x00	; 0
// Returns true if new sentence has just passed checksum test and is validated
bool AP_GPS_NMEA::_term_complete()
{
    // handle the last term in a message
    if (_is_checksum_term) {
        uint8_t checksum = 16 * _from_hex(_term[0]) + _from_hex(_term[1]);
    125a:	c6 5a       	subi	r28, 0xA6	; 166
    125c:	df 4f       	sbci	r29, 0xFF	; 255
    125e:	48 81       	ld	r20, Y
    1260:	ca 55       	subi	r28, 0x5A	; 90
    1262:	d0 40       	sbci	r29, 0x00	; 0
//
// internal utilities
//
int AP_GPS_NMEA::_from_hex(char a)
{
    if (a >= 'A' && a <= 'F')
    1264:	84 2f       	mov	r24, r20
    1266:	81 54       	subi	r24, 0x41	; 65
    1268:	86 30       	cpi	r24, 0x06	; 6
    126a:	30 f4       	brcc	.+12     	; 0x1278 <_ZN11AP_GPS_NMEA14_term_completeEv+0x70>
        return a - 'A' + 10;
    126c:	84 2f       	mov	r24, r20
    126e:	99 27       	eor	r25, r25
    1270:	87 fd       	sbrc	r24, 7
    1272:	90 95       	com	r25
    1274:	c7 97       	sbiw	r24, 0x37	; 55
    1276:	0b c0       	rjmp	.+22     	; 0x128e <_ZN11AP_GPS_NMEA14_term_completeEv+0x86>
    1278:	84 2f       	mov	r24, r20
    127a:	99 27       	eor	r25, r25
    127c:	87 fd       	sbrc	r24, 7
    127e:	90 95       	com	r25
    else if (a >= 'a' && a <= 'f')
    1280:	41 56       	subi	r20, 0x61	; 97
    1282:	46 30       	cpi	r20, 0x06	; 6
    1284:	18 f4       	brcc	.+6      	; 0x128c <_ZN11AP_GPS_NMEA14_term_completeEv+0x84>
        return a - 'a' + 10;
    1286:	87 55       	subi	r24, 0x57	; 87
    1288:	90 40       	sbci	r25, 0x00	; 0
    128a:	01 c0       	rjmp	.+2      	; 0x128e <_ZN11AP_GPS_NMEA14_term_completeEv+0x86>
    else
        return a - '0';
    128c:	c0 97       	sbiw	r24, 0x30	; 48
bool AP_GPS_NMEA::_term_complete()
{
    // handle the last term in a message
    if (_is_checksum_term) {
        uint8_t checksum = 16 * _from_hex(_term[0]) + _from_hex(_term[1]);
        if (checksum == _parity) {
    128e:	f4 e0       	ldi	r31, 0x04	; 4
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	fa 95       	dec	r31
    1296:	e1 f7       	brne	.-8      	; 0x1290 <_ZN11AP_GPS_NMEA14_term_completeEv+0x88>
    1298:	98 2f       	mov	r25, r24
    129a:	92 0f       	add	r25, r18
    129c:	c9 5a       	subi	r28, 0xA9	; 169
    129e:	df 4f       	sbci	r29, 0xFF	; 255
    12a0:	88 81       	ld	r24, Y
    12a2:	c7 55       	subi	r28, 0x57	; 87
    12a4:	d0 40       	sbci	r29, 0x00	; 0
    12a6:	98 17       	cp	r25, r24
    12a8:	09 f0       	breq	.+2      	; 0x12ac <_ZN11AP_GPS_NMEA14_term_completeEv+0xa4>
    12aa:	fc c1       	rjmp	.+1016   	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
            if (_gps_data_good) {
    12ac:	c5 59       	subi	r28, 0x95	; 149
    12ae:	df 4f       	sbci	r29, 0xFF	; 255
    12b0:	88 81       	ld	r24, Y
    12b2:	cb 56       	subi	r28, 0x6B	; 107
    12b4:	d0 40       	sbci	r29, 0x00	; 0
    12b6:	fe 01       	movw	r30, r28
    12b8:	e8 59       	subi	r30, 0x98	; 152
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	88 23       	and	r24, r24
    12be:	09 f4       	brne	.+2      	; 0x12c2 <_ZN11AP_GPS_NMEA14_term_completeEv+0xba>
    12c0:	bd c0       	rjmp	.+378    	; 0x143c <_ZN11AP_GPS_NMEA14_term_completeEv+0x234>
                switch (_sentence_type) {
    12c2:	80 81       	ld	r24, Z
    12c4:	80 34       	cpi	r24, 0x40	; 64
    12c6:	09 f4       	brne	.+2      	; 0x12ca <_ZN11AP_GPS_NMEA14_term_completeEv+0xc2>
    12c8:	57 c0       	rjmp	.+174    	; 0x1378 <_ZN11AP_GPS_NMEA14_term_completeEv+0x170>
    12ca:	80 36       	cpi	r24, 0x60	; 96
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <_ZN11AP_GPS_NMEA14_term_completeEv+0xc8>
    12ce:	9d c0       	rjmp	.+314    	; 0x140a <_ZN11AP_GPS_NMEA14_term_completeEv+0x202>
    12d0:	80 32       	cpi	r24, 0x20	; 32
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <_ZN11AP_GPS_NMEA14_term_completeEv+0xce>
    12d4:	e5 c1       	rjmp	.+970    	; 0x16a0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x498>
                case _GPS_SENTENCE_GPRMC:
                    time			= _new_time;
    12d6:	c4 59       	subi	r28, 0x94	; 148
    12d8:	df 4f       	sbci	r29, 0xFF	; 255
    12da:	88 81       	ld	r24, Y
    12dc:	99 81       	ldd	r25, Y+1	; 0x01
    12de:	aa 81       	ldd	r26, Y+2	; 0x02
    12e0:	bb 81       	ldd	r27, Y+3	; 0x03
    12e2:	cc 56       	subi	r28, 0x6C	; 108
    12e4:	d0 40       	sbci	r29, 0x00	; 0
    12e6:	8c 83       	std	Y+4, r24	; 0x04
    12e8:	9d 83       	std	Y+5, r25	; 0x05
    12ea:	ae 83       	std	Y+6, r26	; 0x06
    12ec:	bf 83       	std	Y+7, r27	; 0x07
                    date			= _new_date;
    12ee:	c0 59       	subi	r28, 0x90	; 144
    12f0:	df 4f       	sbci	r29, 0xFF	; 255
    12f2:	88 81       	ld	r24, Y
    12f4:	99 81       	ldd	r25, Y+1	; 0x01
    12f6:	aa 81       	ldd	r26, Y+2	; 0x02
    12f8:	bb 81       	ldd	r27, Y+3	; 0x03
    12fa:	c0 57       	subi	r28, 0x70	; 112
    12fc:	d0 40       	sbci	r29, 0x00	; 0
    12fe:	88 87       	std	Y+8, r24	; 0x08
    1300:	99 87       	std	Y+9, r25	; 0x09
    1302:	aa 87       	std	Y+10, r26	; 0x0a
    1304:	bb 87       	std	Y+11, r27	; 0x0b
                    latitude		= _new_latitude * 10;	// degrees*10e5 -> 10e7
    1306:	cc 58       	subi	r28, 0x8C	; 140
    1308:	df 4f       	sbci	r29, 0xFF	; 255
    130a:	68 81       	ld	r22, Y
    130c:	79 81       	ldd	r23, Y+1	; 0x01
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	9b 81       	ldd	r25, Y+3	; 0x03
    1312:	c4 57       	subi	r28, 0x74	; 116
    1314:	d0 40       	sbci	r29, 0x00	; 0
    1316:	2a e0       	ldi	r18, 0x0A	; 10
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    1322:	6c 87       	std	Y+12, r22	; 0x0c
    1324:	7d 87       	std	Y+13, r23	; 0x0d
    1326:	8e 87       	std	Y+14, r24	; 0x0e
    1328:	9f 87       	std	Y+15, r25	; 0x0f
                    longitude		= _new_longitude * 10;	// degrees*10e5 -> 10e7
    132a:	c8 58       	subi	r28, 0x88	; 136
    132c:	df 4f       	sbci	r29, 0xFF	; 255
    132e:	68 81       	ld	r22, Y
    1330:	79 81       	ldd	r23, Y+1	; 0x01
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	c8 57       	subi	r28, 0x78	; 120
    1338:	d0 40       	sbci	r29, 0x00	; 0
    133a:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    133e:	68 8b       	std	Y+16, r22	; 0x10
    1340:	79 8b       	std	Y+17, r23	; 0x11
    1342:	8a 8b       	std	Y+18, r24	; 0x12
    1344:	9b 8b       	std	Y+19, r25	; 0x13
                    ground_speed	= _new_speed;
    1346:	c0 58       	subi	r28, 0x80	; 128
    1348:	df 4f       	sbci	r29, 0xFF	; 255
    134a:	88 81       	ld	r24, Y
    134c:	99 81       	ldd	r25, Y+1	; 0x01
    134e:	aa 81       	ldd	r26, Y+2	; 0x02
    1350:	bb 81       	ldd	r27, Y+3	; 0x03
    1352:	c0 58       	subi	r28, 0x80	; 128
    1354:	d0 40       	sbci	r29, 0x00	; 0
    1356:	88 8f       	std	Y+24, r24	; 0x18
    1358:	99 8f       	std	Y+25, r25	; 0x19
    135a:	aa 8f       	std	Y+26, r26	; 0x1a
    135c:	bb 8f       	std	Y+27, r27	; 0x1b
                    ground_course	= _new_course;
    135e:	cc 57       	subi	r28, 0x7C	; 124
    1360:	df 4f       	sbci	r29, 0xFF	; 255
    1362:	88 81       	ld	r24, Y
    1364:	99 81       	ldd	r25, Y+1	; 0x01
    1366:	aa 81       	ldd	r26, Y+2	; 0x02
    1368:	bb 81       	ldd	r27, Y+3	; 0x03
    136a:	c4 58       	subi	r28, 0x84	; 132
    136c:	d0 40       	sbci	r29, 0x00	; 0
    136e:	8c 8f       	std	Y+28, r24	; 0x1c
    1370:	9d 8f       	std	Y+29, r25	; 0x1d
    1372:	ae 8f       	std	Y+30, r26	; 0x1e
    1374:	bf 8f       	std	Y+31, r27	; 0x1f
    1376:	46 c0       	rjmp	.+140    	; 0x1404 <_ZN11AP_GPS_NMEA14_term_completeEv+0x1fc>
                    fix				= true;
                    break;
                case _GPS_SENTENCE_GPGGA:
                    altitude		= _new_altitude;
    1378:	c4 58       	subi	r28, 0x84	; 132
    137a:	df 4f       	sbci	r29, 0xFF	; 255
    137c:	88 81       	ld	r24, Y
    137e:	99 81       	ldd	r25, Y+1	; 0x01
    1380:	aa 81       	ldd	r26, Y+2	; 0x02
    1382:	bb 81       	ldd	r27, Y+3	; 0x03
    1384:	cc 57       	subi	r28, 0x7C	; 124
    1386:	d0 40       	sbci	r29, 0x00	; 0
    1388:	8c 8b       	std	Y+20, r24	; 0x14
    138a:	9d 8b       	std	Y+21, r25	; 0x15
    138c:	ae 8b       	std	Y+22, r26	; 0x16
    138e:	bf 8b       	std	Y+23, r27	; 0x17
                    time			= _new_time;
    1390:	c4 59       	subi	r28, 0x94	; 148
    1392:	df 4f       	sbci	r29, 0xFF	; 255
    1394:	88 81       	ld	r24, Y
    1396:	99 81       	ldd	r25, Y+1	; 0x01
    1398:	aa 81       	ldd	r26, Y+2	; 0x02
    139a:	bb 81       	ldd	r27, Y+3	; 0x03
    139c:	cc 56       	subi	r28, 0x6C	; 108
    139e:	d0 40       	sbci	r29, 0x00	; 0
    13a0:	8c 83       	std	Y+4, r24	; 0x04
    13a2:	9d 83       	std	Y+5, r25	; 0x05
    13a4:	ae 83       	std	Y+6, r26	; 0x06
    13a6:	bf 83       	std	Y+7, r27	; 0x07
                    latitude		= _new_latitude * 10;	// degrees*10e5 -> 10e7
    13a8:	cc 58       	subi	r28, 0x8C	; 140
    13aa:	df 4f       	sbci	r29, 0xFF	; 255
    13ac:	68 81       	ld	r22, Y
    13ae:	79 81       	ldd	r23, Y+1	; 0x01
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	c4 57       	subi	r28, 0x74	; 116
    13b6:	d0 40       	sbci	r29, 0x00	; 0
    13b8:	2a e0       	ldi	r18, 0x0A	; 10
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    13c4:	6c 87       	std	Y+12, r22	; 0x0c
    13c6:	7d 87       	std	Y+13, r23	; 0x0d
    13c8:	8e 87       	std	Y+14, r24	; 0x0e
    13ca:	9f 87       	std	Y+15, r25	; 0x0f
                    longitude		= _new_longitude * 10;	// degrees*10e5 -> 10e7
    13cc:	c8 58       	subi	r28, 0x88	; 136
    13ce:	df 4f       	sbci	r29, 0xFF	; 255
    13d0:	68 81       	ld	r22, Y
    13d2:	79 81       	ldd	r23, Y+1	; 0x01
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	c8 57       	subi	r28, 0x78	; 120
    13da:	d0 40       	sbci	r29, 0x00	; 0
    13dc:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    13e0:	68 8b       	std	Y+16, r22	; 0x10
    13e2:	79 8b       	std	Y+17, r23	; 0x11
    13e4:	8a 8b       	std	Y+18, r24	; 0x12
    13e6:	9b 8b       	std	Y+19, r25	; 0x13
                    num_sats		= _new_satellite_count;
    13e8:	c6 57       	subi	r28, 0x76	; 118
    13ea:	df 4f       	sbci	r29, 0xFF	; 255
    13ec:	88 81       	ld	r24, Y
    13ee:	ca 58       	subi	r28, 0x8A	; 138
    13f0:	d0 40       	sbci	r29, 0x00	; 0
    13f2:	8e a3       	std	Y+38, r24	; 0x26
                    hdop			= _new_hdop;
    13f4:	c8 57       	subi	r28, 0x78	; 120
    13f6:	df 4f       	sbci	r29, 0xFF	; 255
    13f8:	88 81       	ld	r24, Y
    13fa:	99 81       	ldd	r25, Y+1	; 0x01
    13fc:	c8 58       	subi	r28, 0x88	; 136
    13fe:	d0 40       	sbci	r29, 0x00	; 0
    1400:	9d a3       	std	Y+37, r25	; 0x25
    1402:	8c a3       	std	Y+36, r24	; 0x24
                    fix				= true;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	88 a7       	std	Y+40, r24	; 0x28
    1408:	4e c1       	rjmp	.+668    	; 0x16a6 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49e>
                    break;
                case _GPS_SENTENCE_GPVTG:
                    ground_speed	= _new_speed;
    140a:	c0 58       	subi	r28, 0x80	; 128
    140c:	df 4f       	sbci	r29, 0xFF	; 255
    140e:	88 81       	ld	r24, Y
    1410:	99 81       	ldd	r25, Y+1	; 0x01
    1412:	aa 81       	ldd	r26, Y+2	; 0x02
    1414:	bb 81       	ldd	r27, Y+3	; 0x03
    1416:	c0 58       	subi	r28, 0x80	; 128
    1418:	d0 40       	sbci	r29, 0x00	; 0
    141a:	88 8f       	std	Y+24, r24	; 0x18
    141c:	99 8f       	std	Y+25, r25	; 0x19
    141e:	aa 8f       	std	Y+26, r26	; 0x1a
    1420:	bb 8f       	std	Y+27, r27	; 0x1b
                    ground_course	= _new_course;
    1422:	cc 57       	subi	r28, 0x7C	; 124
    1424:	df 4f       	sbci	r29, 0xFF	; 255
    1426:	88 81       	ld	r24, Y
    1428:	99 81       	ldd	r25, Y+1	; 0x01
    142a:	aa 81       	ldd	r26, Y+2	; 0x02
    142c:	bb 81       	ldd	r27, Y+3	; 0x03
    142e:	c4 58       	subi	r28, 0x84	; 132
    1430:	d0 40       	sbci	r29, 0x00	; 0
    1432:	8c 8f       	std	Y+28, r24	; 0x1c
    1434:	9d 8f       	std	Y+29, r25	; 0x1d
    1436:	ae 8f       	std	Y+30, r26	; 0x1e
    1438:	bf 8f       	std	Y+31, r27	; 0x1f
    143a:	32 c1       	rjmp	.+612    	; 0x16a0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x498>
                    // VTG has no fix indicator, can't change fix status
                    break;
                }
            } else {
                switch (_sentence_type) {
    143c:	80 81       	ld	r24, Z
    143e:	80 32       	cpi	r24, 0x20	; 32
    1440:	19 f0       	breq	.+6      	; 0x1448 <_ZN11AP_GPS_NMEA14_term_completeEv+0x240>
    1442:	80 34       	cpi	r24, 0x40	; 64
    1444:	09 f0       	breq	.+2      	; 0x1448 <_ZN11AP_GPS_NMEA14_term_completeEv+0x240>
    1446:	2c c1       	rjmp	.+600    	; 0x16a0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x498>
                case _GPS_SENTENCE_GPRMC:
                case _GPS_SENTENCE_GPGGA:
                    // Only these sentences give us information about
                    // fix status.
                    fix = false;
    1448:	18 a6       	std	Y+40, r1	; 0x28
    144a:	2a c1       	rjmp	.+596    	; 0x16a0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x498>
        // we got a bad message, ignore it
        return false;
    }

    // the first term determines the sentence type
    if (_term_number == 0) {
    144c:	c7 59       	subi	r28, 0x97	; 151
    144e:	df 4f       	sbci	r29, 0xFF	; 255
    1450:	38 81       	ld	r19, Y
    1452:	c9 56       	subi	r28, 0x69	; 105
    1454:	d0 40       	sbci	r29, 0x00	; 0
    1456:	33 23       	and	r19, r19
    1458:	61 f5       	brne	.+88     	; 0x14b2 <_ZN11AP_GPS_NMEA14_term_completeEv+0x2aa>
        if (!strcmp_P(_term, _gprmc_string)) {
    145a:	8e 01       	movw	r16, r28
    145c:	07 5a       	subi	r16, 0xA7	; 167
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	c8 01       	movw	r24, r16
    1462:	6c e6       	ldi	r22, 0x6C	; 108
    1464:	72 e0       	ldi	r23, 0x02	; 2
    1466:	0e 94 4d 04 	call	0x89a	; 0x89a <strcmp_P>
    146a:	89 2b       	or	r24, r25
    146c:	21 f4       	brne	.+8      	; 0x1476 <_ZN11AP_GPS_NMEA14_term_completeEv+0x26e>
            _sentence_type = _GPS_SENTENCE_GPRMC;
    146e:	c8 59       	subi	r28, 0x98	; 152
    1470:	df 4f       	sbci	r29, 0xFF	; 255
    1472:	80 e2       	ldi	r24, 0x20	; 32
    1474:	0a c0       	rjmp	.+20     	; 0x148a <_ZN11AP_GPS_NMEA14_term_completeEv+0x282>
        } else if (!strcmp_P(_term, _gpgga_string)) {
    1476:	c8 01       	movw	r24, r16
    1478:	62 e7       	ldi	r22, 0x72	; 114
    147a:	72 e0       	ldi	r23, 0x02	; 2
    147c:	0e 94 4d 04 	call	0x89a	; 0x89a <strcmp_P>
    1480:	89 2b       	or	r24, r25
    1482:	29 f4       	brne	.+10     	; 0x148e <_ZN11AP_GPS_NMEA14_term_completeEv+0x286>
            _sentence_type = _GPS_SENTENCE_GPGGA;
    1484:	c8 59       	subi	r28, 0x98	; 152
    1486:	df 4f       	sbci	r29, 0xFF	; 255
    1488:	80 e4       	ldi	r24, 0x40	; 64
    148a:	88 83       	st	Y, r24
    148c:	0b c1       	rjmp	.+534    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
        } else if (!strcmp_P(_term, _gpvtg_string)) {
    148e:	c8 01       	movw	r24, r16
    1490:	68 e7       	ldi	r22, 0x78	; 120
    1492:	72 e0       	ldi	r23, 0x02	; 2
    1494:	0e 94 4d 04 	call	0x89a	; 0x89a <strcmp_P>
    1498:	fe 01       	movw	r30, r28
    149a:	e8 59       	subi	r30, 0x98	; 152
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	89 2b       	or	r24, r25
    14a0:	31 f4       	brne	.+12     	; 0x14ae <_ZN11AP_GPS_NMEA14_term_completeEv+0x2a6>
            _sentence_type = _GPS_SENTENCE_GPVTG;
    14a2:	80 e6       	ldi	r24, 0x60	; 96
    14a4:	80 83       	st	Z, r24
            // VTG may not contain a data qualifier, presume the solution is good
            // unless it tells us otherwise.
            _gps_data_good = true;
    14a6:	c5 59       	subi	r28, 0x95	; 149
    14a8:	df 4f       	sbci	r29, 0xFF	; 255
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	ee cf       	rjmp	.-36     	; 0x148a <_ZN11AP_GPS_NMEA14_term_completeEv+0x282>
        } else {
            _sentence_type = _GPS_SENTENCE_OTHER;
    14ae:	10 82       	st	Z, r1
    14b0:	f9 c0       	rjmp	.+498    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
        }
        return false;
    }

    // 32 = RMC, 64 = GGA, 96 = VTG
    if (_sentence_type != _GPS_SENTENCE_OTHER && _term[0]) {
    14b2:	c8 59       	subi	r28, 0x98	; 152
    14b4:	df 4f       	sbci	r29, 0xFF	; 255
    14b6:	88 81       	ld	r24, Y
    14b8:	c8 56       	subi	r28, 0x68	; 104
    14ba:	d0 40       	sbci	r29, 0x00	; 0
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <_ZN11AP_GPS_NMEA14_term_completeEv+0x2ba>
    14c0:	f1 c0       	rjmp	.+482    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    14c2:	c7 5a       	subi	r28, 0xA7	; 167
    14c4:	df 4f       	sbci	r29, 0xFF	; 255
    14c6:	28 81       	ld	r18, Y
    14c8:	c9 55       	subi	r28, 0x59	; 89
    14ca:	d0 40       	sbci	r29, 0x00	; 0
    14cc:	22 23       	and	r18, r18
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <_ZN11AP_GPS_NMEA14_term_completeEv+0x2ca>
    14d0:	e9 c0       	rjmp	.+466    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
        switch (_sentence_type + _term_number) {
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	83 0f       	add	r24, r19
    14d6:	91 1d       	adc	r25, r1
    14d8:	84 34       	cpi	r24, 0x44	; 68
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x2d8>
    14de:	9f c0       	rjmp	.+318    	; 0x161e <_ZN11AP_GPS_NMEA14_term_completeEv+0x416>
    14e0:	85 34       	cpi	r24, 0x45	; 69
    14e2:	91 05       	cpc	r25, r1
    14e4:	9c f5       	brge	.+102    	; 0x154c <_ZN11AP_GPS_NMEA14_term_completeEv+0x344>
    14e6:	88 32       	cpi	r24, 0x28	; 40
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <_ZN11AP_GPS_NMEA14_term_completeEv+0x2e6>
    14ec:	cf c0       	rjmp	.+414    	; 0x168c <_ZN11AP_GPS_NMEA14_term_completeEv+0x484>
    14ee:	89 32       	cpi	r24, 0x29	; 41
    14f0:	91 05       	cpc	r25, r1
    14f2:	dc f4       	brge	.+54     	; 0x152a <_ZN11AP_GPS_NMEA14_term_completeEv+0x322>
    14f4:	84 32       	cpi	r24, 0x24	; 36
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <_ZN11AP_GPS_NMEA14_term_completeEv+0x2f4>
    14fa:	8a c0       	rjmp	.+276    	; 0x1610 <_ZN11AP_GPS_NMEA14_term_completeEv+0x408>
    14fc:	85 32       	cpi	r24, 0x25	; 37
    14fe:	91 05       	cpc	r25, r1
    1500:	64 f4       	brge	.+24     	; 0x151a <_ZN11AP_GPS_NMEA14_term_completeEv+0x312>
    1502:	82 32       	cpi	r24, 0x22	; 34
    1504:	91 05       	cpc	r25, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <_ZN11AP_GPS_NMEA14_term_completeEv+0x302>
    1508:	44 c0       	rjmp	.+136    	; 0x1592 <_ZN11AP_GPS_NMEA14_term_completeEv+0x38a>
    150a:	83 32       	cpi	r24, 0x23	; 35
    150c:	91 05       	cpc	r25, r1
    150e:	0c f0       	brlt	.+2      	; 0x1512 <_ZN11AP_GPS_NMEA14_term_completeEv+0x30a>
    1510:	79 c0       	rjmp	.+242    	; 0x1604 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3fc>
    1512:	81 97       	sbiw	r24, 0x21	; 33
    1514:	09 f0       	breq	.+2      	; 0x1518 <_ZN11AP_GPS_NMEA14_term_completeEv+0x310>
    1516:	c6 c0       	rjmp	.+396    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    1518:	67 c0       	rjmp	.+206    	; 0x15e8 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3e0>
    151a:	86 32       	cpi	r24, 0x26	; 38
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <_ZN11AP_GPS_NMEA14_term_completeEv+0x31a>
    1520:	84 c0       	rjmp	.+264    	; 0x162a <_ZN11AP_GPS_NMEA14_term_completeEv+0x422>
    1522:	87 97       	sbiw	r24, 0x27	; 39
    1524:	0c f0       	brlt	.+2      	; 0x1528 <_ZN11AP_GPS_NMEA14_term_completeEv+0x320>
    1526:	9c c0       	rjmp	.+312    	; 0x1660 <_ZN11AP_GPS_NMEA14_term_completeEv+0x458>
    1528:	7a c0       	rjmp	.+244    	; 0x161e <_ZN11AP_GPS_NMEA14_term_completeEv+0x416>
    152a:	82 34       	cpi	r24, 0x42	; 66
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <_ZN11AP_GPS_NMEA14_term_completeEv+0x32a>
    1530:	69 c0       	rjmp	.+210    	; 0x1604 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3fc>
    1532:	83 34       	cpi	r24, 0x43	; 67
    1534:	91 05       	cpc	r25, r1
    1536:	0c f0       	brlt	.+2      	; 0x153a <_ZN11AP_GPS_NMEA14_term_completeEv+0x332>
    1538:	6b c0       	rjmp	.+214    	; 0x1610 <_ZN11AP_GPS_NMEA14_term_completeEv+0x408>
    153a:	89 32       	cpi	r24, 0x29	; 41
    153c:	91 05       	cpc	r25, r1
    153e:	09 f4       	brne	.+2      	; 0x1542 <_ZN11AP_GPS_NMEA14_term_completeEv+0x33a>
    1540:	59 c0       	rjmp	.+178    	; 0x15f4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3ec>
    1542:	81 34       	cpi	r24, 0x41	; 65
    1544:	91 05       	cpc	r25, r1
    1546:	09 f0       	breq	.+2      	; 0x154a <_ZN11AP_GPS_NMEA14_term_completeEv+0x342>
    1548:	ad c0       	rjmp	.+346    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    154a:	4e c0       	rjmp	.+156    	; 0x15e8 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3e0>
    154c:	88 34       	cpi	r24, 0x48	; 72
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <_ZN11AP_GPS_NMEA14_term_completeEv+0x34c>
    1552:	42 c0       	rjmp	.+132    	; 0x15d8 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3d0>
    1554:	89 34       	cpi	r24, 0x49	; 73
    1556:	91 05       	cpc	r25, r1
    1558:	3c f4       	brge	.+14     	; 0x1568 <_ZN11AP_GPS_NMEA14_term_completeEv+0x360>
    155a:	86 34       	cpi	r24, 0x46	; 70
    155c:	91 05       	cpc	r25, r1
    155e:	09 f1       	breq	.+66     	; 0x15a2 <_ZN11AP_GPS_NMEA14_term_completeEv+0x39a>
    1560:	87 34       	cpi	r24, 0x47	; 71
    1562:	91 05       	cpc	r25, r1
    1564:	84 f5       	brge	.+96     	; 0x15c6 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3be>
    1566:	61 c0       	rjmp	.+194    	; 0x162a <_ZN11AP_GPS_NMEA14_term_completeEv+0x422>
    1568:	81 36       	cpi	r24, 0x61	; 97
    156a:	91 05       	cpc	r25, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <_ZN11AP_GPS_NMEA14_term_completeEv+0x368>
    156e:	8e c0       	rjmp	.+284    	; 0x168c <_ZN11AP_GPS_NMEA14_term_completeEv+0x484>
    1570:	82 36       	cpi	r24, 0x62	; 98
    1572:	91 05       	cpc	r25, r1
    1574:	2c f4       	brge	.+10     	; 0x1580 <_ZN11AP_GPS_NMEA14_term_completeEv+0x378>
    1576:	89 34       	cpi	r24, 0x49	; 73
    1578:	91 05       	cpc	r25, r1
    157a:	09 f0       	breq	.+2      	; 0x157e <_ZN11AP_GPS_NMEA14_term_completeEv+0x376>
    157c:	93 c0       	rjmp	.+294    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    157e:	6a c0       	rjmp	.+212    	; 0x1654 <_ZN11AP_GPS_NMEA14_term_completeEv+0x44c>
    1580:	85 36       	cpi	r24, 0x65	; 101
    1582:	91 05       	cpc	r25, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <_ZN11AP_GPS_NMEA14_term_completeEv+0x380>
    1586:	6c c0       	rjmp	.+216    	; 0x1660 <_ZN11AP_GPS_NMEA14_term_completeEv+0x458>
    1588:	89 36       	cpi	r24, 0x69	; 105
    158a:	91 05       	cpc	r25, r1
    158c:	09 f0       	breq	.+2      	; 0x1590 <_ZN11AP_GPS_NMEA14_term_completeEv+0x388>
    158e:	8a c0       	rjmp	.+276    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    1590:	10 c0       	rjmp	.+32     	; 0x15b2 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3aa>
            // operational status
            //
        case _GPS_SENTENCE_GPRMC + 2: // validity (RMC)
            _gps_data_good = _term[0] == 'A';
    1592:	fe 01       	movw	r30, r28
    1594:	e5 59       	subi	r30, 0x95	; 149
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	10 82       	st	Z, r1
    159a:	21 34       	cpi	r18, 0x41	; 65
    159c:	09 f0       	breq	.+2      	; 0x15a0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x398>
    159e:	82 c0       	rjmp	.+260    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3b8>
            break;
        case _GPS_SENTENCE_GPGGA + 6: // Fix data (GGA)
            _gps_data_good = _term[0] > '0';
    15a2:	fe 01       	movw	r30, r28
    15a4:	e5 59       	subi	r30, 0x95	; 149
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	10 82       	st	Z, r1
    15aa:	21 33       	cpi	r18, 0x31	; 49
    15ac:	0c f4       	brge	.+2      	; 0x15b0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3a8>
    15ae:	7a c0       	rjmp	.+244    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3b8>
            break;
        case _GPS_SENTENCE_GPVTG + 9: // validity (VTG) (we may not see this field)
            _gps_data_good = _term[0] != 'N';
    15b2:	fe 01       	movw	r30, r28
    15b4:	e5 59       	subi	r30, 0x95	; 149
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	10 82       	st	Z, r1
    15ba:	2e 34       	cpi	r18, 0x4E	; 78
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <_ZN11AP_GPS_NMEA14_term_completeEv+0x3b8>
    15be:	72 c0       	rjmp	.+228    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 83       	st	Z, r24
    15c4:	6f c0       	rjmp	.+222    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
            break;
        case _GPS_SENTENCE_GPGGA + 7: // satellite count (GGA)
            _new_satellite_count = atol(_term);
    15c6:	ce 01       	movw	r24, r28
    15c8:	87 5a       	subi	r24, 0xA7	; 167
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	0e 94 26 04 	call	0x84c	; 0x84c <atol>
    15d0:	c6 57       	subi	r28, 0x76	; 118
    15d2:	df 4f       	sbci	r29, 0xFF	; 255
    15d4:	68 83       	st	Y, r22
    15d6:	66 c0       	rjmp	.+204    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
            break;
        case _GPS_SENTENCE_GPGGA + 8: // HDOP (GGA)
            _new_hdop = _parse_decimal();
    15d8:	ce 01       	movw	r24, r28
    15da:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN11AP_GPS_NMEA14_parse_decimalEv>
    15de:	c8 57       	subi	r28, 0x78	; 120
    15e0:	df 4f       	sbci	r29, 0xFF	; 255
    15e2:	79 83       	std	Y+1, r23	; 0x01
    15e4:	68 83       	st	Y, r22
    15e6:	5e c0       	rjmp	.+188    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>

            // time and date
            //
        case _GPS_SENTENCE_GPRMC + 1: // Time (RMC)
        case _GPS_SENTENCE_GPGGA + 1: // Time (GGA)
            _new_time = _parse_decimal();
    15e8:	ce 01       	movw	r24, r28
    15ea:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN11AP_GPS_NMEA14_parse_decimalEv>
    15ee:	c4 59       	subi	r28, 0x94	; 148
    15f0:	df 4f       	sbci	r29, 0xFF	; 255
    15f2:	51 c0       	rjmp	.+162    	; 0x1696 <_ZN11AP_GPS_NMEA14_term_completeEv+0x48e>
            break;
        case _GPS_SENTENCE_GPRMC + 9: // Date (GPRMC)
            _new_date = atol(_term);
    15f4:	ce 01       	movw	r24, r28
    15f6:	87 5a       	subi	r24, 0xA7	; 167
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	0e 94 26 04 	call	0x84c	; 0x84c <atol>
    15fe:	c0 59       	subi	r28, 0x90	; 144
    1600:	df 4f       	sbci	r29, 0xFF	; 255
    1602:	49 c0       	rjmp	.+146    	; 0x1696 <_ZN11AP_GPS_NMEA14_term_completeEv+0x48e>

            // location
            //
        case _GPS_SENTENCE_GPRMC + 3: // Latitude
        case _GPS_SENTENCE_GPGGA + 2:
            _new_latitude = _parse_degrees();
    1604:	ce 01       	movw	r24, r28
    1606:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN11AP_GPS_NMEA14_parse_degreesEv>
    160a:	cc 58       	subi	r28, 0x8C	; 140
    160c:	df 4f       	sbci	r29, 0xFF	; 255
    160e:	43 c0       	rjmp	.+134    	; 0x1696 <_ZN11AP_GPS_NMEA14_term_completeEv+0x48e>
            break;
        case _GPS_SENTENCE_GPRMC + 4: // N/S
        case _GPS_SENTENCE_GPGGA + 3:
            if (_term[0] == 'S')
    1610:	23 35       	cpi	r18, 0x53	; 83
    1612:	09 f0       	breq	.+2      	; 0x1616 <_ZN11AP_GPS_NMEA14_term_completeEv+0x40e>
    1614:	47 c0       	rjmp	.+142    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
                _new_latitude = -_new_latitude;
    1616:	fe 01       	movw	r30, r28
    1618:	ec 58       	subi	r30, 0x8C	; 140
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	0b c0       	rjmp	.+22     	; 0x1634 <_ZN11AP_GPS_NMEA14_term_completeEv+0x42c>
            break;
        case _GPS_SENTENCE_GPRMC + 5: // Longitude
        case _GPS_SENTENCE_GPGGA + 4:
            _new_longitude = _parse_degrees();
    161e:	ce 01       	movw	r24, r28
    1620:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN11AP_GPS_NMEA14_parse_degreesEv>
    1624:	c8 58       	subi	r28, 0x88	; 136
    1626:	df 4f       	sbci	r29, 0xFF	; 255
    1628:	36 c0       	rjmp	.+108    	; 0x1696 <_ZN11AP_GPS_NMEA14_term_completeEv+0x48e>
            break;
        case _GPS_SENTENCE_GPRMC + 6: // E/W
        case _GPS_SENTENCE_GPGGA + 5:
            if (_term[0] == 'W')
    162a:	27 35       	cpi	r18, 0x57	; 87
    162c:	d9 f5       	brne	.+118    	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
                _new_longitude = -_new_longitude;
    162e:	fe 01       	movw	r30, r28
    1630:	e8 58       	subi	r30, 0x88	; 136
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	a2 81       	ldd	r26, Z+2	; 0x02
    163a:	b3 81       	ldd	r27, Z+3	; 0x03
    163c:	b0 95       	com	r27
    163e:	a0 95       	com	r26
    1640:	90 95       	com	r25
    1642:	81 95       	neg	r24
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	af 4f       	sbci	r26, 0xFF	; 255
    1648:	bf 4f       	sbci	r27, 0xFF	; 255
    164a:	80 83       	st	Z, r24
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	a2 83       	std	Z+2, r26	; 0x02
    1650:	b3 83       	std	Z+3, r27	; 0x03
    1652:	28 c0       	rjmp	.+80     	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
            break;
        case _GPS_SENTENCE_GPGGA + 9: // Altitude (GPGGA)
            _new_altitude = _parse_decimal();
    1654:	ce 01       	movw	r24, r28
    1656:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN11AP_GPS_NMEA14_parse_decimalEv>
    165a:	c4 58       	subi	r28, 0x84	; 132
    165c:	df 4f       	sbci	r29, 0xFF	; 255
    165e:	1b c0       	rjmp	.+54     	; 0x1696 <_ZN11AP_GPS_NMEA14_term_completeEv+0x48e>

            // course and speed
            //
        case _GPS_SENTENCE_GPRMC + 7: // Speed (GPRMC)
        case _GPS_SENTENCE_GPVTG + 5: // Speed (VTG)
            _new_speed = (_parse_decimal() * 514) / 1000; 	// knots-> m/sec, approximiates * 0.514
    1660:	ce 01       	movw	r24, r28
    1662:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN11AP_GPS_NMEA14_parse_decimalEv>
    1666:	c0 58       	subi	r28, 0x80	; 128
    1668:	df 4f       	sbci	r29, 0xFF	; 255
    166a:	22 e0       	ldi	r18, 0x02	; 2
    166c:	32 e0       	ldi	r19, 0x02	; 2
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    1676:	28 ee       	ldi	r18, 0xE8	; 232
    1678:	33 e0       	ldi	r19, 0x03	; 3
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__udivmodsi4>
    1682:	28 83       	st	Y, r18
    1684:	39 83       	std	Y+1, r19	; 0x01
    1686:	4a 83       	std	Y+2, r20	; 0x02
    1688:	5b 83       	std	Y+3, r21	; 0x03
    168a:	0c c0       	rjmp	.+24     	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
            break;
        case _GPS_SENTENCE_GPRMC + 8: // Course (GPRMC)
        case _GPS_SENTENCE_GPVTG + 1: // Course (VTG)
            _new_course = _parse_decimal();
    168c:	ce 01       	movw	r24, r28
    168e:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN11AP_GPS_NMEA14_parse_decimalEv>
    1692:	cc 57       	subi	r28, 0x7C	; 124
    1694:	df 4f       	sbci	r29, 0xFF	; 255
    1696:	68 83       	st	Y, r22
    1698:	79 83       	std	Y+1, r23	; 0x01
    169a:	8a 83       	std	Y+2, r24	; 0x02
    169c:	9b 83       	std	Y+3, r25	; 0x03
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49c>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <_ZN11AP_GPS_NMEA14_term_completeEv+0x49e>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }

    return false;
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <_ZN11AP_GPS_NMEA7_decodeEc>:
        }
    }
    return parsed;
}

bool AP_GPS_NMEA::_decode(char c)
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	ec 01       	movw	r28, r24
    16b8:	16 2f       	mov	r17, r22
{
    bool valid_sentence = false;

    switch (c) {
    16ba:	64 32       	cpi	r22, 0x24	; 36
    16bc:	a1 f1       	breq	.+104    	; 0x1726 <_ZN11AP_GPS_NMEA7_decodeEc+0x76>
    16be:	dc 01       	movw	r26, r24
    16c0:	a6 59       	subi	r26, 0x96	; 150
    16c2:	bf 4f       	sbci	r27, 0xFF	; 255
    16c4:	65 32       	cpi	r22, 0x25	; 37
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <_ZN11AP_GPS_NMEA7_decodeEc+0x22>
    16c8:	6a 30       	cpi	r22, 0x0A	; 10
    16ca:	69 f0       	breq	.+26     	; 0x16e6 <_ZN11AP_GPS_NMEA7_decodeEc+0x36>
    16cc:	6d 30       	cpi	r22, 0x0D	; 13
    16ce:	c1 f5       	brne	.+112    	; 0x1740 <_ZN11AP_GPS_NMEA7_decodeEc+0x90>
    16d0:	0a c0       	rjmp	.+20     	; 0x16e6 <_ZN11AP_GPS_NMEA7_decodeEc+0x36>
    16d2:	6a 32       	cpi	r22, 0x2A	; 42
    16d4:	41 f0       	breq	.+16     	; 0x16e6 <_ZN11AP_GPS_NMEA7_decodeEc+0x36>
    16d6:	6c 32       	cpi	r22, 0x2C	; 44
    16d8:	99 f5       	brne	.+102    	; 0x1740 <_ZN11AP_GPS_NMEA7_decodeEc+0x90>
    case ',': // term terminators
        _parity ^= c;
    16da:	fc 01       	movw	r30, r24
    16dc:	e9 5a       	subi	r30, 0xA9	; 169
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	86 27       	eor	r24, r22
    16e4:	80 83       	st	Z, r24
    case '\r':
    case '\n':
    case '*':
        if (_term_offset < sizeof(_term)) {
    16e6:	8c 91       	ld	r24, X
    16e8:	8f 30       	cpi	r24, 0x0F	; 15
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <_ZN11AP_GPS_NMEA7_decodeEc+0x40>
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0a c0       	rjmp	.+20     	; 0x1704 <_ZN11AP_GPS_NMEA7_decodeEc+0x54>
            _term[_term_offset] = 0;
    16f0:	fe 01       	movw	r30, r28
    16f2:	e8 0f       	add	r30, r24
    16f4:	f1 1d       	adc	r31, r1
    16f6:	e7 5a       	subi	r30, 0xA7	; 167
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	10 82       	st	Z, r1
            valid_sentence = _term_complete();
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN11AP_GPS_NMEA14_term_completeEv>
    1702:	98 2f       	mov	r25, r24
        }
        ++_term_number;
    1704:	fe 01       	movw	r30, r28
    1706:	e7 59       	subi	r30, 0x97	; 151
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	80 83       	st	Z, r24
        _term_offset = 0;
    1710:	c6 59       	subi	r28, 0x96	; 150
    1712:	df 4f       	sbci	r29, 0xFF	; 255
    1714:	18 82       	st	Y, r1
        _is_checksum_term = c == '*';
    1716:	fe 01       	movw	r30, r28
    1718:	72 97       	sbiw	r30, 0x12	; 18
    171a:	10 82       	st	Z, r1
    171c:	1a 32       	cpi	r17, 0x2A	; 42
    171e:	49 f5       	brne	.+82     	; 0x1772 <_ZN11AP_GPS_NMEA7_decodeEc+0xc2>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	80 83       	st	Z, r24
    1724:	26 c0       	rjmp	.+76     	; 0x1772 <_ZN11AP_GPS_NMEA7_decodeEc+0xc2>
        return valid_sentence;

    case '$': // sentence begin
        _term_number = _term_offset = 0;
    1726:	c6 59       	subi	r28, 0x96	; 150
    1728:	df 4f       	sbci	r29, 0xFF	; 255
    172a:	18 82       	st	Y, r1
    172c:	1a 92       	st	-Y, r1
        _parity = 0;
    172e:	62 97       	sbiw	r28, 0x12	; 18
    1730:	18 82       	st	Y, r1
        _sentence_type = _GPS_SENTENCE_OTHER;
    1732:	61 96       	adiw	r28, 0x11	; 17
    1734:	18 82       	st	Y, r1
        _is_checksum_term = false;
    1736:	60 97       	sbiw	r28, 0x10	; 16
    1738:	18 82       	st	Y, r1
        _gps_data_good = false;
    173a:	63 96       	adiw	r28, 0x13	; 19
    173c:	18 82       	st	Y, r1
    173e:	18 c0       	rjmp	.+48     	; 0x1770 <_ZN11AP_GPS_NMEA7_decodeEc+0xc0>
        return valid_sentence;
    }

    // ordinary characters
    if (_term_offset < sizeof(_term) - 1)
    1740:	8c 91       	ld	r24, X
    1742:	8e 30       	cpi	r24, 0x0E	; 14
    1744:	40 f4       	brcc	.+16     	; 0x1756 <_ZN11AP_GPS_NMEA7_decodeEc+0xa6>
        _term[_term_offset++] = c;
    1746:	fe 01       	movw	r30, r28
    1748:	e8 0f       	add	r30, r24
    174a:	f1 1d       	adc	r31, r1
    174c:	e7 5a       	subi	r30, 0xA7	; 167
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	10 83       	st	Z, r17
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	8c 93       	st	X, r24
    if (!_is_checksum_term)
    1756:	c8 5a       	subi	r28, 0xA8	; 168
    1758:	df 4f       	sbci	r29, 0xFF	; 255
    175a:	88 81       	ld	r24, Y
    175c:	c8 55       	subi	r28, 0x58	; 88
    175e:	d0 40       	sbci	r29, 0x00	; 0
    1760:	88 23       	and	r24, r24
    1762:	31 f4       	brne	.+12     	; 0x1770 <_ZN11AP_GPS_NMEA7_decodeEc+0xc0>
        _parity ^= c;
    1764:	fe 01       	movw	r30, r28
    1766:	e9 5a       	subi	r30, 0xA9	; 169
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 81       	ld	r24, Z
    176c:	81 27       	eor	r24, r17
    176e:	80 83       	st	Z, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0

    return valid_sentence;
}
    1772:	89 2f       	mov	r24, r25
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	08 95       	ret

0000177c <_ZN11AP_GPS_NMEA4readEv>:
    bs->print_P((const prog_char_t *)_ublox_init_string);

    idleTimeout = 1200;
}

bool AP_GPS_NMEA::read(void)
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	8c 01       	movw	r16, r24
{
    int numc;
    bool parsed = false;

    numc = _port->available();
    1788:	dc 01       	movw	r26, r24
    178a:	d3 96       	adiw	r26, 0x33	; 51
    178c:	ed 91       	ld	r30, X+
    178e:	fc 91       	ld	r31, X
    1790:	d4 97       	sbiw	r26, 0x34	; 52
    1792:	a0 81       	ld	r26, Z
    1794:	b1 81       	ldd	r27, Z+1	; 0x01
    1796:	14 96       	adiw	r26, 0x04	; 4
    1798:	2d 91       	ld	r18, X+
    179a:	3c 91       	ld	r19, X
    179c:	15 97       	sbiw	r26, 0x05	; 5
    179e:	cf 01       	movw	r24, r30
    17a0:	f9 01       	movw	r30, r18
    17a2:	09 95       	icall
    17a4:	ec 01       	movw	r28, r24
    17a6:	ff 24       	eor	r15, r15
    17a8:	13 c0       	rjmp	.+38     	; 0x17d0 <_ZN11AP_GPS_NMEA4readEv+0x54>
    while (numc--) {
        if (_decode(_port->read())) {
    17aa:	f8 01       	movw	r30, r16
    17ac:	a3 a9       	ldd	r26, Z+51	; 0x33
    17ae:	b4 a9       	ldd	r27, Z+52	; 0x34
    17b0:	ed 91       	ld	r30, X+
    17b2:	fc 91       	ld	r31, X
    17b4:	11 97       	sbiw	r26, 0x01	; 1
    17b6:	06 80       	ldd	r0, Z+6	; 0x06
    17b8:	f7 81       	ldd	r31, Z+7	; 0x07
    17ba:	e0 2d       	mov	r30, r0
    17bc:	cd 01       	movw	r24, r26
    17be:	09 95       	icall
    17c0:	68 2f       	mov	r22, r24
    17c2:	c8 01       	movw	r24, r16
    17c4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN11AP_GPS_NMEA7_decodeEc>
    17c8:	88 23       	and	r24, r24
    17ca:	11 f0       	breq	.+4      	; 0x17d0 <_ZN11AP_GPS_NMEA4readEv+0x54>
    17cc:	ff 24       	eor	r15, r15
    17ce:	f3 94       	inc	r15
{
    int numc;
    bool parsed = false;

    numc = _port->available();
    while (numc--) {
    17d0:	21 97       	sbiw	r28, 0x01	; 1
    17d2:	ff ef       	ldi	r31, 0xFF	; 255
    17d4:	cf 3f       	cpi	r28, 0xFF	; 255
    17d6:	df 07       	cpc	r29, r31
    17d8:	41 f7       	brne	.-48     	; 0x17aa <_ZN11AP_GPS_NMEA4readEv+0x2e>
        if (_decode(_port->read())) {
            parsed = true;
        }
    }
    return parsed;
}
    17da:	8f 2d       	mov	r24, r15
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	08 95       	ret

000017e8 <_ZN11AP_GPS_NMEA4initEN3GPS18GPS_Engine_SettingE>:
    GPS(s)
{
}

// Public Methods //////////////////////////////////////////////////////////////
void AP_GPS_NMEA::init(enum GPS_Engine_Setting nav_setting)
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	7c 01       	movw	r14, r24
{
    BetterStream	*bs = (BetterStream *)_port;
    17f2:	fc 01       	movw	r30, r24
    17f4:	03 a9       	ldd	r16, Z+51	; 0x33
    17f6:	14 a9       	ldd	r17, Z+52	; 0x34

    // send the SiRF init strings
    bs->print_P((const prog_char_t *)_SiRF_init_string);
    17f8:	c8 01       	movw	r24, r16
    17fa:	6f ee       	ldi	r22, 0xEF	; 239
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN12BetterStream7print_PEPK11prog_char_t>

    // send the MediaTek init strings
    bs->print_P((const prog_char_t *)_MTK_init_string);
    1802:	c8 01       	movw	r24, r16
    1804:	67 eb       	ldi	r22, 0xB7	; 183
    1806:	71 e0       	ldi	r23, 0x01	; 1
    1808:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN12BetterStream7print_PEPK11prog_char_t>

    // send the ublox init strings
    bs->print_P((const prog_char_t *)_ublox_init_string);
    180c:	c8 01       	movw	r24, r16
    180e:	64 e1       	ldi	r22, 0x14	; 20
    1810:	72 e0       	ldi	r23, 0x02	; 2
    1812:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN12BetterStream7print_PEPK11prog_char_t>

    idleTimeout = 1200;
    1816:	80 eb       	ldi	r24, 0xB0	; 176
    1818:	94 e0       	ldi	r25, 0x04	; 4
    181a:	a0 e0       	ldi	r26, 0x00	; 0
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	f7 01       	movw	r30, r14
    1820:	83 a7       	std	Z+43, r24	; 0x2b
    1822:	94 a7       	std	Z+44, r25	; 0x2c
    1824:	a5 a7       	std	Z+45, r26	; 0x2d
    1826:	b6 a7       	std	Z+46, r27	; 0x2e
}
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	08 95       	ret

00001832 <_ZN3GPS6setHILEmffffffh>:
    }
}

void
GPS::setHIL(uint32_t _time, float _latitude, float _longitude, float _altitude,
            float _ground_speed, float _ground_course, float _speed_3d, uint8_t _num_sats)
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
{
}
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <_ZN3GPS6updateEv>:
#else
	#include "WProgram.h"
#endif

void
GPS::update(void)
    1840:	2f 92       	push	r2
    1842:	3f 92       	push	r3
    1844:	4f 92       	push	r4
    1846:	5f 92       	push	r5
    1848:	6f 92       	push	r6
    184a:	7f 92       	push	r7
    184c:	8f 92       	push	r8
    184e:	9f 92       	push	r9
    1850:	af 92       	push	r10
    1852:	bf 92       	push	r11
    1854:	cf 92       	push	r12
    1856:	df 92       	push	r13
    1858:	ef 92       	push	r14
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	64 97       	sbiw	r28, 0x14	; 20
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	1c 01       	movw	r2, r24
{
    bool	result;
	uint32_t tnow;

    // call the GPS driver to process incoming data
    result = read();
    1876:	dc 01       	movw	r26, r24
    1878:	ed 91       	ld	r30, X+
    187a:	fc 91       	ld	r31, X
    187c:	04 80       	ldd	r0, Z+4	; 0x04
    187e:	f5 81       	ldd	r31, Z+5	; 0x05
    1880:	e0 2d       	mov	r30, r0
    1882:	09 95       	icall
    1884:	18 2f       	mov	r17, r24

	tnow = millis();
    1886:	0e 94 0b 22 	call	0x4416	; 0x4416 <millis>
    188a:	2b 01       	movw	r4, r22
    188c:	3c 01       	movw	r6, r24

    // if we did not get a message, and the idle timer has expired, re-init
    if (!result) {
    188e:	11 23       	and	r17, r17
    1890:	51 f5       	brne	.+84     	; 0x18e6 <_ZN3GPS6updateEv+0xa6>
        if ((tnow - _idleTimer) > idleTimeout) {
    1892:	f1 01       	movw	r30, r2
    1894:	81 ad       	ldd	r24, Z+57	; 0x39
    1896:	92 ad       	ldd	r25, Z+58	; 0x3a
    1898:	a3 ad       	ldd	r26, Z+59	; 0x3b
    189a:	b4 ad       	ldd	r27, Z+60	; 0x3c
    189c:	a3 01       	movw	r20, r6
    189e:	92 01       	movw	r18, r4
    18a0:	28 1b       	sub	r18, r24
    18a2:	39 0b       	sbc	r19, r25
    18a4:	4a 0b       	sbc	r20, r26
    18a6:	5b 0b       	sbc	r21, r27
    18a8:	83 a5       	ldd	r24, Z+43	; 0x2b
    18aa:	94 a5       	ldd	r25, Z+44	; 0x2c
    18ac:	a5 a5       	ldd	r26, Z+45	; 0x2d
    18ae:	b6 a5       	ldd	r27, Z+46	; 0x2e
    18b0:	82 17       	cp	r24, r18
    18b2:	93 07       	cpc	r25, r19
    18b4:	a4 07       	cpc	r26, r20
    18b6:	b5 07       	cpc	r27, r21
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <_ZN3GPS6updateEv+0x7c>
    18ba:	55 c1       	rjmp	.+682    	; 0x1b66 <_ZN3GPS6updateEv+0x326>
			Debug("gps read timeout %lu %lu", (unsigned long)tnow, (unsigned long)_idleTimer);
            _status = NO_GPS;
    18bc:	16 ae       	std	Z+62, r1	; 0x3e
    18be:	15 ae       	std	Z+61, r1	; 0x3d

            init(_nav_setting);
    18c0:	01 90       	ld	r0, Z+
    18c2:	f0 81       	ld	r31, Z
    18c4:	e0 2d       	mov	r30, r0
    18c6:	d1 01       	movw	r26, r2
    18c8:	d7 96       	adiw	r26, 0x37	; 55
    18ca:	6d 91       	ld	r22, X+
    18cc:	7c 91       	ld	r23, X
    18ce:	d8 97       	sbiw	r26, 0x38	; 56
    18d0:	01 90       	ld	r0, Z+
    18d2:	f0 81       	ld	r31, Z
    18d4:	e0 2d       	mov	r30, r0
    18d6:	c1 01       	movw	r24, r2
    18d8:	09 95       	icall
            // reset the idle timer
            _idleTimer = tnow;
    18da:	f1 01       	movw	r30, r2
    18dc:	41 ae       	std	Z+57, r4	; 0x39
    18de:	52 ae       	std	Z+58, r5	; 0x3a
    18e0:	63 ae       	std	Z+59, r6	; 0x3b
    18e2:	74 ae       	std	Z+60, r7	; 0x3c
    18e4:	40 c1       	rjmp	.+640    	; 0x1b66 <_ZN3GPS6updateEv+0x326>
        }
    } else {
        // we got a message, update our status correspondingly
        _status = fix ? GPS_OK : NO_FIX;
    18e6:	d1 01       	movw	r26, r2
    18e8:	98 96       	adiw	r26, 0x28	; 40
    18ea:	8c 91       	ld	r24, X
    18ec:	88 23       	and	r24, r24
    18ee:	19 f4       	brne	.+6      	; 0x18f6 <_ZN3GPS6updateEv+0xb6>
    18f0:	21 e0       	ldi	r18, 0x01	; 1
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <_ZN3GPS6updateEv+0xba>
    18f6:	22 e0       	ldi	r18, 0x02	; 2
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	f1 01       	movw	r30, r2
    18fc:	36 af       	std	Z+62, r19	; 0x3e
    18fe:	25 af       	std	Z+61, r18	; 0x3d

        valid_read = true;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	81 a7       	std	Z+41, r24	; 0x29
        new_data = true;
    1904:	87 a3       	std	Z+39, r24	; 0x27

        // reset the idle timer
        _idleTimer = tnow;
    1906:	d1 01       	movw	r26, r2
    1908:	d9 96       	adiw	r26, 0x39	; 57
    190a:	4d 92       	st	X+, r4
    190c:	5d 92       	st	X+, r5
    190e:	6d 92       	st	X+, r6
    1910:	7c 92       	st	X, r7
    1912:	dc 97       	sbiw	r26, 0x3c	; 60

		if (_status == GPS_OK) {
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	09 f0       	breq	.+2      	; 0x191c <_ZN3GPS6updateEv+0xdc>
    191a:	25 c1       	rjmp	.+586    	; 0x1b66 <_ZN3GPS6updateEv+0x326>
			// update our acceleration
			float deltat = 1.0e-3 * (_idleTimer - last_fix_time);
    191c:	9f 96       	adiw	r26, 0x2f	; 47
    191e:	8d 91       	ld	r24, X+
    1920:	9d 91       	ld	r25, X+
    1922:	0d 90       	ld	r0, X+
    1924:	bc 91       	ld	r27, X
    1926:	a0 2d       	mov	r26, r0
    1928:	a3 01       	movw	r20, r6
    192a:	92 01       	movw	r18, r4
    192c:	28 1b       	sub	r18, r24
    192e:	39 0b       	sbc	r19, r25
    1930:	4a 0b       	sbc	r20, r26
    1932:	5b 0b       	sbc	r21, r27
    1934:	ca 01       	movw	r24, r20
    1936:	b9 01       	movw	r22, r18
    1938:	0e 94 11 25 	call	0x4a22	; 0x4a22 <__floatunsisf>
    193c:	2f e6       	ldi	r18, 0x6F	; 111
    193e:	32 e1       	ldi	r19, 0x12	; 18
    1940:	43 e8       	ldi	r20, 0x83	; 131
    1942:	5a e3       	ldi	r21, 0x3A	; 58
    1944:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1948:	69 8b       	std	Y+17, r22	; 0x11
    194a:	7a 8b       	std	Y+18, r23	; 0x12
    194c:	8b 8b       	std	Y+19, r24	; 0x13
    194e:	9c 8b       	std	Y+20, r25	; 0x14
			float deltav = 1.0e-2 * ((float)ground_speed - (float)_last_ground_speed);
    1950:	d1 01       	movw	r26, r2
    1952:	58 96       	adiw	r26, 0x18	; 24
    1954:	6d 91       	ld	r22, X+
    1956:	7d 91       	ld	r23, X+
    1958:	8d 91       	ld	r24, X+
    195a:	9c 91       	ld	r25, X
    195c:	5b 97       	sbiw	r26, 0x1b	; 27
    195e:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1962:	69 87       	std	Y+9, r22	; 0x09
    1964:	7a 87       	std	Y+10, r23	; 0x0a
    1966:	8b 87       	std	Y+11, r24	; 0x0b
    1968:	9c 87       	std	Y+12, r25	; 0x0c
    196a:	9f e3       	ldi	r25, 0x3F	; 63
    196c:	89 2e       	mov	r8, r25
    196e:	91 2c       	mov	r9, r1
    1970:	82 0c       	add	r8, r2
    1972:	93 1c       	adc	r9, r3
    1974:	d4 01       	movw	r26, r8
    1976:	2d 91       	ld	r18, X+
    1978:	3d 91       	ld	r19, X+
    197a:	4d 91       	ld	r20, X+
    197c:	5c 91       	ld	r21, X
    197e:	2d 87       	std	Y+13, r18	; 0x0d
    1980:	3e 87       	std	Y+14, r19	; 0x0e
    1982:	4f 87       	std	Y+15, r20	; 0x0f
    1984:	58 8b       	std	Y+16, r21	; 0x10
			float gps_heading = ToRad(ground_course * 0.01);
    1986:	f1 01       	movw	r30, r2
    1988:	64 8d       	ldd	r22, Z+28	; 0x1c
    198a:	75 8d       	ldd	r23, Z+29	; 0x1d
    198c:	86 8d       	ldd	r24, Z+30	; 0x1e
    198e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1990:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1994:	2a e0       	ldi	r18, 0x0A	; 10
    1996:	37 ed       	ldi	r19, 0xD7	; 215
    1998:	43 e2       	ldi	r20, 0x23	; 35
    199a:	5c e3       	ldi	r21, 0x3C	; 60
    199c:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    19a0:	25 e3       	ldi	r18, 0x35	; 53
    19a2:	3a ef       	ldi	r19, 0xFA	; 250
    19a4:	4e e8       	ldi	r20, 0x8E	; 142
    19a6:	5c e3       	ldi	r21, 0x3C	; 60
    19a8:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    19ac:	7b 01       	movw	r14, r22
    19ae:	8c 01       	movw	r16, r24
			float gps_speed   = ground_speed * 0.01;
    19b0:	69 85       	ldd	r22, Y+9	; 0x09
    19b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    19b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19b8:	2a e0       	ldi	r18, 0x0A	; 10
    19ba:	37 ed       	ldi	r19, 0xD7	; 215
    19bc:	43 e2       	ldi	r20, 0x23	; 35
    19be:	5c e3       	ldi	r21, 0x3C	; 60
    19c0:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    19c4:	5b 01       	movw	r10, r22
    19c6:	6c 01       	movw	r12, r24
			float sin_heading, cos_heading;

			cos_heading = cos(gps_heading);
    19c8:	b7 01       	movw	r22, r14
    19ca:	c8 01       	movw	r24, r16
    19cc:	0e 94 75 24 	call	0x48ea	; 0x48ea <cos>
    19d0:	69 83       	std	Y+1, r22	; 0x01
    19d2:	7a 83       	std	Y+2, r23	; 0x02
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	9c 83       	std	Y+4, r25	; 0x04
			sin_heading = sin(gps_heading);
    19d8:	b7 01       	movw	r22, r14
    19da:	c8 01       	movw	r24, r16
    19dc:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <sin>
    19e0:	6d 83       	std	Y+5, r22	; 0x05
    19e2:	7e 83       	std	Y+6, r23	; 0x06
    19e4:	8f 83       	std	Y+7, r24	; 0x07
    19e6:	98 87       	std	Y+8, r25	; 0x08

			last_fix_time = _idleTimer;
    19e8:	d1 01       	movw	r26, r2
    19ea:	9f 96       	adiw	r26, 0x2f	; 47
    19ec:	4d 92       	st	X+, r4
    19ee:	5d 92       	st	X+, r5
    19f0:	6d 92       	st	X+, r6
    19f2:	7c 92       	st	X, r7
    19f4:	d2 97       	sbiw	r26, 0x32	; 50
			_last_ground_speed = ground_speed;
    19f6:	58 96       	adiw	r26, 0x18	; 24
    19f8:	8d 91       	ld	r24, X+
    19fa:	9d 91       	ld	r25, X+
    19fc:	0d 90       	ld	r0, X+
    19fe:	bc 91       	ld	r27, X
    1a00:	a0 2d       	mov	r26, r0
    1a02:	f4 01       	movw	r30, r8
    1a04:	80 83       	st	Z, r24
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	a2 83       	std	Z+2, r26	; 0x02
    1a0a:	b3 83       	std	Z+3, r27	; 0x03

			_velocity_north = gps_speed * cos_heading;
    1a0c:	2f e4       	ldi	r18, 0x4F	; 79
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	22 0e       	add	r2, r18
    1a12:	33 1e       	adc	r3, r19
    1a14:	c6 01       	movw	r24, r12
    1a16:	b5 01       	movw	r22, r10
    1a18:	29 81       	ldd	r18, Y+1	; 0x01
    1a1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a1c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a1e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a20:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1a24:	d1 01       	movw	r26, r2
    1a26:	6d 93       	st	X+, r22
    1a28:	7d 93       	st	X+, r23
    1a2a:	8d 93       	st	X+, r24
    1a2c:	9d 93       	st	X+, r25
    1a2e:	1d 01       	movw	r2, r26
			_velocity_east  = gps_speed * sin_heading;
    1a30:	c6 01       	movw	r24, r12
    1a32:	b5 01       	movw	r22, r10
    1a34:	2d 81       	ldd	r18, Y+5	; 0x05
    1a36:	3e 81       	ldd	r19, Y+6	; 0x06
    1a38:	4f 81       	ldd	r20, Y+7	; 0x07
    1a3a:	58 85       	ldd	r21, Y+8	; 0x08
    1a3c:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1a40:	f1 01       	movw	r30, r2
    1a42:	60 83       	st	Z, r22
    1a44:	71 83       	std	Z+1, r23	; 0x01
    1a46:	82 83       	std	Z+2, r24	; 0x02
    1a48:	93 83       	std	Z+3, r25	; 0x03
    1a4a:	2d ea       	ldi	r18, 0xAD	; 173
    1a4c:	3f ef       	ldi	r19, 0xFF	; 255
    1a4e:	22 0e       	add	r2, r18
    1a50:	33 1e       	adc	r3, r19

			if (deltat > 2.0 || deltat == 0) {
    1a52:	69 89       	ldd	r22, Y+17	; 0x11
    1a54:	7a 89       	ldd	r23, Y+18	; 0x12
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e4       	ldi	r21, 0x40	; 64
    1a62:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    1a66:	18 16       	cp	r1, r24
    1a68:	64 f0       	brlt	.+24     	; 0x1a82 <_ZN3GPS6updateEv+0x242>
    1a6a:	69 89       	ldd	r22, Y+17	; 0x11
    1a6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a70:	9c 89       	ldd	r25, Y+20	; 0x14
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	b1 f4       	brne	.+44     	; 0x1aae <_ZN3GPS6updateEv+0x26e>
				// we didn't get a fix for 2 seconds - set
				// acceleration to zero, as the estimate will be too
				// far out
				_acceleration = 0;
    1a82:	43 e4       	ldi	r20, 0x43	; 67
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	24 0e       	add	r2, r20
    1a88:	35 1e       	adc	r3, r21
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e0       	ldi	r26, 0x00	; 0
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	f1 01       	movw	r30, r2
    1a94:	81 93       	st	Z+, r24
    1a96:	91 93       	st	Z+, r25
    1a98:	a1 93       	st	Z+, r26
    1a9a:	b1 93       	st	Z+, r27
				_acceleration_north = 0;
    1a9c:	81 93       	st	Z+, r24
    1a9e:	91 93       	st	Z+, r25
    1aa0:	a1 93       	st	Z+, r26
    1aa2:	b1 93       	st	Z+, r27
				_acceleration_east = 0;
    1aa4:	80 83       	st	Z, r24
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	a2 83       	std	Z+2, r26	; 0x02
    1aaa:	b3 83       	std	Z+3, r27	; 0x03
    1aac:	5c c0       	rjmp	.+184    	; 0x1b66 <_ZN3GPS6updateEv+0x326>
			} else {
				// calculate a mildly smoothed acceleration value
				_acceleration = (0.7 * _acceleration) + (0.3 * (deltav/deltat));
    1aae:	83 e4       	ldi	r24, 0x43	; 67
    1ab0:	c8 2e       	mov	r12, r24
    1ab2:	d1 2c       	mov	r13, r1
    1ab4:	c2 0c       	add	r12, r2
    1ab6:	d3 1c       	adc	r13, r3
    1ab8:	d6 01       	movw	r26, r12
    1aba:	6d 91       	ld	r22, X+
    1abc:	7d 91       	ld	r23, X+
    1abe:	8d 91       	ld	r24, X+
    1ac0:	9c 91       	ld	r25, X
    1ac2:	23 e3       	ldi	r18, 0x33	; 51
    1ac4:	33 e3       	ldi	r19, 0x33	; 51
    1ac6:	43 e3       	ldi	r20, 0x33	; 51
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1ace:	7b 01       	movw	r14, r22
    1ad0:	8c 01       	movw	r16, r24
    1ad2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ad4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad8:	98 89       	ldd	r25, Y+16	; 0x10
    1ada:	0e 94 11 25 	call	0x4a22	; 0x4a22 <__floatunsisf>
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	69 85       	ldd	r22, Y+9	; 0x09
    1ae4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ae6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ae8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aea:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    1aee:	2a e0       	ldi	r18, 0x0A	; 10
    1af0:	37 ed       	ldi	r19, 0xD7	; 215
    1af2:	43 e2       	ldi	r20, 0x23	; 35
    1af4:	5c e3       	ldi	r21, 0x3C	; 60
    1af6:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1afa:	29 89       	ldd	r18, Y+17	; 0x11
    1afc:	3a 89       	ldd	r19, Y+18	; 0x12
    1afe:	4b 89       	ldd	r20, Y+19	; 0x13
    1b00:	5c 89       	ldd	r21, Y+20	; 0x14
    1b02:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__divsf3>
    1b06:	2a e9       	ldi	r18, 0x9A	; 154
    1b08:	39 e9       	ldi	r19, 0x99	; 153
    1b0a:	49 e9       	ldi	r20, 0x99	; 153
    1b0c:	5e e3       	ldi	r21, 0x3E	; 62
    1b0e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1b12:	9b 01       	movw	r18, r22
    1b14:	ac 01       	movw	r20, r24
    1b16:	c8 01       	movw	r24, r16
    1b18:	b7 01       	movw	r22, r14
    1b1a:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    1b1e:	7b 01       	movw	r14, r22
    1b20:	8c 01       	movw	r16, r24
    1b22:	f6 01       	movw	r30, r12
    1b24:	60 83       	st	Z, r22
    1b26:	71 83       	std	Z+1, r23	; 0x01
    1b28:	82 83       	std	Z+2, r24	; 0x02
    1b2a:	93 83       	std	Z+3, r25	; 0x03

				// calculate the components, to save time in the AHRS code
				_acceleration_north = _acceleration * cos_heading;
    1b2c:	27 e4       	ldi	r18, 0x47	; 71
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	22 0e       	add	r2, r18
    1b32:	33 1e       	adc	r3, r19
    1b34:	29 81       	ldd	r18, Y+1	; 0x01
    1b36:	3a 81       	ldd	r19, Y+2	; 0x02
    1b38:	4b 81       	ldd	r20, Y+3	; 0x03
    1b3a:	5c 81       	ldd	r21, Y+4	; 0x04
    1b3c:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1b40:	d1 01       	movw	r26, r2
    1b42:	6d 93       	st	X+, r22
    1b44:	7d 93       	st	X+, r23
    1b46:	8d 93       	st	X+, r24
    1b48:	9d 93       	st	X+, r25
    1b4a:	1d 01       	movw	r2, r26
				_acceleration_east  = _acceleration * sin_heading;
    1b4c:	c8 01       	movw	r24, r16
    1b4e:	b7 01       	movw	r22, r14
    1b50:	2d 81       	ldd	r18, Y+5	; 0x05
    1b52:	3e 81       	ldd	r19, Y+6	; 0x06
    1b54:	4f 81       	ldd	r20, Y+7	; 0x07
    1b56:	58 85       	ldd	r21, Y+8	; 0x08
    1b58:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1b5c:	f1 01       	movw	r30, r2
    1b5e:	60 83       	st	Z, r22
    1b60:	71 83       	std	Z+1, r23	; 0x01
    1b62:	82 83       	std	Z+2, r24	; 0x02
    1b64:	93 83       	std	Z+3, r25	; 0x03
			}
		}
    }
}
    1b66:	64 96       	adiw	r28, 0x14	; 20
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	9f 90       	pop	r9
    1b88:	8f 90       	pop	r8
    1b8a:	7f 90       	pop	r7
    1b8c:	6f 90       	pop	r6
    1b8e:	5f 90       	pop	r5
    1b90:	4f 90       	pop	r4
    1b92:	3f 90       	pop	r3
    1b94:	2f 90       	pop	r2
    1b96:	08 95       	ret

00001b98 <_Z8read_adci>:
}

// Returns an analog value with the offset corrected (calibrated value)
float read_adc(int select)
{
  if (SENSOR_SIGN[select]<0) {
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	ed 59       	subi	r30, 0x9D	; 157
    1ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba2:	20 81       	ld	r18, Z
    1ba4:	31 81       	ldd	r19, Z+1	; 0x01
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	aa 0f       	add	r26, r26
    1baa:	bb 1f       	adc	r27, r27
    1bac:	37 ff       	sbrs	r19, 7
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <_Z8read_adci+0x24>
    return (AN_OFFSET[select]-AN[select]);
    1bb0:	fd 01       	movw	r30, r26
    1bb2:	e4 57       	subi	r30, 0x74	; 116
    1bb4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb6:	a4 55       	subi	r26, 0x54	; 84
    1bb8:	bd 4f       	sbci	r27, 0xFD	; 253
    1bba:	05 c0       	rjmp	.+10     	; 0x1bc6 <_Z8read_adci+0x2e>
  }
  else {
    return (AN[select]-AN_OFFSET[select]);
    1bbc:	fd 01       	movw	r30, r26
    1bbe:	e4 55       	subi	r30, 0x54	; 84
    1bc0:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc2:	a4 57       	subi	r26, 0x74	; 116
    1bc4:	bd 4f       	sbci	r27, 0xFD	; 253
    1bc6:	6d 91       	ld	r22, X+
    1bc8:	7d 91       	ld	r23, X+
    1bca:	8d 91       	ld	r24, X+
    1bcc:	9c 91       	ld	r25, X
    1bce:	20 81       	ld	r18, Z
    1bd0:	31 81       	ldd	r19, Z+1	; 0x01
    1bd2:	42 81       	ldd	r20, Z+2	; 0x02
    1bd4:	53 81       	ldd	r21, Z+3	; 0x03
    1bd6:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    1bda:	e6 2f       	mov	r30, r22
  }
}
    1bdc:	2e 2f       	mov	r18, r30
    1bde:	37 2f       	mov	r19, r23
    1be0:	48 2f       	mov	r20, r24
    1be2:	59 2f       	mov	r21, r25
    1be4:	b9 01       	movw	r22, r18
    1be6:	ca 01       	movw	r24, r20
    1be8:	08 95       	ret

00001bea <_Z12Read_adc_rawv>:

#if BOARD_VERSION == 3
// Assign sensor values to AN[] array (we use this function for compatibility)
void Read_adc_raw()
{
  MPU6000_Read();    // Read MPU6000 sensor values
    1bea:	0e 94 27 1a 	call	0x344e	; 0x344e <_Z12MPU6000_Readv>
  AN[0] = gyroX;   
    1bee:	60 91 28 04 	lds	r22, 0x0428
    1bf2:	70 91 29 04 	lds	r23, 0x0429
    1bf6:	88 27       	eor	r24, r24
    1bf8:	77 fd       	sbrc	r23, 7
    1bfa:	80 95       	com	r24
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1c02:	60 93 8c 02 	sts	0x028C, r22
    1c06:	70 93 8d 02 	sts	0x028D, r23
    1c0a:	80 93 8e 02 	sts	0x028E, r24
    1c0e:	90 93 8f 02 	sts	0x028F, r25
  AN[1] = gyroY;
    1c12:	60 91 2a 04 	lds	r22, 0x042A
    1c16:	70 91 2b 04 	lds	r23, 0x042B
    1c1a:	88 27       	eor	r24, r24
    1c1c:	77 fd       	sbrc	r23, 7
    1c1e:	80 95       	com	r24
    1c20:	98 2f       	mov	r25, r24
    1c22:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1c26:	60 93 90 02 	sts	0x0290, r22
    1c2a:	70 93 91 02 	sts	0x0291, r23
    1c2e:	80 93 92 02 	sts	0x0292, r24
    1c32:	90 93 93 02 	sts	0x0293, r25
  AN[2] = gyroZ;
    1c36:	60 91 2c 04 	lds	r22, 0x042C
    1c3a:	70 91 2d 04 	lds	r23, 0x042D
    1c3e:	88 27       	eor	r24, r24
    1c40:	77 fd       	sbrc	r23, 7
    1c42:	80 95       	com	r24
    1c44:	98 2f       	mov	r25, r24
    1c46:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1c4a:	60 93 94 02 	sts	0x0294, r22
    1c4e:	70 93 95 02 	sts	0x0295, r23
    1c52:	80 93 96 02 	sts	0x0296, r24
    1c56:	90 93 97 02 	sts	0x0297, r25
  AN[3] = accelX;
    1c5a:	60 91 22 04 	lds	r22, 0x0422
    1c5e:	70 91 23 04 	lds	r23, 0x0423
    1c62:	88 27       	eor	r24, r24
    1c64:	77 fd       	sbrc	r23, 7
    1c66:	80 95       	com	r24
    1c68:	98 2f       	mov	r25, r24
    1c6a:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1c6e:	60 93 98 02 	sts	0x0298, r22
    1c72:	70 93 99 02 	sts	0x0299, r23
    1c76:	80 93 9a 02 	sts	0x029A, r24
    1c7a:	90 93 9b 02 	sts	0x029B, r25
  AN[4] = accelY;
    1c7e:	60 91 24 04 	lds	r22, 0x0424
    1c82:	70 91 25 04 	lds	r23, 0x0425
    1c86:	88 27       	eor	r24, r24
    1c88:	77 fd       	sbrc	r23, 7
    1c8a:	80 95       	com	r24
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1c92:	60 93 9c 02 	sts	0x029C, r22
    1c96:	70 93 9d 02 	sts	0x029D, r23
    1c9a:	80 93 9e 02 	sts	0x029E, r24
    1c9e:	90 93 9f 02 	sts	0x029F, r25
  AN[5] = accelZ;  
    1ca2:	60 91 26 04 	lds	r22, 0x0426
    1ca6:	70 91 27 04 	lds	r23, 0x0427
    1caa:	88 27       	eor	r24, r24
    1cac:	77 fd       	sbrc	r23, 7
    1cae:	80 95       	com	r24
    1cb0:	98 2f       	mov	r25, r24
    1cb2:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    1cb6:	60 93 a0 02 	sts	0x02A0, r22
    1cba:	70 93 a1 02 	sts	0x02A1, r23
    1cbe:	80 93 a2 02 	sts	0x02A2, r24
    1cc2:	90 93 a3 02 	sts	0x02A3, r25
}
    1cc6:	08 95       	ret

00001cc8 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    1cc8:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    1cca:	f9 99       	sbic	0x1f, 1	; 31
    1ccc:	fe cf       	rjmp	.-4      	; 0x1cca <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1cce:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1cd0:	32 bd       	out	0x22, r19	; 34
    1cd2:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    1cd4:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	fa 9a       	sbi	0x1f, 2	; 31
    1cdc:	f9 9a       	sbi	0x1f, 1	; 31
    1cde:	0f be       	out	0x3f, r0	; 63
}
    1ce0:	08 95       	ret

00001ce2 <__vector_18>:
 float Heading_X;
 float Heading_Y;
 #endif

 // GPS Selection
 FastSerialPort0(Serial);		// Instantiate the fast serial driver
    1ce2:	1f 92       	push	r1
    1ce4:	0f 92       	push	r0
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	0f 92       	push	r0
    1cea:	11 24       	eor	r1, r1
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
    1cfa:	40 91 c6 00 	lds	r20, 0x00C6
    1cfe:	20 91 6e 02 	lds	r18, 0x026E
    1d02:	30 91 6f 02 	lds	r19, 0x026F
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	80 91 72 02 	lds	r24, 0x0272
    1d0e:	90 91 73 02 	lds	r25, 0x0273
    1d12:	28 23       	and	r18, r24
    1d14:	39 23       	and	r19, r25
    1d16:	80 91 70 02 	lds	r24, 0x0270
    1d1a:	90 91 71 02 	lds	r25, 0x0271
    1d1e:	28 17       	cp	r18, r24
    1d20:	39 07       	cpc	r19, r25
    1d22:	79 f0       	breq	.+30     	; 0x1d42 <__vector_18+0x60>
    1d24:	80 91 6e 02 	lds	r24, 0x026E
    1d28:	90 91 6f 02 	lds	r25, 0x026F
    1d2c:	e0 91 74 02 	lds	r30, 0x0274
    1d30:	f0 91 75 02 	lds	r31, 0x0275
    1d34:	e8 0f       	add	r30, r24
    1d36:	f9 1f       	adc	r31, r25
    1d38:	40 83       	st	Z, r20
    1d3a:	30 93 6f 02 	sts	0x026F, r19
    1d3e:	20 93 6e 02 	sts	0x026E, r18
    1d42:	ff 91       	pop	r31
    1d44:	ef 91       	pop	r30
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	4f 91       	pop	r20
    1d4c:	3f 91       	pop	r19
    1d4e:	2f 91       	pop	r18
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	0f 90       	pop	r0
    1d56:	1f 90       	pop	r1
    1d58:	18 95       	reti

00001d5a <__vector_19>:
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	2f 93       	push	r18
    1d66:	3f 93       	push	r19
    1d68:	8f 93       	push	r24
    1d6a:	9f 93       	push	r25
    1d6c:	ef 93       	push	r30
    1d6e:	ff 93       	push	r31
    1d70:	20 91 78 02 	lds	r18, 0x0278
    1d74:	30 91 79 02 	lds	r19, 0x0279
    1d78:	80 91 76 02 	lds	r24, 0x0276
    1d7c:	90 91 77 02 	lds	r25, 0x0277
    1d80:	28 17       	cp	r18, r24
    1d82:	39 07       	cpc	r19, r25
    1d84:	e9 f0       	breq	.+58     	; 0x1dc0 <__vector_19+0x66>
    1d86:	80 91 78 02 	lds	r24, 0x0278
    1d8a:	90 91 79 02 	lds	r25, 0x0279
    1d8e:	e0 91 7c 02 	lds	r30, 0x027C
    1d92:	f0 91 7d 02 	lds	r31, 0x027D
    1d96:	e8 0f       	add	r30, r24
    1d98:	f9 1f       	adc	r31, r25
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 93 c6 00 	sts	0x00C6, r24
    1da0:	80 91 78 02 	lds	r24, 0x0278
    1da4:	90 91 79 02 	lds	r25, 0x0279
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	20 91 7a 02 	lds	r18, 0x027A
    1dae:	30 91 7b 02 	lds	r19, 0x027B
    1db2:	82 23       	and	r24, r18
    1db4:	93 23       	and	r25, r19
    1db6:	90 93 79 02 	sts	0x0279, r25
    1dba:	80 93 78 02 	sts	0x0278, r24
    1dbe:	10 c0       	rjmp	.+32     	; 0x1de0 <__vector_19+0x86>
    1dc0:	20 91 76 02 	lds	r18, 0x0276
    1dc4:	30 91 77 02 	lds	r19, 0x0277
    1dc8:	80 91 78 02 	lds	r24, 0x0278
    1dcc:	90 91 79 02 	lds	r25, 0x0279
    1dd0:	28 17       	cp	r18, r24
    1dd2:	39 07       	cpc	r19, r25
    1dd4:	29 f4       	brne	.+10     	; 0x1de0 <__vector_19+0x86>
    1dd6:	80 91 c1 00 	lds	r24, 0x00C1
    1dda:	8f 7d       	andi	r24, 0xDF	; 223
    1ddc:	80 93 c1 00 	sts	0x00C1, r24
    1de0:	ff 91       	pop	r31
    1de2:	ef 91       	pop	r30
    1de4:	9f 91       	pop	r25
    1de6:	8f 91       	pop	r24
    1de8:	3f 91       	pop	r19
    1dea:	2f 91       	pop	r18
    1dec:	0f 90       	pop	r0
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	0f 90       	pop	r0
    1df2:	1f 90       	pop	r1
    1df4:	18 95       	reti

00001df6 <_GLOBAL__I_G_Dt>:
		break;

	}
	#endif

}
    1df6:	6f 92       	push	r6
    1df8:	7f 92       	push	r7
    1dfa:	8f 92       	push	r8
    1dfc:	af 92       	push	r10
    1dfe:	cf 92       	push	r12
    1e00:	ef 92       	push	r14
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
 float Heading_X;
 float Heading_Y;
 #endif

 // GPS Selection
 FastSerialPort0(Serial);		// Instantiate the fast serial driver
    1e08:	a9 e7       	ldi	r26, 0x79	; 121
    1e0a:	6a 2e       	mov	r6, r26
    1e0c:	a3 e0       	ldi	r26, 0x03	; 3
    1e0e:	7a 2e       	mov	r7, r26
    1e10:	c3 01       	movw	r24, r6
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	45 ec       	ldi	r20, 0xC5	; 197
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	24 ec       	ldi	r18, 0xC4	; 196
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	00 ec       	ldi	r16, 0xC0	; 192
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	f1 ec       	ldi	r31, 0xC1	; 193
    1e22:	ef 2e       	mov	r14, r31
    1e24:	f1 2c       	mov	r15, r1
    1e26:	cc 24       	eor	r12, r12
    1e28:	c3 94       	inc	r12
    1e2a:	e8 e9       	ldi	r30, 0x98	; 152
    1e2c:	ae 2e       	mov	r10, r30
    1e2e:	70 e2       	ldi	r23, 0x20	; 32
    1e30:	87 2e       	mov	r8, r23
    1e32:	0e 94 bb 05 	call	0xb76	; 0xb76 <_ZN10FastSerialC1EhPVhS1_S1_S1_hhh>
#if   GPS_PROTOCOL == 1
#include "AP_GPS_NMEA.h"
AP_GPS_NMEA		GPS(&Serial);
    1e36:	86 e9       	ldi	r24, 0x96	; 150
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	b3 01       	movw	r22, r6
    1e3c:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN11AP_GPS_NMEAC1EP6Stream>
		break;

	}
	#endif

}
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	ff 90       	pop	r15
    1e46:	ef 90       	pop	r14
    1e48:	cf 90       	pop	r12
    1e4a:	af 90       	pop	r10
    1e4c:	8f 90       	pop	r8
    1e4e:	7f 90       	pop	r7
    1e50:	6f 90       	pop	r6
    1e52:	08 95       	ret

00001e54 <_Z14startup_groundv>:
  }

}

//********************************************************************************
void startup_ground(void)
    1e54:	4f 92       	push	r4
    1e56:	5f 92       	push	r5
    1e58:	6f 92       	push	r6
    1e5a:	7f 92       	push	r7
    1e5c:	8f 92       	push	r8
    1e5e:	9f 92       	push	r9
    1e60:	af 92       	push	r10
    1e62:	bf 92       	push	r11
    1e64:	cf 92       	push	r12
    1e66:	df 92       	push	r13
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	c0 e0       	ldi	r28, 0x00	; 0
    1e76:	d0 e0       	ldi	r29, 0x00	; 0
	int flashcount = 0;

	debug_handler(2);
	for(int c=0; c<ADC_WARM_CYCLES; c++)
	{
		digitalWrite(YELLOW_LED_PIN,LOW);
    1e78:	85 e0       	ldi	r24, 0x05	; 5
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
		digitalWrite(BLUE_LED_PIN,HIGH);
    1e80:	86 e0       	ldi	r24, 0x06	; 6
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
		digitalWrite(RED_LED_PIN,LOW);
    1e88:	85 e0       	ldi	r24, 0x05	; 5
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
		delay(50);
    1e90:	62 e3       	ldi	r22, 0x32	; 50
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
		Read_adc_raw();
    1e9c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z12Read_adc_rawv>
		digitalWrite(YELLOW_LED_PIN,HIGH);
    1ea0:	85 e0       	ldi	r24, 0x05	; 5
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
		digitalWrite(BLUE_LED_PIN,LOW);
    1ea8:	86 e0       	ldi	r24, 0x06	; 6
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
		digitalWrite(RED_LED_PIN,HIGH);
    1eb0:	85 e0       	ldi	r24, 0x05	; 5
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
		delay(50);
    1eb8:	62 e3       	ldi	r22, 0x32	; 50
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
{
	uint16_t store=0;
	int flashcount = 0;

	debug_handler(2);
	for(int c=0; c<ADC_WARM_CYCLES; c++)
    1ec4:	21 96       	adiw	r28, 0x01	; 1
    1ec6:	cb 34       	cpi	r28, 0x4B	; 75
    1ec8:	d1 05       	cpc	r29, r1
    1eca:	b1 f6       	brne	.-84     	; 0x1e78 <_Z14startup_groundv+0x24>
		digitalWrite(BLUE_LED_PIN,LOW);
		digitalWrite(RED_LED_PIN,HIGH);
		delay(50);
	}

	Read_adc_raw();
    1ecc:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z12Read_adc_rawv>
	delay(20);
    1ed0:	64 e1       	ldi	r22, 0x14	; 20
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
	Read_adc_raw();
    1edc:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z12Read_adc_rawv>
	for(int y=0; y<=5; y++)   // Read first initial ADC values for offset.
		AN_OFFSET[y]=AN[y];
    1ee0:	80 91 8c 02 	lds	r24, 0x028C
    1ee4:	90 91 8d 02 	lds	r25, 0x028D
    1ee8:	a0 91 8e 02 	lds	r26, 0x028E
    1eec:	b0 91 8f 02 	lds	r27, 0x028F
    1ef0:	80 93 ac 02 	sts	0x02AC, r24
    1ef4:	90 93 ad 02 	sts	0x02AD, r25
    1ef8:	a0 93 ae 02 	sts	0x02AE, r26
    1efc:	b0 93 af 02 	sts	0x02AF, r27
    1f00:	80 91 90 02 	lds	r24, 0x0290
    1f04:	90 91 91 02 	lds	r25, 0x0291
    1f08:	a0 91 92 02 	lds	r26, 0x0292
    1f0c:	b0 91 93 02 	lds	r27, 0x0293
    1f10:	80 93 b0 02 	sts	0x02B0, r24
    1f14:	90 93 b1 02 	sts	0x02B1, r25
    1f18:	a0 93 b2 02 	sts	0x02B2, r26
    1f1c:	b0 93 b3 02 	sts	0x02B3, r27
    1f20:	80 91 94 02 	lds	r24, 0x0294
    1f24:	90 91 95 02 	lds	r25, 0x0295
    1f28:	a0 91 96 02 	lds	r26, 0x0296
    1f2c:	b0 91 97 02 	lds	r27, 0x0297
    1f30:	80 93 b4 02 	sts	0x02B4, r24
    1f34:	90 93 b5 02 	sts	0x02B5, r25
    1f38:	a0 93 b6 02 	sts	0x02B6, r26
    1f3c:	b0 93 b7 02 	sts	0x02B7, r27
    1f40:	80 91 98 02 	lds	r24, 0x0298
    1f44:	90 91 99 02 	lds	r25, 0x0299
    1f48:	a0 91 9a 02 	lds	r26, 0x029A
    1f4c:	b0 91 9b 02 	lds	r27, 0x029B
    1f50:	80 93 b8 02 	sts	0x02B8, r24
    1f54:	90 93 b9 02 	sts	0x02B9, r25
    1f58:	a0 93 ba 02 	sts	0x02BA, r26
    1f5c:	b0 93 bb 02 	sts	0x02BB, r27
    1f60:	80 91 9c 02 	lds	r24, 0x029C
    1f64:	90 91 9d 02 	lds	r25, 0x029D
    1f68:	a0 91 9e 02 	lds	r26, 0x029E
    1f6c:	b0 91 9f 02 	lds	r27, 0x029F
    1f70:	80 93 bc 02 	sts	0x02BC, r24
    1f74:	90 93 bd 02 	sts	0x02BD, r25
    1f78:	a0 93 be 02 	sts	0x02BE, r26
    1f7c:	b0 93 bf 02 	sts	0x02BF, r27
    1f80:	80 91 a0 02 	lds	r24, 0x02A0
    1f84:	90 91 a1 02 	lds	r25, 0x02A1
    1f88:	a0 91 a2 02 	lds	r26, 0x02A2
    1f8c:	b0 91 a3 02 	lds	r27, 0x02A3
    1f90:	80 93 c0 02 	sts	0x02C0, r24
    1f94:	90 93 c1 02 	sts	0x02C1, r25
    1f98:	a0 93 c2 02 	sts	0x02C2, r26
    1f9c:	b0 93 c3 02 	sts	0x02C3, r27
    1fa0:	cc 24       	eor	r12, r12
    1fa2:	dd 24       	eor	r13, r13
    1fa4:	66 24       	eor	r6, r6
    1fa6:	77 24       	eor	r7, r7
  }

}

//********************************************************************************
void startup_ground(void)
    1fa8:	04 ec       	ldi	r16, 0xC4	; 196
    1faa:	40 2e       	mov	r4, r16
    1fac:	02 e0       	ldi	r16, 0x02	; 2
    1fae:	50 2e       	mov	r5, r16
	for(int y=0; y<=5; y++)   // Read first initial ADC values for offset.
		AN_OFFSET[y]=AN[y];

	for(int i=0;i<400;i++)    // We take some readings...
	{
		Read_adc_raw();
    1fb0:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z12Read_adc_rawv>
    1fb4:	1c ea       	ldi	r17, 0xAC	; 172
    1fb6:	81 2e       	mov	r8, r17
    1fb8:	12 e0       	ldi	r17, 0x02	; 2
    1fba:	91 2e       	mov	r9, r17
    1fbc:	bc e8       	ldi	r27, 0x8C	; 140
    1fbe:	ab 2e       	mov	r10, r27
    1fc0:	b2 e0       	ldi	r27, 0x02	; 2
    1fc2:	bb 2e       	mov	r11, r27
    1fc4:	e4 01       	movw	r28, r8
		for(int y=0; y<=5; y++)   // Read initial ADC values for offset (averaging).
			AN_OFFSET[y]=AN_OFFSET[y]*0.8 + AN[y]*0.2;
    1fc6:	68 81       	ld	r22, Y
    1fc8:	79 81       	ldd	r23, Y+1	; 0x01
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	2d ec       	ldi	r18, 0xCD	; 205
    1fd0:	3c ec       	ldi	r19, 0xCC	; 204
    1fd2:	4c e4       	ldi	r20, 0x4C	; 76
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1fda:	7b 01       	movw	r14, r22
    1fdc:	8c 01       	movw	r16, r24
    1fde:	f5 01       	movw	r30, r10
    1fe0:	61 91       	ld	r22, Z+
    1fe2:	71 91       	ld	r23, Z+
    1fe4:	81 91       	ld	r24, Z+
    1fe6:	91 91       	ld	r25, Z+
    1fe8:	5f 01       	movw	r10, r30
    1fea:	2d ec       	ldi	r18, 0xCD	; 205
    1fec:	3c ec       	ldi	r19, 0xCC	; 204
    1fee:	4c e4       	ldi	r20, 0x4C	; 76
    1ff0:	5e e3       	ldi	r21, 0x3E	; 62
    1ff2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    1ff6:	9b 01       	movw	r18, r22
    1ff8:	ac 01       	movw	r20, r24
    1ffa:	c8 01       	movw	r24, r16
    1ffc:	b7 01       	movw	r22, r14
    1ffe:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    2002:	69 93       	st	Y+, r22
    2004:	79 93       	st	Y+, r23
    2006:	89 93       	st	Y+, r24
    2008:	99 93       	st	Y+, r25
  }

}

//********************************************************************************
void startup_ground(void)
    200a:	04 ec       	ldi	r16, 0xC4	; 196
    200c:	12 e0       	ldi	r17, 0x02	; 2
		AN_OFFSET[y]=AN[y];

	for(int i=0;i<400;i++)    // We take some readings...
	{
		Read_adc_raw();
		for(int y=0; y<=5; y++)   // Read initial ADC values for offset (averaging).
    200e:	4c 16       	cp	r4, r28
    2010:	5d 06       	cpc	r5, r29
    2012:	c9 f6       	brne	.-78     	; 0x1fc6 <_Z14startup_groundv+0x172>
			AN_OFFSET[y]=AN_OFFSET[y]*0.8 + AN[y]*0.2;
		delay(20);
    2014:	64 e1       	ldi	r22, 0x14	; 20
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
		if(flashcount == 5) {
    2020:	f5 e0       	ldi	r31, 0x05	; 5
    2022:	cf 16       	cp	r12, r31
    2024:	d1 04       	cpc	r13, r1
    2026:	69 f4       	brne	.+26     	; 0x2042 <_Z14startup_groundv+0x1ee>
			digitalWrite(YELLOW_LED_PIN,LOW);
    2028:	85 e0       	ldi	r24, 0x05	; 5
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
			digitalWrite(BLUE_LED_PIN,HIGH);
    2030:	86 e0       	ldi	r24, 0x06	; 6
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
			digitalWrite(RED_LED_PIN,LOW);
    2038:	85 e0       	ldi	r24, 0x05	; 5
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
    2040:	12 c0       	rjmp	.+36     	; 0x2066 <_Z14startup_groundv+0x212>
		}
		if(flashcount >= 10) {
    2042:	8a e0       	ldi	r24, 0x0A	; 10
    2044:	c8 16       	cp	r12, r24
    2046:	d1 04       	cpc	r13, r1
    2048:	74 f0       	brlt	.+28     	; 0x2066 <_Z14startup_groundv+0x212>
			flashcount = 0;

			digitalWrite(YELLOW_LED_PIN,HIGH);
    204a:	85 e0       	ldi	r24, 0x05	; 5
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
			digitalWrite(BLUE_LED_PIN,LOW);
    2052:	86 e0       	ldi	r24, 0x06	; 6
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
			digitalWrite(RED_LED_PIN,HIGH);
    205a:	85 e0       	ldi	r24, 0x05	; 5
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
    2062:	cc 24       	eor	r12, r12
    2064:	dd 24       	eor	r13, r13
	delay(20);
	Read_adc_raw();
	for(int y=0; y<=5; y++)   // Read first initial ADC values for offset.
		AN_OFFSET[y]=AN[y];

	for(int i=0;i<400;i++)    // We take some readings...
    2066:	08 94       	sec
    2068:	61 1c       	adc	r6, r1
    206a:	71 1c       	adc	r7, r1
    206c:	90 e9       	ldi	r25, 0x90	; 144
    206e:	69 16       	cp	r6, r25
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	79 06       	cpc	r7, r25
    2074:	21 f0       	breq	.+8      	; 0x207e <_Z14startup_groundv+0x22a>

			digitalWrite(YELLOW_LED_PIN,HIGH);
			digitalWrite(BLUE_LED_PIN,LOW);
			digitalWrite(RED_LED_PIN,HIGH);
		}
		flashcount++;
    2076:	08 94       	sec
    2078:	c1 1c       	adc	r12, r1
    207a:	d1 1c       	adc	r13, r1
    207c:	99 cf       	rjmp	.-206    	; 0x1fb0 <_Z14startup_groundv+0x15c>

        }
	digitalWrite(RED_LED_PIN,LOW);
    207e:	85 e0       	ldi	r24, 0x05	; 5
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
	digitalWrite(BLUE_LED_PIN,LOW);
    2086:	86 e0       	ldi	r24, 0x06	; 6
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
	digitalWrite(YELLOW_LED_PIN,LOW);
    208e:	85 e0       	ldi	r24, 0x05	; 5
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>

	AN_OFFSET[5]-=GRAVITY*SENSOR_SIGN[5];
    2096:	20 91 6d 01 	lds	r18, 0x016D
    209a:	72 2f       	mov	r23, r18
    209c:	72 95       	swap	r23
    209e:	70 7f       	andi	r23, 0xF0	; 240
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	88 27       	eor	r24, r24
    20a4:	77 fd       	sbrc	r23, 7
    20a6:	80 95       	com	r24
    20a8:	98 2f       	mov	r25, r24
    20aa:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    20ae:	9b 01       	movw	r18, r22
    20b0:	ac 01       	movw	r20, r24
    20b2:	60 91 c0 02 	lds	r22, 0x02C0
    20b6:	70 91 c1 02 	lds	r23, 0x02C1
    20ba:	80 91 c2 02 	lds	r24, 0x02C2
    20be:	90 91 c3 02 	lds	r25, 0x02C3
    20c2:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    20c6:	60 93 c0 02 	sts	0x02C0, r22
    20ca:	70 93 c1 02 	sts	0x02C1, r23
    20ce:	80 93 c2 02 	sts	0x02C2, r24
    20d2:	90 93 c3 02 	sts	0x02C3, r25
    20d6:	c2 e0       	ldi	r28, 0x02	; 2
    20d8:	d0 e0       	ldi	r29, 0x00	; 0

	for(int y=0; y<=5; y++)
	{
		Serial.println(AN_OFFSET[y]);
    20da:	f4 01       	movw	r30, r8
    20dc:	40 81       	ld	r20, Z
    20de:	51 81       	ldd	r21, Z+1	; 0x01
    20e0:	62 81       	ldd	r22, Z+2	; 0x02
    20e2:	73 81       	ldd	r23, Z+3	; 0x03
    20e4:	89 e7       	ldi	r24, 0x79	; 121
    20e6:	93 e0       	ldi	r25, 0x03	; 3
    20e8:	22 e0       	ldi	r18, 0x02	; 2
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	0e 94 05 20 	call	0x400a	; 0x400a <_ZN5Print7printlnEdi>
                #if BOARD_VERSION < 3
		store = ((AN_OFFSET[y]-200.f)*100.0f);
                #endif
                #if BOARD_VERSION == 3
                store = AN_OFFSET[y];
    20f0:	f4 01       	movw	r30, r8
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
                #endif
		eeprom_busy_wait();
    20fa:	f9 99       	sbic	0x1f, 1	; 31
    20fc:	fe cf       	rjmp	.-4      	; 0x20fa <_Z14startup_groundv+0x2a6>
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    20fe:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__fixunssfsi>
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	ce 01       	movw	r24, r28
    2108:	b9 01       	movw	r22, r18
    210a:	44 e6       	ldi	r20, 0x64	; 100
    210c:	5e e0       	ldi	r21, 0x0E	; 14
    210e:	0e 94 56 04 	call	0x8ac	; 0x8ac <__eewr_word>
    2112:	84 e0       	ldi	r24, 0x04	; 4
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	88 0e       	add	r8, r24
    2118:	99 1e       	adc	r9, r25
    211a:	22 96       	adiw	r28, 0x02	; 2
	digitalWrite(BLUE_LED_PIN,LOW);
	digitalWrite(YELLOW_LED_PIN,LOW);

	AN_OFFSET[5]-=GRAVITY*SENSOR_SIGN[5];

	for(int y=0; y<=5; y++)
    211c:	08 15       	cp	r16, r8
    211e:	19 05       	cpc	r17, r9
    2120:	e1 f6       	brne	.-72     	; 0x20da <_Z14startup_groundv+0x286>
			GPS.new_data = 0;
			gps_fix_count--;
		}
	}

	groundstartDone = true;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	80 93 8b 02 	sts	0x028B, r24
	debug_handler(6);
}
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	bf 90       	pop	r11
    213a:	af 90       	pop	r10
    213c:	9f 90       	pop	r9
    213e:	8f 90       	pop	r8
    2140:	7f 90       	pop	r7
    2142:	6f 90       	pop	r6
    2144:	5f 90       	pop	r5
    2146:	4f 90       	pop	r4
    2148:	08 95       	ret

0000214a <loop>:
  delay(20);

}

//***************************************************************************************
void loop() //Main Loop
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
{
  timeNow = millis();
    2152:	0e 94 0b 22 	call	0x4416	; 0x4416 <millis>
    2156:	9b 01       	movw	r18, r22
    2158:	ac 01       	movw	r20, r24
    215a:	20 93 7f 02 	sts	0x027F, r18
    215e:	30 93 80 02 	sts	0x0280, r19
    2162:	40 93 81 02 	sts	0x0281, r20
    2166:	50 93 82 02 	sts	0x0282, r21

  if((timeNow-timer)>=20)  // Main loop runs at 50Hz
    216a:	80 91 83 02 	lds	r24, 0x0283
    216e:	90 91 84 02 	lds	r25, 0x0284
    2172:	a0 91 85 02 	lds	r26, 0x0285
    2176:	b0 91 86 02 	lds	r27, 0x0286
    217a:	79 01       	movw	r14, r18
    217c:	8a 01       	movw	r16, r20
    217e:	e8 1a       	sub	r14, r24
    2180:	f9 0a       	sbc	r15, r25
    2182:	0a 0b       	sbc	r16, r26
    2184:	1b 0b       	sbc	r17, r27
    2186:	64 e1       	ldi	r22, 0x14	; 20
    2188:	e6 16       	cp	r14, r22
    218a:	f1 04       	cpc	r15, r1
    218c:	01 05       	cpc	r16, r1
    218e:	11 05       	cpc	r17, r1
    2190:	0c f4       	brge	.+2      	; 0x2194 <loop+0x4a>
    2192:	4a c1       	rjmp	.+660    	; 0x2428 <loop+0x2de>
  {
    timer_old = timer;
    2194:	80 93 87 02 	sts	0x0287, r24
    2198:	90 93 88 02 	sts	0x0288, r25
    219c:	a0 93 89 02 	sts	0x0289, r26
    21a0:	b0 93 8a 02 	sts	0x028A, r27
    timer = timeNow;
    21a4:	20 93 83 02 	sts	0x0283, r18
    21a8:	30 93 84 02 	sts	0x0284, r19
    21ac:	40 93 85 02 	sts	0x0285, r20
    21b0:	50 93 86 02 	sts	0x0286, r21
#if PERFORMANCE_REPORTING == 1
    mainLoop_count++;
    if (timer-timer_old > G_Dt_max) G_Dt_max = timer-timer_old;
#endif

    G_Dt = (timer-timer_old)/1000.0;    // Real time of loop run. We use this on the DCM algorithm (gyro integration time)
    21b4:	c8 01       	movw	r24, r16
    21b6:	b7 01       	movw	r22, r14
    21b8:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a e7       	ldi	r20, 0x7A	; 122
    21c2:	54 e4       	ldi	r21, 0x44	; 68
    21c4:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__divsf3>
    21c8:	60 93 13 01 	sts	0x0113, r22
    21cc:	70 93 14 01 	sts	0x0114, r23
    21d0:	80 93 15 01 	sts	0x0115, r24
    21d4:	90 93 16 01 	sts	0x0116, r25
    if(G_Dt > 1)
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	64 f4       	brge	.+24     	; 0x2200 <loop+0xb6>
        G_Dt = 0;  //Something is wrong - keeps dt from blowing up, goes to zero to keep gyros from departing
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	80 93 13 01 	sts	0x0113, r24
    21f4:	90 93 14 01 	sts	0x0114, r25
    21f8:	a0 93 15 01 	sts	0x0115, r26
    21fc:	b0 93 16 01 	sts	0x0116, r27

    // *** DCM algorithm

    Read_adc_raw();
    2200:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z12Read_adc_rawv>

    Matrix_update();
    2204:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_Z13Matrix_updatev>

    Normalize();
    2208:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_Z9Normalizev>

    Drift_correction();
    220c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_Z16Drift_correctionv>

    Euler_angles();
    2210:	0e 94 0f 13 	call	0x261e	; 0x261e <_Z12Euler_anglesv>
    //Serial.print("\t");
    //Serial.print(ToDeg(yaw));
    //Serial.println();

    #if PRINT_BINARY == 1
      printdata(); //Send info via serial
    2214:	0e 94 05 1b 	call	0x360a	; 0x360a <_Z9printdatav>
    #endif

    //Turn on the LED when you saturate any of the gyros.
    if((abs(Gyro_Vector[0])>=ToRad(300))||(abs(Gyro_Vector[1])>=ToRad(300))||(abs(Gyro_Vector[2])>=ToRad(300)))
    2218:	60 91 d8 02 	lds	r22, 0x02D8
    221c:	70 91 d9 02 	lds	r23, 0x02D9
    2220:	80 91 da 02 	lds	r24, 0x02DA
    2224:	90 91 db 02 	lds	r25, 0x02DB
    2228:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__fixsfsi>
    222c:	9b 01       	movw	r18, r22
    222e:	77 ff       	sbrs	r23, 7
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <loop+0xee>
    2232:	30 95       	com	r19
    2234:	21 95       	neg	r18
    2236:	3f 4f       	sbci	r19, 0xFF	; 255
    2238:	b9 01       	movw	r22, r18
    223a:	88 27       	eor	r24, r24
    223c:	77 fd       	sbrc	r23, 7
    223e:	80 95       	com	r24
    2240:	98 2f       	mov	r25, r24
    2242:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    2246:	26 e3       	ldi	r18, 0x36	; 54
    2248:	3d e8       	ldi	r19, 0x8D	; 141
    224a:	47 ea       	ldi	r20, 0xA7	; 167
    224c:	50 e4       	ldi	r21, 0x40	; 64
    224e:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2252:	87 ff       	sbrs	r24, 7
    2254:	3e c0       	rjmp	.+124    	; 0x22d2 <loop+0x188>
    2256:	60 91 dc 02 	lds	r22, 0x02DC
    225a:	70 91 dd 02 	lds	r23, 0x02DD
    225e:	80 91 de 02 	lds	r24, 0x02DE
    2262:	90 91 df 02 	lds	r25, 0x02DF
    2266:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__fixsfsi>
    226a:	9b 01       	movw	r18, r22
    226c:	77 ff       	sbrs	r23, 7
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <loop+0x12c>
    2270:	30 95       	com	r19
    2272:	21 95       	neg	r18
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	b9 01       	movw	r22, r18
    2278:	88 27       	eor	r24, r24
    227a:	77 fd       	sbrc	r23, 7
    227c:	80 95       	com	r24
    227e:	98 2f       	mov	r25, r24
    2280:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    2284:	26 e3       	ldi	r18, 0x36	; 54
    2286:	3d e8       	ldi	r19, 0x8D	; 141
    2288:	47 ea       	ldi	r20, 0xA7	; 167
    228a:	50 e4       	ldi	r21, 0x40	; 64
    228c:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2290:	87 ff       	sbrs	r24, 7
    2292:	1f c0       	rjmp	.+62     	; 0x22d2 <loop+0x188>
    2294:	60 91 e0 02 	lds	r22, 0x02E0
    2298:	70 91 e1 02 	lds	r23, 0x02E1
    229c:	80 91 e2 02 	lds	r24, 0x02E2
    22a0:	90 91 e3 02 	lds	r25, 0x02E3
    22a4:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__fixsfsi>
    22a8:	9b 01       	movw	r18, r22
    22aa:	77 ff       	sbrs	r23, 7
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <loop+0x16a>
    22ae:	30 95       	com	r19
    22b0:	21 95       	neg	r18
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	b9 01       	movw	r22, r18
    22b6:	88 27       	eor	r24, r24
    22b8:	77 fd       	sbrc	r23, 7
    22ba:	80 95       	com	r24
    22bc:	98 2f       	mov	r25, r24
    22be:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    22c2:	26 e3       	ldi	r18, 0x36	; 54
    22c4:	3d e8       	ldi	r19, 0x8D	; 141
    22c6:	47 ea       	ldi	r20, 0xA7	; 167
    22c8:	50 e4       	ldi	r21, 0x40	; 64
    22ca:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    22ce:	88 23       	and	r24, r24
    22d0:	3c f0       	brlt	.+14     	; 0x22e0 <loop+0x196>
    {
      gyro_sat=1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	80 93 3c 03 	sts	0x033C, r24
#if PERFORMANCE_REPORTING == 1
      gyro_sat_count++;
#endif
      digitalWrite(RED_LED_PIN,HIGH);
    22d8:	85 e0       	ldi	r24, 0x05	; 5
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
    }

	cycleCount++;
    22e0:	80 91 3a 03 	lds	r24, 0x033A
    22e4:	90 91 3b 03 	lds	r25, 0x033B
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	90 93 3b 03 	sts	0x033B, r25
    22ee:	80 93 3a 03 	sts	0x033A, r24

        // Do these things every 6th time through the main cycle
        // This section gets called every 1000/(20*6) = 8 1/3 Hz
        // doing it this way removes the need for another 'millis()' call
		// and balances the processing load across main loop cycles.
		switch (cycleCount) {
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	91 05       	cpc	r25, r1
    22f6:	19 f1       	breq	.+70     	; 0x233e <loop+0x1f4>
    22f8:	84 30       	cpi	r24, 0x04	; 4
    22fa:	91 05       	cpc	r25, r1
    22fc:	30 f4       	brcc	.+12     	; 0x230a <loop+0x1c0>
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	59 f0       	breq	.+22     	; 0x2318 <loop+0x1ce>
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	09 f0       	breq	.+2      	; 0x2308 <loop+0x1be>
    2306:	90 c0       	rjmp	.+288    	; 0x2428 <loop+0x2de>
    2308:	0c c0       	rjmp	.+24     	; 0x2322 <loop+0x1d8>
    230a:	84 30       	cpi	r24, 0x04	; 4
    230c:	91 05       	cpc	r25, r1
    230e:	61 f1       	breq	.+88     	; 0x2368 <loop+0x21e>
    2310:	05 97       	sbiw	r24, 0x05	; 5
    2312:	09 f0       	breq	.+2      	; 0x2316 <loop+0x1cc>
    2314:	89 c0       	rjmp	.+274    	; 0x2428 <loop+0x2de>
    2316:	82 c0       	rjmp	.+260    	; 0x241c <loop+0x2d2>
			case(0):
				GPS.update();
    2318:	86 e9       	ldi	r24, 0x96	; 150
    231a:	93 e0       	ldi	r25, 0x03	; 3
    231c:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZN3GPS6updateEv>
    2320:	83 c0       	rjmp	.+262    	; 0x2428 <loop+0x2de>
				break;

			case(1):
				//Here we will check if we are getting a signal to ground start
				if(digitalRead(GROUNDSTART_PIN) == LOW && groundstartDone == false)
    2322:	88 e0       	ldi	r24, 0x08	; 8
    2324:	0e 94 40 23 	call	0x4680	; 0x4680 <digitalRead>
    2328:	89 2b       	or	r24, r25
    232a:	09 f0       	breq	.+2      	; 0x232e <loop+0x1e4>
    232c:	7d c0       	rjmp	.+250    	; 0x2428 <loop+0x2de>
    232e:	80 91 8b 02 	lds	r24, 0x028B
    2332:	88 23       	and	r24, r24
    2334:	09 f0       	breq	.+2      	; 0x2338 <loop+0x1ee>
    2336:	78 c0       	rjmp	.+240    	; 0x2428 <loop+0x2de>
					startup_ground();
    2338:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_Z14startup_groundv>
    233c:	75 c0       	rjmp	.+234    	; 0x2428 <loop+0x2de>
                                  #if BOARD_VERSION < 3
				    APM_Compass.Read();     // Read magnetometer
				    APM_Compass.Calculate(roll,pitch);  // Calculate heading
                                  #endif
                                  #if BOARD_VERSION == 3
                                    HMC5883_read();                   // Read magnetometer
    233e:	0e 94 11 19 	call	0x3222	; 0x3222 <_Z12HMC5883_readv>
                                    HMC5883_calculate(roll, pitch);   // Calculate heading
    2342:	60 91 14 03 	lds	r22, 0x0314
    2346:	70 91 15 03 	lds	r23, 0x0315
    234a:	80 91 16 03 	lds	r24, 0x0316
    234e:	90 91 17 03 	lds	r25, 0x0317
    2352:	20 91 18 03 	lds	r18, 0x0318
    2356:	30 91 19 03 	lds	r19, 0x0319
    235a:	40 91 1a 03 	lds	r20, 0x031A
    235e:	50 91 1b 03 	lds	r21, 0x031B
    2362:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_Z17HMC5883_calculateff>
    2366:	60 c0       	rjmp	.+192    	; 0x2428 <loop+0x2de>
				break;

			case(4):
				// Display Status on LEDs
				// GYRO Saturation indication
				if(gyro_sat>=1) {
    2368:	80 91 3c 03 	lds	r24, 0x033C
    236c:	88 23       	and	r24, r24
    236e:	79 f0       	breq	.+30     	; 0x238e <loop+0x244>
					digitalWrite(RED_LED_PIN,HIGH); //Turn Red LED when gyro is saturated.
    2370:	85 e0       	ldi	r24, 0x05	; 5
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
					if(gyro_sat>=8)  // keep the LED on for 8/10ths of a second
    2378:	80 91 3c 03 	lds	r24, 0x033C
    237c:	88 30       	cpi	r24, 0x08	; 8
    237e:	18 f0       	brcs	.+6      	; 0x2386 <loop+0x23c>
						gyro_sat=0;
    2380:	10 92 3c 03 	sts	0x033C, r1
    2384:	08 c0       	rjmp	.+16     	; 0x2396 <loop+0x24c>
					else
						gyro_sat++;
    2386:	8f 5f       	subi	r24, 0xFF	; 255
    2388:	80 93 3c 03 	sts	0x033C, r24
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <loop+0x24c>
				} else {
					digitalWrite(RED_LED_PIN,LOW);
    238e:	85 e0       	ldi	r24, 0x05	; 5
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
				}

				// YAW drift correction indication
				if(GPS.ground_speed<SPEEDFILT*100) {
    2396:	80 91 ae 03 	lds	r24, 0x03AE
    239a:	90 91 af 03 	lds	r25, 0x03AF
    239e:	a0 91 b0 03 	lds	r26, 0x03B0
    23a2:	b0 91 b1 03 	lds	r27, 0x03B1
    23a6:	88 3c       	cpi	r24, 0xC8	; 200
    23a8:	91 05       	cpc	r25, r1
    23aa:	a1 05       	cpc	r26, r1
    23ac:	b1 05       	cpc	r27, r1
    23ae:	1c f4       	brge	.+6      	; 0x23b6 <loop+0x26c>
					digitalWrite(YELLOW_LED_PIN,HIGH);    //  Turn on yellow LED if speed too slow and yaw correction supressed
    23b0:	85 e0       	ldi	r24, 0x05	; 5
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <loop+0x270>
				} else {
					digitalWrite(YELLOW_LED_PIN,LOW);
    23b6:	85 e0       	ldi	r24, 0x05	; 5
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
				}

				// GPS Fix indication
                                switch (GPS.status()) {
    23be:	80 91 d3 03 	lds	r24, 0x03D3
    23c2:	90 91 d4 03 	lds	r25, 0x03D4
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	91 05       	cpc	r25, r1
    23ca:	29 f0       	breq	.+10     	; 0x23d6 <loop+0x28c>
    23cc:	02 97       	sbiw	r24, 0x02	; 2
    23ce:	09 f5       	brne	.+66     	; 0x2412 <loop+0x2c8>
                                        case(2):
					      digitalWrite(BLUE_LED_PIN,HIGH);  //Turn Blue LED when gps is fixed.
    23d0:	86 e0       	ldi	r24, 0x06	; 6
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	20 c0       	rjmp	.+64     	; 0x2416 <loop+0x2cc>
                                              break;

                                        case(1):
                                              if (GPS.valid_read == true){
    23d6:	80 91 bf 03 	lds	r24, 0x03BF
    23da:	88 23       	and	r24, r24
    23dc:	29 f1       	breq	.+74     	; 0x2428 <loop+0x2de>
                                                    toggleMode = abs(toggleMode-1); // Toggle blue light on and off to indicate NMEA sentences exist, but no GPS fix lock
    23de:	80 91 20 03 	lds	r24, 0x0320
    23e2:	90 91 21 03 	lds	r25, 0x0321
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	97 ff       	sbrs	r25, 7
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <loop+0x2a8>
    23ec:	90 95       	com	r25
    23ee:	81 95       	neg	r24
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	90 93 21 03 	sts	0x0321, r25
    23f6:	80 93 20 03 	sts	0x0320, r24
                                                    if (toggleMode==0){
    23fa:	89 2b       	or	r24, r25
    23fc:	19 f4       	brne	.+6      	; 0x2404 <loop+0x2ba>
                                                          digitalWrite(BLUE_LED_PIN, LOW); // Blue light off
    23fe:	86 e0       	ldi	r24, 0x06	; 6
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <loop+0x2be>
                                                    } else {
                                                          digitalWrite(BLUE_LED_PIN, HIGH); // Blue light on
    2404:	86 e0       	ldi	r24, 0x06	; 6
    2406:	61 e0       	ldi	r22, 0x01	; 1
    2408:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
                                                    }
                                                    GPS.valid_read = false;
    240c:	10 92 bf 03 	sts	0x03BF, r1
    2410:	0b c0       	rjmp	.+22     	; 0x2428 <loop+0x2de>
                                              }
                                              break;

                                        default:
                                              digitalWrite(BLUE_LED_PIN,LOW);
    2412:	86 e0       	ldi	r24, 0x06	; 6
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
    241a:	06 c0       	rjmp	.+12     	; 0x2428 <loop+0x2de>
				}
				break;

			case(5):

				cycleCount = -1;
    241c:	8f ef       	ldi	r24, 0xFF	; 255
    241e:	9f ef       	ldi	r25, 0xFF	; 255
    2420:	90 93 3b 03 	sts	0x033B, r25
    2424:	80 93 3a 03 	sts	0x033A, r24
    }
#endif

  }

}
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	08 95       	ret

00002432 <setup>:
int gyroX;
int gyroY;
int gyroZ;

//*****************************************************************************************
void setup()
    2432:	0f 93       	push	r16
    2434:	1f 93       	push	r17
{
  Serial.begin(38400, 128, 16);
    2436:	89 e7       	ldi	r24, 0x79	; 121
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	56 e9       	ldi	r21, 0x96	; 150
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	20 e8       	ldi	r18, 0x80	; 128
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	00 e1       	ldi	r16, 0x10	; 16
    2448:	10 e0       	ldi	r17, 0x00	; 0
    244a:	0e 94 61 07 	call	0xec2	; 0xec2 <_ZN10FastSerial5beginEljj>
  pinMode(SERIAL_MUX_PIN,OUTPUT); //Serial Mux
    244e:	87 e0       	ldi	r24, 0x07	; 7
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>
  if (GPS_CONNECTION == 0){
    digitalWrite(SERIAL_MUX_PIN,HIGH); //Serial Mux
    2456:	87 e0       	ldi	r24, 0x07	; 7
    2458:	61 e0       	ldi	r22, 0x01	; 1
    245a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
  } else {
    digitalWrite(SERIAL_MUX_PIN,LOW); //Serial Mux
  }

  pinMode(RED_LED_PIN,OUTPUT); //Red LED
    245e:	85 e0       	ldi	r24, 0x05	; 5
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>
  pinMode(BLUE_LED_PIN,OUTPUT); // Blue LED
    2466:	86 e0       	ldi	r24, 0x06	; 6
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>
  pinMode(YELLOW_LED_PIN,OUTPUT); // Yellow LED
    246e:	85 e0       	ldi	r24, 0x05	; 5
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>
  pinMode(GROUNDSTART_PIN,INPUT);  // Remove Before Fly flag (pin 6 on ArduPilot)
    2476:	88 e0       	ldi	r24, 0x08	; 8
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>
  digitalWrite(GROUNDSTART_PIN,HIGH);
    247e:	88 e0       	ldi	r24, 0x08	; 8
    2480:	61 e0       	ldi	r22, 0x01	; 1
    2482:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>

  #if BOARD_VERSION == 3
  MPU6000_Init();       // MPU6000 initialization
    2486:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_Z12MPU6000_Initv>
  #endif

  digitalWrite(RED_LED_PIN,HIGH);
    248a:	85 e0       	ldi	r24, 0x05	; 5
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
  delay(500);
    2492:	64 ef       	ldi	r22, 0xF4	; 244
    2494:	71 e0       	ldi	r23, 0x01	; 1
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
  digitalWrite(BLUE_LED_PIN,HIGH);
    249e:	86 e0       	ldi	r24, 0x06	; 6
    24a0:	61 e0       	ldi	r22, 0x01	; 1
    24a2:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
  delay(500);
    24a6:	64 ef       	ldi	r22, 0xF4	; 244
    24a8:	71 e0       	ldi	r23, 0x01	; 1
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
  digitalWrite(YELLOW_LED_PIN,HIGH);
    24b2:	85 e0       	ldi	r24, 0x05	; 5
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
  delay(500);
    24ba:	64 ef       	ldi	r22, 0xF4	; 244
    24bc:	71 e0       	ldi	r23, 0x01	; 1
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
  digitalWrite(RED_LED_PIN,LOW);
    24c6:	85 e0       	ldi	r24, 0x05	; 5
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
  delay(500);
    24ce:	64 ef       	ldi	r22, 0xF4	; 244
    24d0:	71 e0       	ldi	r23, 0x01	; 1
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
  digitalWrite(BLUE_LED_PIN,LOW);
    24da:	86 e0       	ldi	r24, 0x06	; 6
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
  delay(500);
    24e2:	64 ef       	ldi	r22, 0xF4	; 244
    24e4:	71 e0       	ldi	r23, 0x01	; 1
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
  digitalWrite(YELLOW_LED_PIN,LOW);
    24ee:	85 e0       	ldi	r24, 0x05	; 5
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>

  #if BOARD_VERSION == 2
  debug_print("You are using Hardware Version 2...");
  #endif

  GPS.init();			// GPS Initialization
    24f6:	86 e9       	ldi	r24, 0x96	; 150
    24f8:	93 e0       	ldi	r25, 0x03	; 3
    24fa:	6f ef       	ldi	r22, 0xFF	; 255
    24fc:	7f ef       	ldi	r23, 0xFF	; 255
    24fe:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN11AP_GPS_NMEA4initEN3GPS18GPS_Engine_SettingE>
    #if BOARD_VERSION < 3       // Support for old magnetometer (HMC5843) on ArduIMU v2
      APM_Compass.Init();	// I2C initialization
      APM_Compass.SetOrientation(APM_COMPASS_COMPONENTS_UP_PINS_RIGHT);  // Orientation for magnetometer soldered to main board
    #endif
    #if BOARD_VERSION == 3
      HMC5883_init();
    2502:	0e 94 b3 19 	call	0x3366	; 0x3366 <_Z12HMC5883_initv>
      HMC5883_set_offset(MAG_OFFSET_X,MAG_OFFSET_Y,MAG_OFFSET_Z);
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <_Z18HMC5883_set_offsetiii>
  if(ENABLE_AIR_START){
      debug_handler(1);
      startup_air();
  }else{
      debug_handler(2);
      startup_ground();
    2516:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_Z14startup_groundv>
  }


  delay(250);
    251a:	6a ef       	ldi	r22, 0xFA	; 250
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>

  Read_adc_raw();     // ADC initialization
    2526:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z12Read_adc_rawv>
  timer=millis();
    252a:	0e 94 0b 22 	call	0x4416	; 0x4416 <millis>
    252e:	60 93 83 02 	sts	0x0283, r22
    2532:	70 93 84 02 	sts	0x0284, r23
    2536:	80 93 85 02 	sts	0x0285, r24
    253a:	90 93 86 02 	sts	0x0286, r25
  delay(20);
    253e:	64 e1       	ldi	r22, 0x14	; 20
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>

}
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	08 95       	ret

00002550 <_Z12Accel_adjustv>:
  }
  
  
}
/**************************************************/
void Accel_adjust(void)
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
{
 Accel_Vector[1] += Accel_Scale((GPS.ground_speed/100)*Omega[2]);  // Centrifugal force on Acc_y = GPS ground speed (m/s) * GyroZ
    2558:	60 91 ae 03 	lds	r22, 0x03AE
    255c:	70 91 af 03 	lds	r23, 0x03AF
    2560:	80 91 b0 03 	lds	r24, 0x03B0
    2564:	90 91 b1 03 	lds	r25, 0x03B1
    2568:	24 e6       	ldi	r18, 0x64	; 100
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divmodsi4>
    2574:	ca 01       	movw	r24, r20
    2576:	b9 01       	movw	r22, r18
    2578:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    257c:	7b 01       	movw	r14, r22
    257e:	8c 01       	movw	r16, r24
    2580:	20 91 10 03 	lds	r18, 0x0310
    2584:	30 91 11 03 	lds	r19, 0x0311
    2588:	40 91 12 03 	lds	r20, 0x0312
    258c:	50 91 13 03 	lds	r21, 0x0313
    2590:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2594:	2d e3       	ldi	r18, 0x3D	; 61
    2596:	34 ec       	ldi	r19, 0xC4	; 196
    2598:	40 ed       	ldi	r20, 0xD0	; 208
    259a:	53 e4       	ldi	r21, 0x43	; 67
    259c:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    25a0:	9b 01       	movw	r18, r22
    25a2:	ac 01       	movw	r20, r24
    25a4:	60 91 d0 02 	lds	r22, 0x02D0
    25a8:	70 91 d1 02 	lds	r23, 0x02D1
    25ac:	80 91 d2 02 	lds	r24, 0x02D2
    25b0:	90 91 d3 02 	lds	r25, 0x02D3
    25b4:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    25b8:	60 93 d0 02 	sts	0x02D0, r22
    25bc:	70 93 d1 02 	sts	0x02D1, r23
    25c0:	80 93 d2 02 	sts	0x02D2, r24
    25c4:	90 93 d3 02 	sts	0x02D3, r25
 Accel_Vector[2] -= Accel_Scale((GPS.ground_speed/100)*Omega[1]);  // Centrifugal force on Acc_z = GPS ground speed (m/s) * GyroY 
    25c8:	c8 01       	movw	r24, r16
    25ca:	b7 01       	movw	r22, r14
    25cc:	20 91 0c 03 	lds	r18, 0x030C
    25d0:	30 91 0d 03 	lds	r19, 0x030D
    25d4:	40 91 0e 03 	lds	r20, 0x030E
    25d8:	50 91 0f 03 	lds	r21, 0x030F
    25dc:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    25e0:	2d e3       	ldi	r18, 0x3D	; 61
    25e2:	34 ec       	ldi	r19, 0xC4	; 196
    25e4:	40 ed       	ldi	r20, 0xD0	; 208
    25e6:	53 ec       	ldi	r21, 0xC3	; 195
    25e8:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    25ec:	9b 01       	movw	r18, r22
    25ee:	ac 01       	movw	r20, r24
    25f0:	60 91 d4 02 	lds	r22, 0x02D4
    25f4:	70 91 d5 02 	lds	r23, 0x02D5
    25f8:	80 91 d6 02 	lds	r24, 0x02D6
    25fc:	90 91 d7 02 	lds	r25, 0x02D7
    2600:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    2604:	60 93 d4 02 	sts	0x02D4, r22
    2608:	70 93 d5 02 	sts	0x02D5, r23
    260c:	80 93 d6 02 	sts	0x02D6, r24
    2610:	90 93 d7 02 	sts	0x02D7, r25
}
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	08 95       	ret

0000261e <_Z12Euler_anglesv>:
  #if (OUTPUTMODE==2)         // Only accelerometer info (debugging purposes)
    roll = 1.9*atan2(Accel_Vector[1],Accel_Vector[2]);    // atan2(acc_y,acc_z)
    pitch = -1.9*asin((Accel_Vector[0])/(double)GRAVITY); // asin(acc_x)
    yaw = 0;
  #else
    pitch = -1.9*asin(DCM_Matrix[2][0]);
    261e:	60 91 33 01 	lds	r22, 0x0133
    2622:	70 91 34 01 	lds	r23, 0x0134
    2626:	80 91 35 01 	lds	r24, 0x0135
    262a:	90 91 36 01 	lds	r25, 0x0136
    262e:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <asin>
    2632:	23 e3       	ldi	r18, 0x33	; 51
    2634:	33 e3       	ldi	r19, 0x33	; 51
    2636:	43 ef       	ldi	r20, 0xF3	; 243
    2638:	5f eb       	ldi	r21, 0xBF	; 191
    263a:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    263e:	60 93 18 03 	sts	0x0318, r22
    2642:	70 93 19 03 	sts	0x0319, r23
    2646:	80 93 1a 03 	sts	0x031A, r24
    264a:	90 93 1b 03 	sts	0x031B, r25
    roll = 1.9*atan2(DCM_Matrix[2][1],DCM_Matrix[2][2]);
    264e:	60 91 37 01 	lds	r22, 0x0137
    2652:	70 91 38 01 	lds	r23, 0x0138
    2656:	80 91 39 01 	lds	r24, 0x0139
    265a:	90 91 3a 01 	lds	r25, 0x013A
    265e:	20 91 3b 01 	lds	r18, 0x013B
    2662:	30 91 3c 01 	lds	r19, 0x013C
    2666:	40 91 3d 01 	lds	r20, 0x013D
    266a:	50 91 3e 01 	lds	r21, 0x013E
    266e:	0e 94 1e 24 	call	0x483c	; 0x483c <atan2>
    2672:	23 e3       	ldi	r18, 0x33	; 51
    2674:	33 e3       	ldi	r19, 0x33	; 51
    2676:	43 ef       	ldi	r20, 0xF3	; 243
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    267e:	60 93 14 03 	sts	0x0314, r22
    2682:	70 93 15 03 	sts	0x0315, r23
    2686:	80 93 16 03 	sts	0x0316, r24
    268a:	90 93 17 03 	sts	0x0317, r25
    yaw = atan2(DCM_Matrix[1][0],DCM_Matrix[0][0]);
    268e:	60 91 27 01 	lds	r22, 0x0127
    2692:	70 91 28 01 	lds	r23, 0x0128
    2696:	80 91 29 01 	lds	r24, 0x0129
    269a:	90 91 2a 01 	lds	r25, 0x012A
    269e:	20 91 1b 01 	lds	r18, 0x011B
    26a2:	30 91 1c 01 	lds	r19, 0x011C
    26a6:	40 91 1d 01 	lds	r20, 0x011D
    26aa:	50 91 1e 01 	lds	r21, 0x011E
    26ae:	0e 94 1e 24 	call	0x483c	; 0x483c <atan2>
    26b2:	60 93 1c 03 	sts	0x031C, r22
    26b6:	70 93 1d 03 	sts	0x031D, r23
    26ba:	80 93 1e 03 	sts	0x031E, r24
    26be:	90 93 1f 03 	sts	0x031F, r25
  #endif
}
    26c2:	08 95       	ret

000026c4 <_Z13Matrix_updatev>:
 Accel_Vector[1] += Accel_Scale((GPS.ground_speed/100)*Omega[2]);  // Centrifugal force on Acc_y = GPS ground speed (m/s) * GyroZ
 Accel_Vector[2] -= Accel_Scale((GPS.ground_speed/100)*Omega[1]);  // Centrifugal force on Acc_z = GPS ground speed (m/s) * GyroY 
}
/**************************************************/

void Matrix_update(void)
    26c4:	2f 92       	push	r2
    26c6:	3f 92       	push	r3
    26c8:	4f 92       	push	r4
    26ca:	5f 92       	push	r5
    26cc:	6f 92       	push	r6
    26ce:	7f 92       	push	r7
    26d0:	8f 92       	push	r8
    26d2:	9f 92       	push	r9
    26d4:	af 92       	push	r10
    26d6:	bf 92       	push	r11
    26d8:	cf 92       	push	r12
    26da:	df 92       	push	r13
    26dc:	ef 92       	push	r14
    26de:	ff 92       	push	r15
    26e0:	0f 93       	push	r16
    26e2:	1f 93       	push	r17
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <_Z13Matrix_updatev+0x26>
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <_Z13Matrix_updatev+0x28>
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
{
  Gyro_Vector[0]=Gyro_Scaled_X(read_adc(0)); //gyro x roll
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z8read_adci>
    26f8:	21 e3       	ldi	r18, 0x31	; 49
    26fa:	31 e5       	ldi	r19, 0x51	; 81
    26fc:	4b e8       	ldi	r20, 0x8B	; 139
    26fe:	5a e3       	ldi	r21, 0x3A	; 58
    2700:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2704:	60 93 d8 02 	sts	0x02D8, r22
    2708:	70 93 d9 02 	sts	0x02D9, r23
    270c:	80 93 da 02 	sts	0x02DA, r24
    2710:	90 93 db 02 	sts	0x02DB, r25
  Gyro_Vector[1]=Gyro_Scaled_Y(read_adc(1)); //gyro y pitch
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z8read_adci>
    271c:	21 e3       	ldi	r18, 0x31	; 49
    271e:	31 e5       	ldi	r19, 0x51	; 81
    2720:	4b e8       	ldi	r20, 0x8B	; 139
    2722:	5a e3       	ldi	r21, 0x3A	; 58
    2724:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2728:	60 93 dc 02 	sts	0x02DC, r22
    272c:	70 93 dd 02 	sts	0x02DD, r23
    2730:	80 93 de 02 	sts	0x02DE, r24
    2734:	90 93 df 02 	sts	0x02DF, r25
  Gyro_Vector[2]=Gyro_Scaled_Z(read_adc(2)); //gyro Z yaw
    2738:	82 e0       	ldi	r24, 0x02	; 2
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z8read_adci>
    2740:	21 e3       	ldi	r18, 0x31	; 49
    2742:	31 e5       	ldi	r19, 0x51	; 81
    2744:	4b e8       	ldi	r20, 0x8B	; 139
    2746:	5a e3       	ldi	r21, 0x3A	; 58
    2748:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    274c:	60 93 e0 02 	sts	0x02E0, r22
    2750:	70 93 e1 02 	sts	0x02E1, r23
    2754:	80 93 e2 02 	sts	0x02E2, r24
    2758:	90 93 e3 02 	sts	0x02E3, r25
  
  Accel_Vector[0]=read_adc(3); // acc x
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z8read_adci>
    2764:	60 93 cc 02 	sts	0x02CC, r22
    2768:	70 93 cd 02 	sts	0x02CD, r23
    276c:	80 93 ce 02 	sts	0x02CE, r24
    2770:	90 93 cf 02 	sts	0x02CF, r25
  Accel_Vector[1]=read_adc(4); // acc y
    2774:	84 e0       	ldi	r24, 0x04	; 4
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z8read_adci>
    277c:	60 93 d0 02 	sts	0x02D0, r22
    2780:	70 93 d1 02 	sts	0x02D1, r23
    2784:	80 93 d2 02 	sts	0x02D2, r24
    2788:	90 93 d3 02 	sts	0x02D3, r25
  Accel_Vector[2]=read_adc(5); // acc z
    278c:	85 e0       	ldi	r24, 0x05	; 5
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z8read_adci>
    2794:	60 93 d4 02 	sts	0x02D4, r22
    2798:	70 93 d5 02 	sts	0x02D5, r23
    279c:	80 93 d6 02 	sts	0x02D6, r24
    27a0:	90 93 d7 02 	sts	0x02D7, r25
  
  Vector_Add(&Omega[0], &Gyro_Vector[0], &Omega_I[0]);  //adding proportional term
    27a4:	88 e0       	ldi	r24, 0x08	; 8
    27a6:	93 e0       	ldi	r25, 0x03	; 3
    27a8:	68 ed       	ldi	r22, 0xD8	; 216
    27aa:	72 e0       	ldi	r23, 0x02	; 2
    27ac:	4c ef       	ldi	r20, 0xFC	; 252
    27ae:	52 e0       	ldi	r21, 0x02	; 2
    27b0:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_Z10Vector_AddPfS_S_>
  Vector_Add(&Omega_Vector[0], &Omega[0], &Omega_P[0]); //adding Integrator term
    27b4:	84 ee       	ldi	r24, 0xE4	; 228
    27b6:	92 e0       	ldi	r25, 0x02	; 2
    27b8:	68 e0       	ldi	r22, 0x08	; 8
    27ba:	73 e0       	ldi	r23, 0x03	; 3
    27bc:	40 ef       	ldi	r20, 0xF0	; 240
    27be:	52 e0       	ldi	r21, 0x02	; 2
    27c0:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_Z10Vector_AddPfS_S_>

  Accel_adjust();    //Remove centrifugal acceleration.
    27c4:	0e 94 a8 12 	call	0x2550	; 0x2550 <_Z12Accel_adjustv>
  
 #if OUTPUTMODE==1         
  Update_Matrix[0][0]=0;
    27c8:	0f 2e       	mov	r0, r31
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	2f 2e       	mov	r2, r31
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	3f 2e       	mov	r3, r31
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	4f 2e       	mov	r4, r31
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	5f 2e       	mov	r5, r31
    27da:	f0 2d       	mov	r31, r0
    27dc:	20 92 3f 01 	sts	0x013F, r2
    27e0:	30 92 40 01 	sts	0x0140, r3
    27e4:	40 92 41 01 	sts	0x0141, r4
    27e8:	50 92 42 01 	sts	0x0142, r5
  Update_Matrix[0][1]=-G_Dt*Omega_Vector[2];//-z
    27ec:	e0 90 13 01 	lds	r14, 0x0113
    27f0:	f0 90 14 01 	lds	r15, 0x0114
    27f4:	00 91 15 01 	lds	r16, 0x0115
    27f8:	10 91 16 01 	lds	r17, 0x0116
    27fc:	57 01       	movw	r10, r14
    27fe:	68 01       	movw	r12, r16
    2800:	d7 fa       	bst	r13, 7
    2802:	d0 94       	com	r13
    2804:	d7 f8       	bld	r13, 7
    2806:	d0 94       	com	r13
    2808:	60 90 ec 02 	lds	r6, 0x02EC
    280c:	70 90 ed 02 	lds	r7, 0x02ED
    2810:	80 90 ee 02 	lds	r8, 0x02EE
    2814:	90 90 ef 02 	lds	r9, 0x02EF
    2818:	c6 01       	movw	r24, r12
    281a:	b5 01       	movw	r22, r10
    281c:	a4 01       	movw	r20, r8
    281e:	93 01       	movw	r18, r6
    2820:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2824:	60 93 43 01 	sts	0x0143, r22
    2828:	70 93 44 01 	sts	0x0144, r23
    282c:	80 93 45 01 	sts	0x0145, r24
    2830:	90 93 46 01 	sts	0x0146, r25
  Update_Matrix[0][2]=G_Dt*Omega_Vector[1];//y
    2834:	80 91 e8 02 	lds	r24, 0x02E8
    2838:	90 91 e9 02 	lds	r25, 0x02E9
    283c:	a0 91 ea 02 	lds	r26, 0x02EA
    2840:	b0 91 eb 02 	lds	r27, 0x02EB
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	ab 83       	std	Y+3, r26	; 0x03
    284a:	bc 83       	std	Y+4, r27	; 0x04
    284c:	c8 01       	movw	r24, r16
    284e:	b7 01       	movw	r22, r14
    2850:	29 81       	ldd	r18, Y+1	; 0x01
    2852:	3a 81       	ldd	r19, Y+2	; 0x02
    2854:	4b 81       	ldd	r20, Y+3	; 0x03
    2856:	5c 81       	ldd	r21, Y+4	; 0x04
    2858:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    285c:	60 93 47 01 	sts	0x0147, r22
    2860:	70 93 48 01 	sts	0x0148, r23
    2864:	80 93 49 01 	sts	0x0149, r24
    2868:	90 93 4a 01 	sts	0x014A, r25
  Update_Matrix[1][0]=G_Dt*Omega_Vector[2];//z
    286c:	c8 01       	movw	r24, r16
    286e:	b7 01       	movw	r22, r14
    2870:	a4 01       	movw	r20, r8
    2872:	93 01       	movw	r18, r6
    2874:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2878:	60 93 4b 01 	sts	0x014B, r22
    287c:	70 93 4c 01 	sts	0x014C, r23
    2880:	80 93 4d 01 	sts	0x014D, r24
    2884:	90 93 4e 01 	sts	0x014E, r25
  Update_Matrix[1][1]=0;
    2888:	20 92 4f 01 	sts	0x014F, r2
    288c:	30 92 50 01 	sts	0x0150, r3
    2890:	40 92 51 01 	sts	0x0151, r4
    2894:	50 92 52 01 	sts	0x0152, r5
  Update_Matrix[1][2]=-G_Dt*Omega_Vector[0];//-x
    2898:	60 90 e4 02 	lds	r6, 0x02E4
    289c:	70 90 e5 02 	lds	r7, 0x02E5
    28a0:	80 90 e6 02 	lds	r8, 0x02E6
    28a4:	90 90 e7 02 	lds	r9, 0x02E7
    28a8:	c6 01       	movw	r24, r12
    28aa:	b5 01       	movw	r22, r10
    28ac:	a4 01       	movw	r20, r8
    28ae:	93 01       	movw	r18, r6
    28b0:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    28b4:	60 93 53 01 	sts	0x0153, r22
    28b8:	70 93 54 01 	sts	0x0154, r23
    28bc:	80 93 55 01 	sts	0x0155, r24
    28c0:	90 93 56 01 	sts	0x0156, r25
  Update_Matrix[2][0]=-G_Dt*Omega_Vector[1];//-y
    28c4:	c6 01       	movw	r24, r12
    28c6:	b5 01       	movw	r22, r10
    28c8:	29 81       	ldd	r18, Y+1	; 0x01
    28ca:	3a 81       	ldd	r19, Y+2	; 0x02
    28cc:	4b 81       	ldd	r20, Y+3	; 0x03
    28ce:	5c 81       	ldd	r21, Y+4	; 0x04
    28d0:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    28d4:	60 93 57 01 	sts	0x0157, r22
    28d8:	70 93 58 01 	sts	0x0158, r23
    28dc:	80 93 59 01 	sts	0x0159, r24
    28e0:	90 93 5a 01 	sts	0x015A, r25
  Update_Matrix[2][1]=G_Dt*Omega_Vector[0];//x
    28e4:	c8 01       	movw	r24, r16
    28e6:	b7 01       	movw	r22, r14
    28e8:	a4 01       	movw	r20, r8
    28ea:	93 01       	movw	r18, r6
    28ec:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    28f0:	60 93 5b 01 	sts	0x015B, r22
    28f4:	70 93 5c 01 	sts	0x015C, r23
    28f8:	80 93 5d 01 	sts	0x015D, r24
    28fc:	90 93 5e 01 	sts	0x015E, r25
  Update_Matrix[2][2]=0;
    2900:	20 92 5f 01 	sts	0x015F, r2
    2904:	30 92 60 01 	sts	0x0160, r3
    2908:	40 92 61 01 	sts	0x0161, r4
    290c:	50 92 62 01 	sts	0x0162, r5
  Update_Matrix[2][0]=-G_Dt*Gyro_Vector[1];
  Update_Matrix[2][1]=G_Dt*Gyro_Vector[0];
  Update_Matrix[2][2]=0;
 #endif

  Matrix_Multiply(DCM_Matrix,Update_Matrix,Temporary_Matrix); //a*b=c
    2910:	8b e1       	ldi	r24, 0x1B	; 27
    2912:	91 e0       	ldi	r25, 0x01	; 1
    2914:	6f e3       	ldi	r22, 0x3F	; 63
    2916:	71 e0       	ldi	r23, 0x01	; 1
    2918:	4d e3       	ldi	r20, 0x3D	; 61
    291a:	53 e0       	ldi	r21, 0x03	; 3
    291c:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <_Z15Matrix_MultiplyPA3_fS0_S0_>
    2920:	8b e1       	ldi	r24, 0x1B	; 27
    2922:	e8 2e       	mov	r14, r24
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	f8 2e       	mov	r15, r24
    2928:	0d e3       	ldi	r16, 0x3D	; 61
    292a:	13 e0       	ldi	r17, 0x03	; 3

  for(int x=0; x<3; x++) //Matrix Addition (update)
  {
    for(int y=0; y<3; y++)
    {
      DCM_Matrix[x][y]+=Temporary_Matrix[x][y];
    292c:	d7 01       	movw	r26, r14
    292e:	6d 91       	ld	r22, X+
    2930:	7d 91       	ld	r23, X+
    2932:	8d 91       	ld	r24, X+
    2934:	9c 91       	ld	r25, X
    2936:	f8 01       	movw	r30, r16
    2938:	20 81       	ld	r18, Z
    293a:	31 81       	ldd	r19, Z+1	; 0x01
    293c:	42 81       	ldd	r20, Z+2	; 0x02
    293e:	53 81       	ldd	r21, Z+3	; 0x03
    2940:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    2944:	d7 01       	movw	r26, r14
    2946:	6d 93       	st	X+, r22
    2948:	7d 93       	st	X+, r23
    294a:	8d 93       	st	X+, r24
    294c:	9c 93       	st	X, r25
    294e:	13 97       	sbiw	r26, 0x03	; 3
    2950:	14 96       	adiw	r26, 0x04	; 4
    2952:	6d 91       	ld	r22, X+
    2954:	7d 91       	ld	r23, X+
    2956:	8d 91       	ld	r24, X+
    2958:	9c 91       	ld	r25, X
    295a:	17 97       	sbiw	r26, 0x07	; 7
    295c:	f8 01       	movw	r30, r16
    295e:	24 81       	ldd	r18, Z+4	; 0x04
    2960:	35 81       	ldd	r19, Z+5	; 0x05
    2962:	46 81       	ldd	r20, Z+6	; 0x06
    2964:	57 81       	ldd	r21, Z+7	; 0x07
    2966:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    296a:	d7 01       	movw	r26, r14
    296c:	14 96       	adiw	r26, 0x04	; 4
    296e:	6d 93       	st	X+, r22
    2970:	7d 93       	st	X+, r23
    2972:	8d 93       	st	X+, r24
    2974:	9c 93       	st	X, r25
    2976:	17 97       	sbiw	r26, 0x07	; 7
    2978:	18 96       	adiw	r26, 0x08	; 8
    297a:	6d 91       	ld	r22, X+
    297c:	7d 91       	ld	r23, X+
    297e:	8d 91       	ld	r24, X+
    2980:	9c 91       	ld	r25, X
    2982:	1b 97       	sbiw	r26, 0x0b	; 11
    2984:	f8 01       	movw	r30, r16
    2986:	20 85       	ldd	r18, Z+8	; 0x08
    2988:	31 85       	ldd	r19, Z+9	; 0x09
    298a:	42 85       	ldd	r20, Z+10	; 0x0a
    298c:	53 85       	ldd	r21, Z+11	; 0x0b
    298e:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    2992:	d7 01       	movw	r26, r14
    2994:	18 96       	adiw	r26, 0x08	; 8
    2996:	6d 93       	st	X+, r22
    2998:	7d 93       	st	X+, r23
    299a:	8d 93       	st	X+, r24
    299c:	9c 93       	st	X, r25
    299e:	1b 97       	sbiw	r26, 0x0b	; 11
    29a0:	ec e0       	ldi	r30, 0x0C	; 12
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	ee 0e       	add	r14, r30
    29a6:	ff 1e       	adc	r15, r31
    29a8:	04 5f       	subi	r16, 0xF4	; 244
    29aa:	1f 4f       	sbci	r17, 0xFF	; 255
  Update_Matrix[2][2]=0;
 #endif

  Matrix_Multiply(DCM_Matrix,Update_Matrix,Temporary_Matrix); //a*b=c

  for(int x=0; x<3; x++) //Matrix Addition (update)
    29ac:	ff e3       	ldi	r31, 0x3F	; 63
    29ae:	ef 16       	cp	r14, r31
    29b0:	f1 e0       	ldi	r31, 0x01	; 1
    29b2:	ff 06       	cpc	r15, r31
    29b4:	09 f0       	breq	.+2      	; 0x29b8 <_Z13Matrix_updatev+0x2f4>
    29b6:	ba cf       	rjmp	.-140    	; 0x292c <_Z13Matrix_updatev+0x268>
    for(int y=0; y<3; y++)
    {
      DCM_Matrix[x][y]+=Temporary_Matrix[x][y];
    } 
  }
}
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	ff 90       	pop	r15
    29ca:	ef 90       	pop	r14
    29cc:	df 90       	pop	r13
    29ce:	cf 90       	pop	r12
    29d0:	bf 90       	pop	r11
    29d2:	af 90       	pop	r10
    29d4:	9f 90       	pop	r9
    29d6:	8f 90       	pop	r8
    29d8:	7f 90       	pop	r7
    29da:	6f 90       	pop	r6
    29dc:	5f 90       	pop	r5
    29de:	4f 90       	pop	r4
    29e0:	3f 90       	pop	r3
    29e2:	2f 90       	pop	r2
    29e4:	08 95       	ret

000029e6 <_Z16Drift_correctionv>:
      problem = FALSE;  
  }
}

/**************************************************/
void Drift_correction(void)
    29e6:	6f 92       	push	r6
    29e8:	7f 92       	push	r7
    29ea:	8f 92       	push	r8
    29ec:	9f 92       	push	r9
    29ee:	af 92       	push	r10
    29f0:	bf 92       	push	r11
    29f2:	cf 92       	push	r12
    29f4:	df 92       	push	r13
    29f6:	ef 92       	push	r14
    29f8:	ff 92       	push	r15
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
  float tempfloat;
  
  //*****Roll and Pitch***************

  // Calculate the magnitude of the accelerometer vector
  Accel_magnitude = sqrt(Accel_Vector[0]*Accel_Vector[0] + Accel_Vector[1]*Accel_Vector[1] + Accel_Vector[2]*Accel_Vector[2]);
    29fe:	20 91 cc 02 	lds	r18, 0x02CC
    2a02:	30 91 cd 02 	lds	r19, 0x02CD
    2a06:	40 91 ce 02 	lds	r20, 0x02CE
    2a0a:	50 91 cf 02 	lds	r21, 0x02CF
    2a0e:	e0 90 d0 02 	lds	r14, 0x02D0
    2a12:	f0 90 d1 02 	lds	r15, 0x02D1
    2a16:	00 91 d2 02 	lds	r16, 0x02D2
    2a1a:	10 91 d3 02 	lds	r17, 0x02D3
    2a1e:	60 90 d4 02 	lds	r6, 0x02D4
    2a22:	70 90 d5 02 	lds	r7, 0x02D5
    2a26:	80 90 d6 02 	lds	r8, 0x02D6
    2a2a:	90 90 d7 02 	lds	r9, 0x02D7
    2a2e:	ca 01       	movw	r24, r20
    2a30:	b9 01       	movw	r22, r18
    2a32:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2a36:	5b 01       	movw	r10, r22
    2a38:	6c 01       	movw	r12, r24
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	a8 01       	movw	r20, r16
    2a40:	97 01       	movw	r18, r14
    2a42:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2a46:	9b 01       	movw	r18, r22
    2a48:	ac 01       	movw	r20, r24
    2a4a:	c6 01       	movw	r24, r12
    2a4c:	b5 01       	movw	r22, r10
    2a4e:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    2a52:	7b 01       	movw	r14, r22
    2a54:	8c 01       	movw	r16, r24
    2a56:	c4 01       	movw	r24, r8
    2a58:	b3 01       	movw	r22, r6
    2a5a:	a4 01       	movw	r20, r8
    2a5c:	93 01       	movw	r18, r6
    2a5e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2a62:	9b 01       	movw	r18, r22
    2a64:	ac 01       	movw	r20, r24
    2a66:	c8 01       	movw	r24, r16
    2a68:	b7 01       	movw	r22, r14
    2a6a:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    2a6e:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <sqrt>
  Accel_magnitude = Accel_magnitude / GRAVITY; // Scale to gravity.
  // Dynamic weighting of accelerometer info (reliability filter)
  // Weight for accelerometer info (<0.5G = 0.0, 1G = 1.0 , >1.5G = 0.0)
  Accel_weight = constrain(1 - 2*abs(1 - Accel_magnitude),0,1);  //  
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	59 e3       	ldi	r21, 0x39	; 57
    2a7a:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2a7e:	9b 01       	movw	r18, r22
    2a80:	ac 01       	movw	r20, r24
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	80 e8       	ldi	r24, 0x80	; 128
    2a88:	9f e3       	ldi	r25, 0x3F	; 63
    2a8a:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    2a8e:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__fixsfsi>
    2a92:	cb 01       	movw	r24, r22
    2a94:	77 ff       	sbrs	r23, 7
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <_Z16Drift_correctionv+0xb8>
    2a98:	90 95       	com	r25
    2a9a:	81 95       	neg	r24
    2a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	22 27       	eor	r18, r18
    2aa4:	33 27       	eor	r19, r19
    2aa6:	28 1b       	sub	r18, r24
    2aa8:	39 0b       	sbc	r19, r25
    2aaa:	8f ef       	ldi	r24, 0xFF	; 255
    2aac:	2f 3f       	cpi	r18, 0xFF	; 255
    2aae:	38 07       	cpc	r19, r24
    2ab0:	5c f4       	brge	.+22     	; 0x2ac8 <_Z16Drift_correctionv+0xe2>
    2ab2:	0f 2e       	mov	r0, r31
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	ef 2e       	mov	r14, r31
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	ff 2e       	mov	r15, r31
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	0f 2f       	mov	r16, r31
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	1f 2f       	mov	r17, r31
    2ac4:	f0 2d       	mov	r31, r0
    2ac6:	0b c0       	rjmp	.+22     	; 0x2ade <_Z16Drift_correctionv+0xf8>
    2ac8:	2f 5f       	subi	r18, 0xFF	; 255
    2aca:	3f 4f       	sbci	r19, 0xFF	; 255
    2acc:	b9 01       	movw	r22, r18
    2ace:	88 27       	eor	r24, r24
    2ad0:	77 fd       	sbrc	r23, 7
    2ad2:	80 95       	com	r24
    2ad4:	98 2f       	mov	r25, r24
    2ad6:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    2ada:	7b 01       	movw	r14, r22
    2adc:	8c 01       	movw	r16, r24
    tempfloat = ((Accel_weight - 0.5) * 256.0f);    //amount added was determined to give imu_health a time constant about twice the time constant of the roll/pitch drift correction
    imu_health += tempfloat;
    imu_health = constrain(imu_health,129,65405);
  #endif
  
  Vector_Cross_Product(&errorRollPitch[0],&Accel_Vector[0],&DCM_Matrix[2][0]); //adjust the ground of reference
    2ade:	82 e2       	ldi	r24, 0x22	; 34
    2ae0:	93 e0       	ldi	r25, 0x03	; 3
    2ae2:	6c ec       	ldi	r22, 0xCC	; 204
    2ae4:	72 e0       	ldi	r23, 0x02	; 2
    2ae6:	43 e3       	ldi	r20, 0x33	; 51
    2ae8:	51 e0       	ldi	r21, 0x01	; 1
    2aea:	0e 94 98 1c 	call	0x3930	; 0x3930 <_Z20Vector_Cross_ProductPfS_S_>
  Vector_Scale(&Omega_P[0],&errorRollPitch[0],Kp_ROLLPITCH*Accel_weight);
    2aee:	c8 01       	movw	r24, r16
    2af0:	b7 01       	movw	r22, r14
    2af2:	2f e8       	ldi	r18, 0x8F	; 143
    2af4:	32 ec       	ldi	r19, 0xC2	; 194
    2af6:	45 e7       	ldi	r20, 0x75	; 117
    2af8:	5c e3       	ldi	r21, 0x3C	; 60
    2afa:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2afe:	9b 01       	movw	r18, r22
    2b00:	ac 01       	movw	r20, r24
    2b02:	80 ef       	ldi	r24, 0xF0	; 240
    2b04:	92 e0       	ldi	r25, 0x02	; 2
    2b06:	62 e2       	ldi	r22, 0x22	; 34
    2b08:	73 e0       	ldi	r23, 0x03	; 3
    2b0a:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
  
  Vector_Scale(&Scaled_Omega_I[0],&errorRollPitch[0],Ki_ROLLPITCH*Accel_weight);
    2b0e:	c8 01       	movw	r24, r16
    2b10:	b7 01       	movw	r22, r14
    2b12:	2c ea       	ldi	r18, 0xAC	; 172
    2b14:	35 ec       	ldi	r19, 0xC5	; 197
    2b16:	47 e2       	ldi	r20, 0x27	; 39
    2b18:	57 e3       	ldi	r21, 0x37	; 55
    2b1a:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2b1e:	9b 01       	movw	r18, r22
    2b20:	ac 01       	movw	r20, r24
    2b22:	8e e2       	ldi	r24, 0x2E	; 46
    2b24:	94 e0       	ldi	r25, 0x04	; 4
    2b26:	62 e2       	ldi	r22, 0x22	; 34
    2b28:	73 e0       	ldi	r23, 0x03	; 3
    2b2a:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
  Vector_Add(Omega_I,Omega_I,Scaled_Omega_I);     
    2b2e:	8c ef       	ldi	r24, 0xFC	; 252
    2b30:	92 e0       	ldi	r25, 0x02	; 2
    2b32:	bc 01       	movw	r22, r24
    2b34:	4e e2       	ldi	r20, 0x2E	; 46
    2b36:	54 e0       	ldi	r21, 0x04	; 4
    2b38:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_Z10Vector_AddPfS_S_>
    // We make the gyro YAW drift correction based on compass magnetic heading
    #if BOARD_VERSION < 3
    errorCourse=(DCM_Matrix[0][0]*APM_Compass.Heading_Y) - (DCM_Matrix[1][0]*APM_Compass.Heading_X);  //Calculating YAW error
    #endif
    #if BOARD_VERSION == 3
    errorCourse=(DCM_Matrix[0][0]*Heading_Y) - (DCM_Matrix[1][0]*Heading_X);  //Calculating YAW error
    2b3c:	60 91 1b 01 	lds	r22, 0x011B
    2b40:	70 91 1c 01 	lds	r23, 0x011C
    2b44:	80 91 1d 01 	lds	r24, 0x011D
    2b48:	90 91 1e 01 	lds	r25, 0x011E
    2b4c:	20 91 75 03 	lds	r18, 0x0375
    2b50:	30 91 76 03 	lds	r19, 0x0376
    2b54:	40 91 77 03 	lds	r20, 0x0377
    2b58:	50 91 78 03 	lds	r21, 0x0378
    2b5c:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2b60:	7b 01       	movw	r14, r22
    2b62:	8c 01       	movw	r16, r24
    2b64:	60 91 27 01 	lds	r22, 0x0127
    2b68:	70 91 28 01 	lds	r23, 0x0128
    2b6c:	80 91 29 01 	lds	r24, 0x0129
    2b70:	90 91 2a 01 	lds	r25, 0x012A
    2b74:	20 91 71 03 	lds	r18, 0x0371
    2b78:	30 91 72 03 	lds	r19, 0x0372
    2b7c:	40 91 73 03 	lds	r20, 0x0373
    2b80:	50 91 74 03 	lds	r21, 0x0374
    2b84:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2b88:	9b 01       	movw	r18, r22
    2b8a:	ac 01       	movw	r20, r24
    2b8c:	c8 01       	movw	r24, r16
    2b8e:	b7 01       	movw	r22, r14
    2b90:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    2b94:	9b 01       	movw	r18, r22
    2b96:	ac 01       	movw	r20, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	da 01       	movw	r26, r20
    2b9c:	80 93 17 01 	sts	0x0117, r24
    2ba0:	90 93 18 01 	sts	0x0118, r25
    2ba4:	a0 93 19 01 	sts	0x0119, r26
    2ba8:	b0 93 1a 01 	sts	0x011A, r27
    #endif
    Vector_Scale(errorYaw,&DCM_Matrix[2][0],errorCourse); //Applys the yaw correction to the XYZ rotation of the aircraft, depeding the position.
    2bac:	8e e2       	ldi	r24, 0x2E	; 46
    2bae:	93 e0       	ldi	r25, 0x03	; 3
    2bb0:	63 e3       	ldi	r22, 0x33	; 51
    2bb2:	71 e0       	ldi	r23, 0x01	; 1
    2bb4:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
    
    Vector_Scale(&Scaled_Omega_P[0],&errorYaw[0],Kp_YAW);
    2bb8:	8a e3       	ldi	r24, 0x3A	; 58
    2bba:	94 e0       	ldi	r25, 0x04	; 4
    2bbc:	6e e2       	ldi	r22, 0x2E	; 46
    2bbe:	73 e0       	ldi	r23, 0x03	; 3
    2bc0:	2a e9       	ldi	r18, 0x9A	; 154
    2bc2:	39 e9       	ldi	r19, 0x99	; 153
    2bc4:	49 e9       	ldi	r20, 0x99	; 153
    2bc6:	5f e3       	ldi	r21, 0x3F	; 63
    2bc8:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
    Vector_Add(Omega_P,Omega_P,Scaled_Omega_P);//Adding  Proportional.
    2bcc:	80 ef       	ldi	r24, 0xF0	; 240
    2bce:	92 e0       	ldi	r25, 0x02	; 2
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	4a e3       	ldi	r20, 0x3A	; 58
    2bd4:	54 e0       	ldi	r21, 0x04	; 4
    2bd6:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_Z10Vector_AddPfS_S_>
    
    Vector_Scale(&Scaled_Omega_I[0],&errorYaw[0],Ki_YAW);
    2bda:	8e e2       	ldi	r24, 0x2E	; 46
    2bdc:	94 e0       	ldi	r25, 0x04	; 4
    2bde:	6e e2       	ldi	r22, 0x2E	; 46
    2be0:	73 e0       	ldi	r23, 0x03	; 3
    2be2:	27 e1       	ldi	r18, 0x17	; 23
    2be4:	37 eb       	ldi	r19, 0xB7	; 183
    2be6:	41 e5       	ldi	r20, 0x51	; 81
    2be8:	58 e3       	ldi	r21, 0x38	; 56
    2bea:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
    Vector_Add(Omega_I,Omega_I,Scaled_Omega_I);//adding integrator to the Omega_I   
    2bee:	8c ef       	ldi	r24, 0xFC	; 252
    2bf0:	92 e0       	ldi	r25, 0x02	; 2
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	4e e2       	ldi	r20, 0x2E	; 46
    2bf6:	54 e0       	ldi	r21, 0x04	; 4
    2bf8:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_Z10Vector_AddPfS_S_>
    Vector_Scale(&Scaled_Omega_I[0],&errorYaw[0],Ki_YAW);
    Vector_Add(Omega_I,Omega_I,Scaled_Omega_I);//adding integrator to the Omega_I   
  }
  #endif
  //  Here we will place a limit on the integrator so that the integrator cannot ever exceed half the saturation limit of the gyros
  Integrator_magnitude = sqrt(Vector_Dot_Product(Omega_I,Omega_I));
    2bfc:	8c ef       	ldi	r24, 0xFC	; 252
    2bfe:	92 e0       	ldi	r25, 0x02	; 2
    2c00:	bc 01       	movw	r22, r24
    2c02:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z18Vector_Dot_ProductPfS_>
    2c06:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <sqrt>
    2c0a:	7b 01       	movw	r14, r22
    2c0c:	8c 01       	movw	r16, r24
  if (Integrator_magnitude > ToRad(300)) {
    2c0e:	26 e3       	ldi	r18, 0x36	; 54
    2c10:	3d e8       	ldi	r19, 0x8D	; 141
    2c12:	47 ea       	ldi	r20, 0xA7	; 167
    2c14:	50 e4       	ldi	r21, 0x40	; 64
    2c16:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2c1a:	18 16       	cp	r1, r24
    2c1c:	7c f4       	brge	.+30     	; 0x2c3c <_Z16Drift_correctionv+0x256>
    Vector_Scale(Omega_I,Omega_I,0.5f*ToRad(300)/Integrator_magnitude);
    2c1e:	66 e3       	ldi	r22, 0x36	; 54
    2c20:	7d e8       	ldi	r23, 0x8D	; 141
    2c22:	87 e2       	ldi	r24, 0x27	; 39
    2c24:	90 e4       	ldi	r25, 0x40	; 64
    2c26:	a8 01       	movw	r20, r16
    2c28:	97 01       	movw	r18, r14
    2c2a:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__divsf3>
    2c2e:	9b 01       	movw	r18, r22
    2c30:	ac 01       	movw	r20, r24
    2c32:	8c ef       	ldi	r24, 0xFC	; 252
    2c34:	92 e0       	ldi	r25, 0x02	; 2
    2c36:	bc 01       	movw	r22, r24
    2c38:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
    Serial.println("***");    
#endif
  }
  
  
}
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	ff 90       	pop	r15
    2c42:	ef 90       	pop	r14
    2c44:	df 90       	pop	r13
    2c46:	cf 90       	pop	r12
    2c48:	bf 90       	pop	r11
    2c4a:	af 90       	pop	r10
    2c4c:	9f 90       	pop	r9
    2c4e:	8f 90       	pop	r8
    2c50:	7f 90       	pop	r7
    2c52:	6f 90       	pop	r6
    2c54:	08 95       	ret

00002c56 <_Z9Normalizev>:
#include "ArduImu_1_9_8_Modified.h"
/**************************************************/

void Normalize(void)
    2c56:	af 92       	push	r10
    2c58:	bf 92       	push	r11
    2c5a:	cf 92       	push	r12
    2c5c:	df 92       	push	r13
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	a4 97       	sbiw	r28, 0x24	; 36
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
  float error=0;
  float temporary[3][3];
  float renorm=0;
  boolean problem=FALSE;
  
  error= -Vector_Dot_Product(&DCM_Matrix[0][0],&DCM_Matrix[1][0])*.5; //eq.19
    2c7a:	8b e1       	ldi	r24, 0x1B	; 27
    2c7c:	91 e0       	ldi	r25, 0x01	; 1
    2c7e:	67 e2       	ldi	r22, 0x27	; 39
    2c80:	71 e0       	ldi	r23, 0x01	; 1
    2c82:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z18Vector_Dot_ProductPfS_>
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	5f eb       	ldi	r21, 0xBF	; 191
    2c8e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2c92:	7b 01       	movw	r14, r22
    2c94:	8c 01       	movw	r16, r24

  Vector_Scale(&temporary[0][0], &DCM_Matrix[1][0], error); //eq.19
    2c96:	5e 01       	movw	r10, r28
    2c98:	08 94       	sec
    2c9a:	a1 1c       	adc	r10, r1
    2c9c:	b1 1c       	adc	r11, r1
    2c9e:	c5 01       	movw	r24, r10
    2ca0:	67 e2       	ldi	r22, 0x27	; 39
    2ca2:	71 e0       	ldi	r23, 0x01	; 1
    2ca4:	97 01       	movw	r18, r14
    2ca6:	a8 01       	movw	r20, r16
    2ca8:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
  Vector_Scale(&temporary[1][0], &DCM_Matrix[0][0], error); //eq.19
    2cac:	3d e0       	ldi	r19, 0x0D	; 13
    2cae:	c3 2e       	mov	r12, r19
    2cb0:	d1 2c       	mov	r13, r1
    2cb2:	cc 0e       	add	r12, r28
    2cb4:	dd 1e       	adc	r13, r29
    2cb6:	c6 01       	movw	r24, r12
    2cb8:	6b e1       	ldi	r22, 0x1B	; 27
    2cba:	71 e0       	ldi	r23, 0x01	; 1
    2cbc:	97 01       	movw	r18, r14
    2cbe:	a8 01       	movw	r20, r16
    2cc0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
  
  Vector_Add(&temporary[0][0], &temporary[0][0], &DCM_Matrix[0][0]);//eq.19
    2cc4:	c5 01       	movw	r24, r10
    2cc6:	b5 01       	movw	r22, r10
    2cc8:	4b e1       	ldi	r20, 0x1B	; 27
    2cca:	51 e0       	ldi	r21, 0x01	; 1
    2ccc:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_Z10Vector_AddPfS_S_>
  Vector_Add(&temporary[1][0], &temporary[1][0], &DCM_Matrix[1][0]);//eq.19
    2cd0:	c6 01       	movw	r24, r12
    2cd2:	b6 01       	movw	r22, r12
    2cd4:	47 e2       	ldi	r20, 0x27	; 39
    2cd6:	51 e0       	ldi	r21, 0x01	; 1
    2cd8:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_Z10Vector_AddPfS_S_>
  
  Vector_Cross_Product(&temporary[2][0],&temporary[0][0],&temporary[1][0]); // c= a x b //eq.20
    2cdc:	ce 01       	movw	r24, r28
    2cde:	49 96       	adiw	r24, 0x19	; 25
    2ce0:	b5 01       	movw	r22, r10
    2ce2:	a6 01       	movw	r20, r12
    2ce4:	0e 94 98 1c 	call	0x3930	; 0x3930 <_Z20Vector_Cross_ProductPfS_S_>
  
  renorm= Vector_Dot_Product(&temporary[0][0],&temporary[0][0]); 
    2ce8:	c5 01       	movw	r24, r10
    2cea:	b5 01       	movw	r22, r10
    2cec:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z18Vector_Dot_ProductPfS_>
    2cf0:	7b 01       	movw	r14, r22
    2cf2:	8c 01       	movw	r16, r24
  if (renorm < 1.5625f && renorm > 0.64f) {
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	48 ec       	ldi	r20, 0xC8	; 200
    2cfa:	5f e3       	ldi	r21, 0x3F	; 63
    2cfc:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    2d00:	88 23       	and	r24, r24
    2d02:	cc f4       	brge	.+50     	; 0x2d36 <_Z9Normalizev+0xe0>
    2d04:	c8 01       	movw	r24, r16
    2d06:	b7 01       	movw	r22, r14
    2d08:	2a e0       	ldi	r18, 0x0A	; 10
    2d0a:	37 ed       	ldi	r19, 0xD7	; 215
    2d0c:	43 e2       	ldi	r20, 0x23	; 35
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2d14:	18 16       	cp	r1, r24
    2d16:	7c f4       	brge	.+30     	; 0x2d36 <_Z9Normalizev+0xe0>
    renorm= .5 * (3-renorm);                                                 //eq.21
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	80 e4       	ldi	r24, 0x40	; 64
    2d1e:	90 e4       	ldi	r25, 0x40	; 64
    2d20:	a8 01       	movw	r20, r16
    2d22:	97 01       	movw	r18, r14
    2d24:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e0       	ldi	r20, 0x00	; 0
    2d2e:	5f e3       	ldi	r21, 0x3F	; 63
    2d30:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2d34:	20 c0       	rjmp	.+64     	; 0x2d76 <_Z9Normalizev+0x120>
  } else if (renorm < 100.0f && renorm > 0.01f) {
    2d36:	c8 01       	movw	r24, r16
    2d38:	b7 01       	movw	r22, r14
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	48 ec       	ldi	r20, 0xC8	; 200
    2d40:	52 e4       	ldi	r21, 0x42	; 66
    2d42:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	d4 f4       	brge	.+52     	; 0x2d7e <_Z9Normalizev+0x128>
    2d4a:	c8 01       	movw	r24, r16
    2d4c:	b7 01       	movw	r22, r14
    2d4e:	2a e0       	ldi	r18, 0x0A	; 10
    2d50:	37 ed       	ldi	r19, 0xD7	; 215
    2d52:	43 e2       	ldi	r20, 0x23	; 35
    2d54:	5c e3       	ldi	r21, 0x3C	; 60
    2d56:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	84 f4       	brge	.+32     	; 0x2d7e <_Z9Normalizev+0x128>
    renorm= 1. / sqrt(renorm);
    2d5e:	c8 01       	movw	r24, r16
    2d60:	b7 01       	movw	r22, r14
    2d62:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <sqrt>
    2d66:	9b 01       	movw	r18, r22
    2d68:	ac 01       	movw	r20, r24
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	70 e0       	ldi	r23, 0x00	; 0
    2d6e:	80 e8       	ldi	r24, 0x80	; 128
    2d70:	9f e3       	ldi	r25, 0x3F	; 63
    2d72:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__divsf3>
    2d76:	7b 01       	movw	r14, r22
    2d78:	8c 01       	movw	r16, r24
    2d7a:	cc 24       	eor	r12, r12
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <_Z9Normalizev+0x12c>
  Vector_Cross_Product(&temporary[2][0],&temporary[0][0],&temporary[1][0]); // c= a x b //eq.20
  
  renorm= Vector_Dot_Product(&temporary[0][0],&temporary[0][0]); 
  if (renorm < 1.5625f && renorm > 0.64f) {
    renorm= .5 * (3-renorm);                                                 //eq.21
  } else if (renorm < 100.0f && renorm > 0.01f) {
    2d7e:	cc 24       	eor	r12, r12
    2d80:	c3 94       	inc	r12
    Serial.print (",TOW:");
    Serial.print (GPS.time);  
    Serial.println("***");    
#endif
  }
      Vector_Scale(&DCM_Matrix[0][0], &temporary[0][0], renorm);
    2d82:	8b e1       	ldi	r24, 0x1B	; 27
    2d84:	91 e0       	ldi	r25, 0x01	; 1
    2d86:	be 01       	movw	r22, r28
    2d88:	6f 5f       	subi	r22, 0xFF	; 255
    2d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8c:	a8 01       	movw	r20, r16
    2d8e:	97 01       	movw	r18, r14
    2d90:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
  
  renorm= Vector_Dot_Product(&temporary[1][0],&temporary[1][0]); 
    2d94:	be 01       	movw	r22, r28
    2d96:	63 5f       	subi	r22, 0xF3	; 243
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z18Vector_Dot_ProductPfS_>
    2da0:	7b 01       	movw	r14, r22
    2da2:	8c 01       	movw	r16, r24
  if (renorm < 1.5625f && renorm > 0.64f) {
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	48 ec       	ldi	r20, 0xC8	; 200
    2daa:	5f e3       	ldi	r21, 0x3F	; 63
    2dac:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	cc f4       	brge	.+50     	; 0x2de6 <_Z9Normalizev+0x190>
    2db4:	c8 01       	movw	r24, r16
    2db6:	b7 01       	movw	r22, r14
    2db8:	2a e0       	ldi	r18, 0x0A	; 10
    2dba:	37 ed       	ldi	r19, 0xD7	; 215
    2dbc:	43 e2       	ldi	r20, 0x23	; 35
    2dbe:	5f e3       	ldi	r21, 0x3F	; 63
    2dc0:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	7c f4       	brge	.+30     	; 0x2de6 <_Z9Normalizev+0x190>
    renorm= .5 * (3-renorm);                                                 //eq.21
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	70 e0       	ldi	r23, 0x00	; 0
    2dcc:	80 e4       	ldi	r24, 0x40	; 64
    2dce:	90 e4       	ldi	r25, 0x40	; 64
    2dd0:	a8 01       	movw	r20, r16
    2dd2:	97 01       	movw	r18, r14
    2dd4:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	5f e3       	ldi	r21, 0x3F	; 63
    2de0:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2de4:	20 c0       	rjmp	.+64     	; 0x2e26 <_Z9Normalizev+0x1d0>
  } else if (renorm < 100.0f && renorm > 0.01f) {
    2de6:	c8 01       	movw	r24, r16
    2de8:	b7 01       	movw	r22, r14
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	48 ec       	ldi	r20, 0xC8	; 200
    2df0:	52 e4       	ldi	r21, 0x42	; 66
    2df2:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	cc f4       	brge	.+50     	; 0x2e2c <_Z9Normalizev+0x1d6>
    2dfa:	c8 01       	movw	r24, r16
    2dfc:	b7 01       	movw	r22, r14
    2dfe:	2a e0       	ldi	r18, 0x0A	; 10
    2e00:	37 ed       	ldi	r19, 0xD7	; 215
    2e02:	43 e2       	ldi	r20, 0x23	; 35
    2e04:	5c e3       	ldi	r21, 0x3C	; 60
    2e06:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	7c f4       	brge	.+30     	; 0x2e2c <_Z9Normalizev+0x1d6>
    renorm= 1. / sqrt(renorm);  
    2e0e:	c8 01       	movw	r24, r16
    2e10:	b7 01       	movw	r22, r14
    2e12:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <sqrt>
    2e16:	9b 01       	movw	r18, r22
    2e18:	ac 01       	movw	r20, r24
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	80 e8       	ldi	r24, 0x80	; 128
    2e20:	9f e3       	ldi	r25, 0x3F	; 63
    2e22:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__divsf3>
    2e26:	7b 01       	movw	r14, r22
    2e28:	8c 01       	movw	r16, r24
    2e2a:	02 c0       	rjmp	.+4      	; 0x2e30 <_Z9Normalizev+0x1da>
      Vector_Scale(&DCM_Matrix[0][0], &temporary[0][0], renorm);
  
  renorm= Vector_Dot_Product(&temporary[1][0],&temporary[1][0]); 
  if (renorm < 1.5625f && renorm > 0.64f) {
    renorm= .5 * (3-renorm);                                                 //eq.21
  } else if (renorm < 100.0f && renorm > 0.01f) {
    2e2c:	cc 24       	eor	r12, r12
    2e2e:	c3 94       	inc	r12
    Serial.print (",TOW:");
    Serial.print (GPS.time);  
    Serial.println("***");    
#endif
  }
  Vector_Scale(&DCM_Matrix[1][0], &temporary[1][0], renorm);
    2e30:	87 e2       	ldi	r24, 0x27	; 39
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	be 01       	movw	r22, r28
    2e36:	63 5f       	subi	r22, 0xF3	; 243
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	a8 01       	movw	r20, r16
    2e3c:	97 01       	movw	r18, r14
    2e3e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
  
  renorm= Vector_Dot_Product(&temporary[2][0],&temporary[2][0]); 
    2e42:	be 01       	movw	r22, r28
    2e44:	67 5e       	subi	r22, 0xE7	; 231
    2e46:	7f 4f       	sbci	r23, 0xFF	; 255
    2e48:	cb 01       	movw	r24, r22
    2e4a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z18Vector_Dot_ProductPfS_>
    2e4e:	7b 01       	movw	r14, r22
    2e50:	8c 01       	movw	r16, r24
  if (renorm < 1.5625f && renorm > 0.64f) {
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	48 ec       	ldi	r20, 0xC8	; 200
    2e58:	5f e3       	ldi	r21, 0x3F	; 63
    2e5a:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    2e5e:	88 23       	and	r24, r24
    2e60:	cc f4       	brge	.+50     	; 0x2e94 <_Z9Normalizev+0x23e>
    2e62:	c8 01       	movw	r24, r16
    2e64:	b7 01       	movw	r22, r14
    2e66:	2a e0       	ldi	r18, 0x0A	; 10
    2e68:	37 ed       	ldi	r19, 0xD7	; 215
    2e6a:	43 e2       	ldi	r20, 0x23	; 35
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	7c f4       	brge	.+30     	; 0x2e94 <_Z9Normalizev+0x23e>
    renorm= .5 * (3-renorm);                                                 //eq.21
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	70 e0       	ldi	r23, 0x00	; 0
    2e7a:	80 e4       	ldi	r24, 0x40	; 64
    2e7c:	90 e4       	ldi	r25, 0x40	; 64
    2e7e:	a8 01       	movw	r20, r16
    2e80:	97 01       	movw	r18, r14
    2e82:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	5f e3       	ldi	r21, 0x3F	; 63
    2e8e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    2e92:	20 c0       	rjmp	.+64     	; 0x2ed4 <_Z9Normalizev+0x27e>
  } else if (renorm < 100.0f && renorm > 0.01f) {
    2e94:	c8 01       	movw	r24, r16
    2e96:	b7 01       	movw	r22, r14
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	48 ec       	ldi	r20, 0xC8	; 200
    2e9e:	52 e4       	ldi	r21, 0x42	; 66
    2ea0:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    2ea4:	88 23       	and	r24, r24
    2ea6:	cc f4       	brge	.+50     	; 0x2eda <_Z9Normalizev+0x284>
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	b7 01       	movw	r22, r14
    2eac:	2a e0       	ldi	r18, 0x0A	; 10
    2eae:	37 ed       	ldi	r19, 0xD7	; 215
    2eb0:	43 e2       	ldi	r20, 0x23	; 35
    2eb2:	5c e3       	ldi	r21, 0x3C	; 60
    2eb4:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    2eb8:	18 16       	cp	r1, r24
    2eba:	7c f4       	brge	.+30     	; 0x2eda <_Z9Normalizev+0x284>
    renorm= 1. / sqrt(renorm);   
    2ebc:	c8 01       	movw	r24, r16
    2ebe:	b7 01       	movw	r22, r14
    2ec0:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <sqrt>
    2ec4:	9b 01       	movw	r18, r22
    2ec6:	ac 01       	movw	r20, r24
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	80 e8       	ldi	r24, 0x80	; 128
    2ece:	9f e3       	ldi	r25, 0x3F	; 63
    2ed0:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__divsf3>
    2ed4:	7b 01       	movw	r14, r22
    2ed6:	8c 01       	movw	r16, r24
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <_Z9Normalizev+0x288>
  Vector_Scale(&DCM_Matrix[1][0], &temporary[1][0], renorm);
  
  renorm= Vector_Dot_Product(&temporary[2][0],&temporary[2][0]); 
  if (renorm < 1.5625f && renorm > 0.64f) {
    renorm= .5 * (3-renorm);                                                 //eq.21
  } else if (renorm < 100.0f && renorm > 0.01f) {
    2eda:	cc 24       	eor	r12, r12
    2edc:	c3 94       	inc	r12
    Serial.print (",TOW:");
    Serial.print (GPS.time);  
    Serial.println("***");    
#endif
  }
  Vector_Scale(&DCM_Matrix[2][0], &temporary[2][0], renorm);
    2ede:	83 e3       	ldi	r24, 0x33	; 51
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	be 01       	movw	r22, r28
    2ee4:	67 5e       	subi	r22, 0xE7	; 231
    2ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee8:	a8 01       	movw	r20, r16
    2eea:	97 01       	movw	r18, r14
    2eec:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_Z12Vector_ScalePfS_f>
  
  if (problem) {                // Our solution is blowing up and we will force back to initial condition.  Hope we are not upside down!
    2ef0:	cc 20       	and	r12, r12
    2ef2:	09 f4       	brne	.+2      	; 0x2ef6 <_Z9Normalizev+0x2a0>
    2ef4:	50 c0       	rjmp	.+160    	; 0x2f96 <_Z9Normalizev+0x340>
      DCM_Matrix[0][0]= 1.0f;
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e8       	ldi	r20, 0x80	; 128
    2efc:	5f e3       	ldi	r21, 0x3F	; 63
    2efe:	20 93 1b 01 	sts	0x011B, r18
    2f02:	30 93 1c 01 	sts	0x011C, r19
    2f06:	40 93 1d 01 	sts	0x011D, r20
    2f0a:	50 93 1e 01 	sts	0x011E, r21
      DCM_Matrix[0][1]= 0.0f;
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a0 e0       	ldi	r26, 0x00	; 0
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	80 93 1f 01 	sts	0x011F, r24
    2f1a:	90 93 20 01 	sts	0x0120, r25
    2f1e:	a0 93 21 01 	sts	0x0121, r26
    2f22:	b0 93 22 01 	sts	0x0122, r27
      DCM_Matrix[0][2]= 0.0f;
    2f26:	80 93 23 01 	sts	0x0123, r24
    2f2a:	90 93 24 01 	sts	0x0124, r25
    2f2e:	a0 93 25 01 	sts	0x0125, r26
    2f32:	b0 93 26 01 	sts	0x0126, r27
      DCM_Matrix[1][0]= 0.0f;
    2f36:	80 93 27 01 	sts	0x0127, r24
    2f3a:	90 93 28 01 	sts	0x0128, r25
    2f3e:	a0 93 29 01 	sts	0x0129, r26
    2f42:	b0 93 2a 01 	sts	0x012A, r27
      DCM_Matrix[1][1]= 1.0f;
    2f46:	20 93 2b 01 	sts	0x012B, r18
    2f4a:	30 93 2c 01 	sts	0x012C, r19
    2f4e:	40 93 2d 01 	sts	0x012D, r20
    2f52:	50 93 2e 01 	sts	0x012E, r21
      DCM_Matrix[1][2]= 0.0f;
    2f56:	80 93 2f 01 	sts	0x012F, r24
    2f5a:	90 93 30 01 	sts	0x0130, r25
    2f5e:	a0 93 31 01 	sts	0x0131, r26
    2f62:	b0 93 32 01 	sts	0x0132, r27
      DCM_Matrix[2][0]= 0.0f;
    2f66:	80 93 33 01 	sts	0x0133, r24
    2f6a:	90 93 34 01 	sts	0x0134, r25
    2f6e:	a0 93 35 01 	sts	0x0135, r26
    2f72:	b0 93 36 01 	sts	0x0136, r27
      DCM_Matrix[2][1]= 0.0f;
    2f76:	80 93 37 01 	sts	0x0137, r24
    2f7a:	90 93 38 01 	sts	0x0138, r25
    2f7e:	a0 93 39 01 	sts	0x0139, r26
    2f82:	b0 93 3a 01 	sts	0x013A, r27
      DCM_Matrix[2][2]= 1.0f;
    2f86:	20 93 3b 01 	sts	0x013B, r18
    2f8a:	30 93 3c 01 	sts	0x013C, r19
    2f8e:	40 93 3d 01 	sts	0x013D, r20
    2f92:	50 93 3e 01 	sts	0x013E, r21
      problem = FALSE;  
  }
}
    2f96:	a4 96       	adiw	r28, 0x24	; 36
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	df 90       	pop	r13
    2fb0:	cf 90       	pop	r12
    2fb2:	bf 90       	pop	r11
    2fb4:	af 90       	pop	r10
    2fb6:	08 95       	ret

00002fb8 <_Z18HMC5883_set_offsetiii>:
}

// set mag offsets
void HMC5883_set_offset(int offsetx, int offsety, int offsetz)
{
  mag_offset[0] = offsetx;
    2fb8:	90 93 68 03 	sts	0x0368, r25
    2fbc:	80 93 67 03 	sts	0x0367, r24
  mag_offset[1] = offsety;
    2fc0:	70 93 6a 03 	sts	0x036A, r23
    2fc4:	60 93 69 03 	sts	0x0369, r22
  mag_offset[2] = offsetz;
    2fc8:	50 93 6c 03 	sts	0x036C, r21
    2fcc:	40 93 6b 03 	sts	0x036B, r20
}
    2fd0:	08 95       	ret

00002fd2 <_Z17HMC5883_calculateff>:
    mag_y = ((((int)buff[4]) << 8) | buff[5])*SENSOR_SIGN[7] + mag_offset[1];    // Y axis
    mag_z = ((((int)buff[2]) << 8) | buff[3])*SENSOR_SIGN[8] + mag_offset[2];    // Z axis
  }
}

void HMC5883_calculate(float roll, float pitch)
    2fd2:	2f 92       	push	r2
    2fd4:	3f 92       	push	r3
    2fd6:	4f 92       	push	r4
    2fd8:	5f 92       	push	r5
    2fda:	6f 92       	push	r6
    2fdc:	7f 92       	push	r7
    2fde:	8f 92       	push	r8
    2fe0:	9f 92       	push	r9
    2fe2:	af 92       	push	r10
    2fe4:	bf 92       	push	r11
    2fe6:	cf 92       	push	r12
    2fe8:	df 92       	push	r13
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	60 97       	sbiw	r28, 0x10	; 16
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	7b 01       	movw	r14, r22
    3008:	8c 01       	movw	r16, r24
    300a:	59 01       	movw	r10, r18
    300c:	6a 01       	movw	r12, r20
  float cos_roll;
  float sin_roll;
  float cos_pitch;
  float sin_pitch;
  
  cos_roll = cos(roll);
    300e:	0e 94 75 24 	call	0x48ea	; 0x48ea <cos>
    3012:	6d 87       	std	Y+13, r22	; 0x0d
    3014:	7e 87       	std	Y+14, r23	; 0x0e
    3016:	8f 87       	std	Y+15, r24	; 0x0f
    3018:	98 8b       	std	Y+16, r25	; 0x10
  sin_roll = sin(roll);
    301a:	c8 01       	movw	r24, r16
    301c:	b7 01       	movw	r22, r14
    301e:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <sin>
    3022:	69 87       	std	Y+9, r22	; 0x09
    3024:	7a 87       	std	Y+10, r23	; 0x0a
    3026:	8b 87       	std	Y+11, r24	; 0x0b
    3028:	9c 87       	std	Y+12, r25	; 0x0c
  cos_pitch = cos(pitch);
    302a:	c6 01       	movw	r24, r12
    302c:	b5 01       	movw	r22, r10
    302e:	0e 94 75 24 	call	0x48ea	; 0x48ea <cos>
    3032:	6d 83       	std	Y+5, r22	; 0x05
    3034:	7e 83       	std	Y+6, r23	; 0x06
    3036:	8f 83       	std	Y+7, r24	; 0x07
    3038:	98 87       	std	Y+8, r25	; 0x08
  sin_pitch = sin(pitch);
    303a:	c6 01       	movw	r24, r12
    303c:	b5 01       	movw	r22, r10
    303e:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <sin>
    3042:	69 83       	std	Y+1, r22	; 0x01
    3044:	7a 83       	std	Y+2, r23	; 0x02
    3046:	8b 83       	std	Y+3, r24	; 0x03
    3048:	9c 83       	std	Y+4, r25	; 0x04
  
  // Tilt compensated Magnetic field X component:
  Head_X = mag_x*cos_pitch+mag_y*sin_roll*sin_pitch+mag_z*cos_roll*sin_pitch;
    304a:	60 91 63 03 	lds	r22, 0x0363
    304e:	70 91 64 03 	lds	r23, 0x0364
    3052:	88 27       	eor	r24, r24
    3054:	77 fd       	sbrc	r23, 7
    3056:	80 95       	com	r24
    3058:	98 2f       	mov	r25, r24
    305a:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    305e:	3b 01       	movw	r6, r22
    3060:	4c 01       	movw	r8, r24
    3062:	60 91 65 03 	lds	r22, 0x0365
    3066:	70 91 66 03 	lds	r23, 0x0366
    306a:	88 27       	eor	r24, r24
    306c:	77 fd       	sbrc	r23, 7
    306e:	80 95       	com	r24
    3070:	98 2f       	mov	r25, r24
    3072:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    3076:	1b 01       	movw	r2, r22
    3078:	2c 01       	movw	r4, r24
  // Tilt compensated Magnetic field Y component:
  Head_Y = mag_y*cos_roll-mag_z*sin_roll;
  // Magnetic Heading
  Heading = atan2(-Head_Y,Head_X);
    307a:	c4 01       	movw	r24, r8
    307c:	b3 01       	movw	r22, r6
    307e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3080:	3e 85       	ldd	r19, Y+14	; 0x0e
    3082:	4f 85       	ldd	r20, Y+15	; 0x0f
    3084:	58 89       	ldd	r21, Y+16	; 0x10
    3086:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    308a:	7b 01       	movw	r14, r22
    308c:	8c 01       	movw	r16, r24
    308e:	c2 01       	movw	r24, r4
    3090:	b1 01       	movw	r22, r2
    3092:	29 85       	ldd	r18, Y+9	; 0x09
    3094:	3a 85       	ldd	r19, Y+10	; 0x0a
    3096:	4b 85       	ldd	r20, Y+11	; 0x0b
    3098:	5c 85       	ldd	r21, Y+12	; 0x0c
    309a:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    309e:	9b 01       	movw	r18, r22
    30a0:	ac 01       	movw	r20, r24
    30a2:	c8 01       	movw	r24, r16
    30a4:	b7 01       	movw	r22, r14
    30a6:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    30aa:	7b 01       	movw	r14, r22
    30ac:	8c 01       	movw	r16, r24
    30ae:	17 fb       	bst	r17, 7
    30b0:	10 95       	com	r17
    30b2:	17 f9       	bld	r17, 7
    30b4:	10 95       	com	r17
    30b6:	60 91 61 03 	lds	r22, 0x0361
    30ba:	70 91 62 03 	lds	r23, 0x0362
    30be:	88 27       	eor	r24, r24
    30c0:	77 fd       	sbrc	r23, 7
    30c2:	80 95       	com	r24
    30c4:	98 2f       	mov	r25, r24
    30c6:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    30ca:	2d 81       	ldd	r18, Y+5	; 0x05
    30cc:	3e 81       	ldd	r19, Y+6	; 0x06
    30ce:	4f 81       	ldd	r20, Y+7	; 0x07
    30d0:	58 85       	ldd	r21, Y+8	; 0x08
    30d2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    30d6:	5b 01       	movw	r10, r22
    30d8:	6c 01       	movw	r12, r24
    30da:	c4 01       	movw	r24, r8
    30dc:	b3 01       	movw	r22, r6
    30de:	29 85       	ldd	r18, Y+9	; 0x09
    30e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    30e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    30e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    30e6:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    30ea:	29 81       	ldd	r18, Y+1	; 0x01
    30ec:	3a 81       	ldd	r19, Y+2	; 0x02
    30ee:	4b 81       	ldd	r20, Y+3	; 0x03
    30f0:	5c 81       	ldd	r21, Y+4	; 0x04
    30f2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    30f6:	9b 01       	movw	r18, r22
    30f8:	ac 01       	movw	r20, r24
    30fa:	c6 01       	movw	r24, r12
    30fc:	b5 01       	movw	r22, r10
    30fe:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    3102:	5b 01       	movw	r10, r22
    3104:	6c 01       	movw	r12, r24
    3106:	c2 01       	movw	r24, r4
    3108:	b1 01       	movw	r22, r2
    310a:	2d 85       	ldd	r18, Y+13	; 0x0d
    310c:	3e 85       	ldd	r19, Y+14	; 0x0e
    310e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3110:	58 89       	ldd	r21, Y+16	; 0x10
    3112:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3116:	29 81       	ldd	r18, Y+1	; 0x01
    3118:	3a 81       	ldd	r19, Y+2	; 0x02
    311a:	4b 81       	ldd	r20, Y+3	; 0x03
    311c:	5c 81       	ldd	r21, Y+4	; 0x04
    311e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3122:	9b 01       	movw	r18, r22
    3124:	ac 01       	movw	r20, r24
    3126:	c6 01       	movw	r24, r12
    3128:	b5 01       	movw	r22, r10
    312a:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    312e:	9b 01       	movw	r18, r22
    3130:	ac 01       	movw	r20, r24
    3132:	c8 01       	movw	r24, r16
    3134:	b7 01       	movw	r22, r14
    3136:	0e 94 1e 24 	call	0x483c	; 0x483c <atan2>
  
  // Declination correction (if supplied)
  if( MAGNETIC_DECLINATION != 0 ) 
  {
      Heading = Heading + ToRad(MAGNETIC_DECLINATION);
    313a:	20 e5       	ldi	r18, 0x50	; 80
    313c:	37 e7       	ldi	r19, 0x77	; 119
    313e:	46 ed       	ldi	r20, 0xD6	; 214
    3140:	5d e3       	ldi	r21, 0x3D	; 61
    3142:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    3146:	7b 01       	movw	r14, r22
    3148:	8c 01       	movw	r16, r24
    314a:	60 93 6d 03 	sts	0x036D, r22
    314e:	70 93 6e 03 	sts	0x036E, r23
    3152:	80 93 6f 03 	sts	0x036F, r24
    3156:	90 93 70 03 	sts	0x0370, r25
      if (Heading > M_PI)    // Angle normalization (-180 deg, 180 deg)
    315a:	2b ed       	ldi	r18, 0xDB	; 219
    315c:	3f e0       	ldi	r19, 0x0F	; 15
    315e:	49 e4       	ldi	r20, 0x49	; 73
    3160:	50 e4       	ldi	r21, 0x40	; 64
    3162:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    3166:	18 16       	cp	r1, r24
    3168:	4c f4       	brge	.+18     	; 0x317c <_Z17HMC5883_calculateff+0x1aa>
          Heading -= (2.0 * M_PI);
    316a:	c8 01       	movw	r24, r16
    316c:	b7 01       	movw	r22, r14
    316e:	2b ed       	ldi	r18, 0xDB	; 219
    3170:	3f e0       	ldi	r19, 0x0F	; 15
    3172:	49 ec       	ldi	r20, 0xC9	; 201
    3174:	50 e4       	ldi	r21, 0x40	; 64
    3176:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    317a:	12 c0       	rjmp	.+36     	; 0x31a0 <_Z17HMC5883_calculateff+0x1ce>
      else if (Heading < -M_PI)
    317c:	c8 01       	movw	r24, r16
    317e:	b7 01       	movw	r22, r14
    3180:	2b ed       	ldi	r18, 0xDB	; 219
    3182:	3f e0       	ldi	r19, 0x0F	; 15
    3184:	49 e4       	ldi	r20, 0x49	; 73
    3186:	50 ec       	ldi	r21, 0xC0	; 192
    3188:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    318c:	88 23       	and	r24, r24
    318e:	84 f4       	brge	.+32     	; 0x31b0 <_Z17HMC5883_calculateff+0x1de>
          Heading += (2.0 * M_PI);
    3190:	c8 01       	movw	r24, r16
    3192:	b7 01       	movw	r22, r14
    3194:	2b ed       	ldi	r18, 0xDB	; 219
    3196:	3f e0       	ldi	r19, 0x0F	; 15
    3198:	49 ec       	ldi	r20, 0xC9	; 201
    319a:	50 e4       	ldi	r21, 0x40	; 64
    319c:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    31a0:	60 93 6d 03 	sts	0x036D, r22
    31a4:	70 93 6e 03 	sts	0x036E, r23
    31a8:	80 93 6f 03 	sts	0x036F, r24
    31ac:	90 93 70 03 	sts	0x0370, r25
  }
	
  // Optimization for external DCM use. Calculate normalized components
  Heading_X = cos(Heading);
    31b0:	e0 90 6d 03 	lds	r14, 0x036D
    31b4:	f0 90 6e 03 	lds	r15, 0x036E
    31b8:	00 91 6f 03 	lds	r16, 0x036F
    31bc:	10 91 70 03 	lds	r17, 0x0370
    31c0:	c8 01       	movw	r24, r16
    31c2:	b7 01       	movw	r22, r14
    31c4:	0e 94 75 24 	call	0x48ea	; 0x48ea <cos>
    31c8:	60 93 71 03 	sts	0x0371, r22
    31cc:	70 93 72 03 	sts	0x0372, r23
    31d0:	80 93 73 03 	sts	0x0373, r24
    31d4:	90 93 74 03 	sts	0x0374, r25
  Heading_Y = sin(Heading);
    31d8:	c8 01       	movw	r24, r16
    31da:	b7 01       	movw	r22, r14
    31dc:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <sin>
    31e0:	60 93 75 03 	sts	0x0375, r22
    31e4:	70 93 76 03 	sts	0x0376, r23
    31e8:	80 93 77 03 	sts	0x0377, r24
    31ec:	90 93 78 03 	sts	0x0378, r25
}
    31f0:	60 96       	adiw	r28, 0x10	; 16
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	f8 94       	cli
    31f6:	de bf       	out	0x3e, r29	; 62
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	cd bf       	out	0x3d, r28	; 61
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	1f 91       	pop	r17
    3202:	0f 91       	pop	r16
    3204:	ff 90       	pop	r15
    3206:	ef 90       	pop	r14
    3208:	df 90       	pop	r13
    320a:	cf 90       	pop	r12
    320c:	bf 90       	pop	r11
    320e:	af 90       	pop	r10
    3210:	9f 90       	pop	r9
    3212:	8f 90       	pop	r8
    3214:	7f 90       	pop	r7
    3216:	6f 90       	pop	r6
    3218:	5f 90       	pop	r5
    321a:	4f 90       	pop	r4
    321c:	3f 90       	pop	r3
    321e:	2f 90       	pop	r2
    3220:	08 95       	ret

00003222 <_Z12HMC5883_readv>:
  mag_offset[1] = offsety;
  mag_offset[2] = offsetz;
}

// Read Sensor data in chip axis
void HMC5883_read()
    3222:	ef 92       	push	r14
    3224:	ff 92       	push	r15
    3226:	0f 93       	push	r16
    3228:	1f 93       	push	r17
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	00 d0       	rcall	.+0      	; 0x3230 <_Z12HMC5883_readv+0xe>
    3230:	00 d0       	rcall	.+0      	; 0x3232 <_Z12HMC5883_readv+0x10>
    3232:	00 d0       	rcall	.+0      	; 0x3234 <_Z12HMC5883_readv+0x12>
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
{
  int i = 0;
  byte buff[6];

  Wire.beginTransmission(COMPASS_ADDRESS);
    3238:	82 e6       	ldi	r24, 0x62	; 98
    323a:	92 e0       	ldi	r25, 0x02	; 2
    323c:	6e e1       	ldi	r22, 0x1E	; 30
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	0e 94 80 04 	call	0x900	; 0x900 <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3244:	82 e6       	ldi	r24, 0x62	; 98
    3246:	92 e0       	ldi	r25, 0x02	; 2
    3248:	63 e0       	ldi	r22, 0x03	; 3
    324a:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN7TwoWire5writeEh>
  Wire.write(0x03);        //sends address to read from
  Wire.endTransmission(); //end transmission
    324e:	82 e6       	ldi	r24, 0x62	; 98
    3250:	92 e0       	ldi	r25, 0x02	; 2
    3252:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN7TwoWire15endTransmissionEv>

    //Wire.beginTransmission(COMPASS_ADDRESS);
  Wire.requestFrom(COMPASS_ADDRESS, 6);    // request 6 bytes from device
    3256:	82 e6       	ldi	r24, 0x62	; 98
    3258:	92 e0       	ldi	r25, 0x02	; 2
    325a:	6e e1       	ldi	r22, 0x1E	; 30
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	46 e0       	ldi	r20, 0x06	; 6
    3260:	50 e0       	ldi	r21, 0x00	; 0
    3262:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN7TwoWire11requestFromEii>
    3266:	00 e0       	ldi	r16, 0x00	; 0
    3268:	10 e0       	ldi	r17, 0x00	; 0
  while(Wire.available())
  {
    buff[i] = Wire.read();  // receive one byte
    326a:	7e 01       	movw	r14, r28
    326c:	08 94       	sec
    326e:	e1 1c       	adc	r14, r1
    3270:	f1 1c       	adc	r15, r1
    3272:	0a c0       	rjmp	.+20     	; 0x3288 <_Z12HMC5883_readv+0x66>
    3274:	82 e6       	ldi	r24, 0x62	; 98
    3276:	92 e0       	ldi	r25, 0x02	; 2
    3278:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7TwoWire4readEv>
    327c:	f7 01       	movw	r30, r14
    327e:	e0 0f       	add	r30, r16
    3280:	f1 1f       	adc	r31, r17
    3282:	80 83       	st	Z, r24
    i++;
    3284:	0f 5f       	subi	r16, 0xFF	; 255
    3286:	1f 4f       	sbci	r17, 0xFF	; 255
  Wire.write(0x03);        //sends address to read from
  Wire.endTransmission(); //end transmission

    //Wire.beginTransmission(COMPASS_ADDRESS);
  Wire.requestFrom(COMPASS_ADDRESS, 6);    // request 6 bytes from device
  while(Wire.available())
    3288:	82 e6       	ldi	r24, 0x62	; 98
    328a:	92 e0       	ldi	r25, 0x02	; 2
    328c:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN7TwoWire9availableEv>
    3290:	89 2b       	or	r24, r25
    3292:	81 f7       	brne	.-32     	; 0x3274 <_Z12HMC5883_readv+0x52>
  {
    buff[i] = Wire.read();  // receive one byte
    i++;
  }
  Wire.endTransmission(); //end transmission
    3294:	82 e6       	ldi	r24, 0x62	; 98
    3296:	92 e0       	ldi	r25, 0x02	; 2
    3298:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN7TwoWire15endTransmissionEv>

  if (i==6){  // All bytes received?
    329c:	06 30       	cpi	r16, 0x06	; 6
    329e:	11 05       	cpc	r17, r1
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <_Z12HMC5883_readv+0x82>
    32a2:	54 c0       	rjmp	.+168    	; 0x334c <_Z12HMC5883_readv+0x12a>
    // MSB byte first, then LSB
    mag_x = ((((int)buff[0]) << 8) | buff[1])*SENSOR_SIGN[6] + mag_offset[0];    // X axis
    32a4:	39 81       	ldd	r19, Y+1	; 0x01
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	28 2b       	or	r18, r24
    32ae:	39 2b       	or	r19, r25
    32b0:	80 91 6f 01 	lds	r24, 0x016F
    32b4:	90 91 70 01 	lds	r25, 0x0170
    32b8:	ac 01       	movw	r20, r24
    32ba:	24 9f       	mul	r18, r20
    32bc:	c0 01       	movw	r24, r0
    32be:	25 9f       	mul	r18, r21
    32c0:	90 0d       	add	r25, r0
    32c2:	34 9f       	mul	r19, r20
    32c4:	90 0d       	add	r25, r0
    32c6:	11 24       	eor	r1, r1
    32c8:	20 91 67 03 	lds	r18, 0x0367
    32cc:	30 91 68 03 	lds	r19, 0x0368
    32d0:	82 0f       	add	r24, r18
    32d2:	93 1f       	adc	r25, r19
    32d4:	90 93 62 03 	sts	0x0362, r25
    32d8:	80 93 61 03 	sts	0x0361, r24
    mag_y = ((((int)buff[4]) << 8) | buff[5])*SENSOR_SIGN[7] + mag_offset[1];    // Y axis
    32dc:	3d 81       	ldd	r19, Y+5	; 0x05
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	8e 81       	ldd	r24, Y+6	; 0x06
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	28 2b       	or	r18, r24
    32e6:	39 2b       	or	r19, r25
    32e8:	80 91 71 01 	lds	r24, 0x0171
    32ec:	90 91 72 01 	lds	r25, 0x0172
    32f0:	ac 01       	movw	r20, r24
    32f2:	24 9f       	mul	r18, r20
    32f4:	c0 01       	movw	r24, r0
    32f6:	25 9f       	mul	r18, r21
    32f8:	90 0d       	add	r25, r0
    32fa:	34 9f       	mul	r19, r20
    32fc:	90 0d       	add	r25, r0
    32fe:	11 24       	eor	r1, r1
    3300:	20 91 69 03 	lds	r18, 0x0369
    3304:	30 91 6a 03 	lds	r19, 0x036A
    3308:	82 0f       	add	r24, r18
    330a:	93 1f       	adc	r25, r19
    330c:	90 93 64 03 	sts	0x0364, r25
    3310:	80 93 63 03 	sts	0x0363, r24
    mag_z = ((((int)buff[2]) << 8) | buff[3])*SENSOR_SIGN[8] + mag_offset[2];    // Z axis
    3314:	3b 81       	ldd	r19, Y+3	; 0x03
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	8c 81       	ldd	r24, Y+4	; 0x04
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	28 2b       	or	r18, r24
    331e:	39 2b       	or	r19, r25
    3320:	80 91 73 01 	lds	r24, 0x0173
    3324:	90 91 74 01 	lds	r25, 0x0174
    3328:	ac 01       	movw	r20, r24
    332a:	24 9f       	mul	r18, r20
    332c:	c0 01       	movw	r24, r0
    332e:	25 9f       	mul	r18, r21
    3330:	90 0d       	add	r25, r0
    3332:	34 9f       	mul	r19, r20
    3334:	90 0d       	add	r25, r0
    3336:	11 24       	eor	r1, r1
    3338:	20 91 6b 03 	lds	r18, 0x036B
    333c:	30 91 6c 03 	lds	r19, 0x036C
    3340:	82 0f       	add	r24, r18
    3342:	93 1f       	adc	r25, r19
    3344:	90 93 66 03 	sts	0x0366, r25
    3348:	80 93 65 03 	sts	0x0365, r24
  }
}
    334c:	26 96       	adiw	r28, 0x06	; 6
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	ff 90       	pop	r15
    3362:	ef 90       	pop	r14
    3364:	08 95       	ret

00003366 <_Z12HMC5883_initv>:
// ConfigRegA valid measurement configuration bits
#define NormalOperation      0x10
#define PositiveBiasConfig   0x11
#define NegativeBiasConfig   0x12

bool HMC5883_init()
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
{
  int success = 0;
  uint8_t aux_byte;

  Wire.begin();
    336a:	02 e6       	ldi	r16, 0x62	; 98
    336c:	12 e0       	ldi	r17, 0x02	; 2
    336e:	c8 01       	movw	r24, r16
    3370:	0e 94 5a 05 	call	0xab4	; 0xab4 <_ZN7TwoWire5beginEv>
  delay(10);
    3374:	6a e0       	ldi	r22, 0x0A	; 10
    3376:	70 e0       	ldi	r23, 0x00	; 0
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>

  //mag_offset[0] = 0;
  //mag_offset[1] = 0;
  //mag_offset[2] = 0;

  Wire.beginTransmission(COMPASS_ADDRESS);
    3380:	c8 01       	movw	r24, r16
    3382:	6e e1       	ldi	r22, 0x1E	; 30
    3384:	70 e0       	ldi	r23, 0x00	; 0
    3386:	0e 94 80 04 	call	0x900	; 0x900 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)ConfigRegA);
    338a:	c8 01       	movw	r24, r16
    338c:	60 e0       	ldi	r22, 0x00	; 0
    338e:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN7TwoWire5writeEh>
  aux_byte = (SampleAveraging_8<<5 | DataOutputRate_75HZ<<2 | NormalOperation);
  Wire.write(aux_byte);
    3392:	c8 01       	movw	r24, r16
    3394:	68 e7       	ldi	r22, 0x78	; 120
    3396:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    339a:	c8 01       	movw	r24, r16
    339c:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN7TwoWire15endTransmissionEv>
  delay(50);
    33a0:	62 e3       	ldi	r22, 0x32	; 50
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>

  Wire.beginTransmission(COMPASS_ADDRESS);
    33ac:	c8 01       	movw	r24, r16
    33ae:	6e e1       	ldi	r22, 0x1E	; 30
    33b0:	70 e0       	ldi	r23, 0x00	; 0
    33b2:	0e 94 80 04 	call	0x900	; 0x900 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)ModeRegister);
    33b6:	c8 01       	movw	r24, r16
    33b8:	62 e0       	ldi	r22, 0x02	; 2
    33ba:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN7TwoWire5writeEh>
  Wire.write((uint8_t)ContinuousConversion);        // Set continuous mode (default to 10Hz)
    33be:	c8 01       	movw	r24, r16
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();                 // End transmission
    33c6:	c8 01       	movw	r24, r16
    33c8:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN7TwoWire15endTransmissionEv>
  delay(50);
    33cc:	62 e3       	ldi	r22, 0x32	; 50
    33ce:	70 e0       	ldi	r23, 0x00	; 0
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
  
  return(1);
}
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	1f 91       	pop	r17
    33dc:	0f 91       	pop	r16
    33de:	08 95       	ret

000033e0 <_Z16MPU6000_data_intv>:
}

// MPU6000 INTERRUPT ON INT0
void MPU6000_data_int()
{
  MPU6000_newdata++;
    33e0:	80 91 21 04 	lds	r24, 0x0421
    33e4:	8f 5f       	subi	r24, 0xFF	; 255
    33e6:	80 93 21 04 	sts	0x0421, r24
}
    33ea:	08 95       	ret

000033ec <_Z17MPU6000_SPI_writehh>:
  return_value = SPI.transfer(0);
  digitalWrite(MPU6000_CHIP_SELECT_PIN, HIGH);
  return(return_value);
}

void MPU6000_SPI_write(byte reg, byte data)
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	18 2f       	mov	r17, r24
    33f2:	06 2f       	mov	r16, r22
{
  byte dump;
  digitalWrite(MPU6000_CHIP_SELECT_PIN, LOW);
    33f4:	84 e0       	ldi	r24, 0x04	; 4
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    33fc:	1e bd       	out	0x2e, r17	; 46
  while (!(SPSR & _BV(SPIF)))
    33fe:	0d b4       	in	r0, 0x2d	; 45
    3400:	07 fe       	sbrs	r0, 7
    3402:	fd cf       	rjmp	.-6      	; 0x33fe <_Z17MPU6000_SPI_writehh+0x12>
    ;
  return SPDR;
    3404:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    3406:	0e bd       	out	0x2e, r16	; 46
  while (!(SPSR & _BV(SPIF)))
    3408:	0d b4       	in	r0, 0x2d	; 45
    340a:	07 fe       	sbrs	r0, 7
    340c:	fd cf       	rjmp	.-6      	; 0x3408 <_Z17MPU6000_SPI_writehh+0x1c>
    ;
  return SPDR;
    340e:	8e b5       	in	r24, 0x2e	; 46
  dump = SPI.transfer(reg);
  dump = SPI.transfer(data);
  digitalWrite(MPU6000_CHIP_SELECT_PIN, HIGH);
    3410:	84 e0       	ldi	r24, 0x04	; 4
    3412:	61 e0       	ldi	r22, 0x01	; 1
    3414:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
}
    3418:	1f 91       	pop	r17
    341a:	0f 91       	pop	r16
    341c:	08 95       	ret

0000341e <_Z16MPU6000_SPI_readh>:
// MPU6000 support for ArduIMU V3
#if BOARD_VERSION == 3
#include <SPI.h>

// MPU6000 SPI functions
byte MPU6000_SPI_read(byte reg)
    341e:	1f 93       	push	r17
{
  byte dump;
  byte return_value;
  byte addr = reg | 0x80; // Set most significant bit
    3420:	18 2f       	mov	r17, r24
    3422:	10 68       	ori	r17, 0x80	; 128
  digitalWrite(MPU6000_CHIP_SELECT_PIN, LOW);
    3424:	84 e0       	ldi	r24, 0x04	; 4
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    342c:	1e bd       	out	0x2e, r17	; 46
  while (!(SPSR & _BV(SPIF)))
    342e:	0d b4       	in	r0, 0x2d	; 45
    3430:	07 fe       	sbrs	r0, 7
    3432:	fd cf       	rjmp	.-6      	; 0x342e <_Z16MPU6000_SPI_readh+0x10>
    ;
  return SPDR;
    3434:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    3436:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    3438:	0d b4       	in	r0, 0x2d	; 45
    343a:	07 fe       	sbrs	r0, 7
    343c:	fd cf       	rjmp	.-6      	; 0x3438 <_Z16MPU6000_SPI_readh+0x1a>
    ;
  return SPDR;
    343e:	1e b5       	in	r17, 0x2e	; 46
  dump = SPI.transfer(addr);
  return_value = SPI.transfer(0);
  digitalWrite(MPU6000_CHIP_SELECT_PIN, HIGH);
    3440:	84 e0       	ldi	r24, 0x04	; 4
    3442:	61 e0       	ldi	r22, 0x01	; 1
    3444:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
  return(return_value);
}
    3448:	81 2f       	mov	r24, r17
    344a:	1f 91       	pop	r17
    344c:	08 95       	ret

0000344e <_Z12MPU6000_Readv>:
    // MPU_INT is connected to INT 0. Enable interrupt on INT0
    attachInterrupt(0,MPU6000_data_int,RISING);
}

// Read gyros and accel sensors on MPU6000
void MPU6000_Read()
    344e:	1f 93       	push	r17
{
  int byte_H;
  int byte_L;
  
  // Read AccelX
    byte_H = MPU6000_SPI_read(MPUREG_ACCEL_XOUT_H);
    3450:	8b e3       	ldi	r24, 0x3B	; 59
    3452:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    3456:	18 2f       	mov	r17, r24
    byte_L = MPU6000_SPI_read(MPUREG_ACCEL_XOUT_L);
    3458:	8c e3       	ldi	r24, 0x3C	; 60
    345a:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    accelX = (byte_H<<8)| byte_L;
    345e:	31 2f       	mov	r19, r17
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	28 2b       	or	r18, r24
    3466:	39 2b       	or	r19, r25
    3468:	30 93 23 04 	sts	0x0423, r19
    346c:	20 93 22 04 	sts	0x0422, r18
    // Read AccelY
    byte_H = MPU6000_SPI_read(MPUREG_ACCEL_YOUT_H);
    3470:	8d e3       	ldi	r24, 0x3D	; 61
    3472:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    3476:	18 2f       	mov	r17, r24
    byte_L = MPU6000_SPI_read(MPUREG_ACCEL_YOUT_L);
    3478:	8e e3       	ldi	r24, 0x3E	; 62
    347a:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    accelY = (byte_H<<8)| byte_L;
    347e:	31 2f       	mov	r19, r17
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	28 2b       	or	r18, r24
    3486:	39 2b       	or	r19, r25
    3488:	30 93 25 04 	sts	0x0425, r19
    348c:	20 93 24 04 	sts	0x0424, r18
    // Read AccelZ
    byte_H = MPU6000_SPI_read(MPUREG_ACCEL_ZOUT_H);
    3490:	8f e3       	ldi	r24, 0x3F	; 63
    3492:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    3496:	18 2f       	mov	r17, r24
    byte_L = MPU6000_SPI_read(MPUREG_ACCEL_ZOUT_L);
    3498:	80 e4       	ldi	r24, 0x40	; 64
    349a:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    accelZ = (byte_H<<8)| byte_L;
    349e:	31 2f       	mov	r19, r17
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	28 2b       	or	r18, r24
    34a6:	39 2b       	or	r19, r25
    34a8:	30 93 27 04 	sts	0x0427, r19
    34ac:	20 93 26 04 	sts	0x0426, r18
    //byte_H = MPU6000_SPI_read(MPUREG_TEMP_OUT_H);
    //byte_L = MPU6000_SPI_read(MPUREG_TEMP_OUT_L);
    //temp = (byte_H<<8)| byte_L; 
     
    // Read GyroX
    byte_H = MPU6000_SPI_read(MPUREG_GYRO_XOUT_H);
    34b0:	83 e4       	ldi	r24, 0x43	; 67
    34b2:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    34b6:	18 2f       	mov	r17, r24
    byte_L = MPU6000_SPI_read(MPUREG_GYRO_XOUT_L);
    34b8:	84 e4       	ldi	r24, 0x44	; 68
    34ba:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    gyroX = (byte_H<<8)| byte_L;
    34be:	31 2f       	mov	r19, r17
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	28 2b       	or	r18, r24
    34c6:	39 2b       	or	r19, r25
    34c8:	30 93 29 04 	sts	0x0429, r19
    34cc:	20 93 28 04 	sts	0x0428, r18
    // Read GyroY
    byte_H = MPU6000_SPI_read(MPUREG_GYRO_YOUT_H);
    34d0:	85 e4       	ldi	r24, 0x45	; 69
    34d2:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    34d6:	18 2f       	mov	r17, r24
    byte_L = MPU6000_SPI_read(MPUREG_GYRO_YOUT_L);
    34d8:	86 e4       	ldi	r24, 0x46	; 70
    34da:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    gyroY = (byte_H<<8)| byte_L;
    34de:	31 2f       	mov	r19, r17
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	28 2b       	or	r18, r24
    34e6:	39 2b       	or	r19, r25
    34e8:	30 93 2b 04 	sts	0x042B, r19
    34ec:	20 93 2a 04 	sts	0x042A, r18
    // Read GyroZ
    byte_H = MPU6000_SPI_read(MPUREG_GYRO_ZOUT_H);
    34f0:	87 e4       	ldi	r24, 0x47	; 71
    34f2:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    34f6:	18 2f       	mov	r17, r24
    byte_L = MPU6000_SPI_read(MPUREG_GYRO_ZOUT_L);
    34f8:	88 e4       	ldi	r24, 0x48	; 72
    34fa:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z16MPU6000_SPI_readh>
    gyroZ = (byte_H<<8)| byte_L;
    34fe:	31 2f       	mov	r19, r17
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	28 2b       	or	r18, r24
    3506:	39 2b       	or	r19, r25
    3508:	30 93 2d 04 	sts	0x042D, r19
    350c:	20 93 2c 04 	sts	0x042C, r18
}
    3510:	1f 91       	pop	r17
    3512:	08 95       	ret

00003514 <_Z12MPU6000_Initv>:

// MPU6000 Initialization and configuration
void MPU6000_Init(void)
{
    // MPU6000 chip select setup
    pinMode(MPU6000_CHIP_SELECT_PIN, OUTPUT);
    3514:	84 e0       	ldi	r24, 0x04	; 4
    3516:	61 e0       	ldi	r22, 0x01	; 1
    3518:	0e 94 ad 22 	call	0x455a	; 0x455a <pinMode>
    digitalWrite(MPU6000_CHIP_SELECT_PIN, HIGH);
    351c:	84 e0       	ldi	r24, 0x04	; 4
    351e:	61 e0       	ldi	r22, 0x01	; 1
    3520:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <digitalWrite>
    
    // SPI initialization
    SPI.begin();
    3524:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(SPI_CLOCK_DIV16);      // SPI at 1Mhz (on 16Mhz clock)
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN8SPIClass15setClockDividerEh>
    delay(10);
    352e:	6a e0       	ldi	r22, 0x0A	; 10
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    
    // Chip reset
    MPU6000_SPI_write(MPUREG_PWR_MGMT_1, BIT_H_RESET);
    353a:	8b e6       	ldi	r24, 0x6B	; 107
    353c:	60 e8       	ldi	r22, 0x80	; 128
    353e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(100);
    3542:	64 e6       	ldi	r22, 0x64	; 100
    3544:	70 e0       	ldi	r23, 0x00	; 0
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    // Wake up device and select GyroZ clock (better performance)
    MPU6000_SPI_write(MPUREG_PWR_MGMT_1, MPU_CLK_SEL_PLLGYROZ);
    354e:	8b e6       	ldi	r24, 0x6B	; 107
    3550:	63 e0       	ldi	r22, 0x03	; 3
    3552:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(1);
    3556:	61 e0       	ldi	r22, 0x01	; 1
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    // Disable I2C bus (recommended on datasheet)
    MPU6000_SPI_write(MPUREG_USER_CTRL, BIT_I2C_IF_DIS);
    3562:	8a e6       	ldi	r24, 0x6A	; 106
    3564:	60 e1       	ldi	r22, 0x10	; 16
    3566:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(1);
    356a:	61 e0       	ldi	r22, 0x01	; 1
    356c:	70 e0       	ldi	r23, 0x00	; 0
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    // SAMPLE RATE
    //MPU6000_SPI_write(MPUREG_SMPLRT_DIV,0x04);     // Sample rate = 200Hz    Fsample= 1Khz/(4+1) = 200Hz     
    MPU6000_SPI_write(MPUREG_SMPLRT_DIV,19);     // Sample rate = 50Hz    Fsample= 1Khz/(19+1) = 50Hz     
    3576:	89 e1       	ldi	r24, 0x19	; 25
    3578:	63 e1       	ldi	r22, 0x13	; 19
    357a:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(1);
    357e:	61 e0       	ldi	r22, 0x01	; 1
    3580:	70 e0       	ldi	r23, 0x00	; 0
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    // FS & DLPF   FS=2000º/s, DLPF = 20Hz (low pass filter)
    MPU6000_SPI_write(MPUREG_CONFIG, BITS_DLPF_CFG_20HZ);  
    358a:	8a e1       	ldi	r24, 0x1A	; 26
    358c:	64 e0       	ldi	r22, 0x04	; 4
    358e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(1);
    3592:	61 e0       	ldi	r22, 0x01	; 1
    3594:	70 e0       	ldi	r23, 0x00	; 0
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    MPU6000_SPI_write(MPUREG_GYRO_CONFIG,BITS_FS_2000DPS);  // Gyro scale 2000º/s
    359e:	8b e1       	ldi	r24, 0x1B	; 27
    35a0:	68 e1       	ldi	r22, 0x18	; 24
    35a2:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(1);
    35a6:	61 e0       	ldi	r22, 0x01	; 1
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    MPU6000_SPI_write(MPUREG_ACCEL_CONFIG,0x08);            // Accel scale 4g (4096LSB/g)
    35b2:	8c e1       	ldi	r24, 0x1C	; 28
    35b4:	68 e0       	ldi	r22, 0x08	; 8
    35b6:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(1);   
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	70 e0       	ldi	r23, 0x00	; 0
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    // INT CFG => Interrupt on Data Ready
    MPU6000_SPI_write(MPUREG_INT_ENABLE,BIT_RAW_RDY_EN);         // INT: Raw data ready
    35c6:	88 e3       	ldi	r24, 0x38	; 56
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(1);
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	70 e0       	ldi	r23, 0x00	; 0
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    MPU6000_SPI_write(MPUREG_INT_PIN_CFG,BIT_INT_ANYRD_2CLEAR);  // INT: Clear on any read
    35da:	87 e3       	ldi	r24, 0x37	; 55
    35dc:	60 e1       	ldi	r22, 0x10	; 16
    35de:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_Z17MPU6000_SPI_writehh>
    delay(1);
    35e2:	61 e0       	ldi	r22, 0x01	; 1
    35e4:	70 e0       	ldi	r23, 0x00	; 0
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
    // Oscillator set
    // MPU6000_SPI_write(MPUREG_PWR_MGMT_1,MPU_CLK_SEL_PLLGYROZ);
    delay(1);
    35ee:	61 e0       	ldi	r22, 0x01	; 1
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 19 22 	call	0x4432	; 0x4432 <delay>
  
    // MPU_INT is connected to INT 0. Enable interrupt on INT0
    attachInterrupt(0,MPU6000_data_int,RISING);
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	60 ef       	ldi	r22, 0xF0	; 240
    35fe:	79 e1       	ldi	r23, 0x19	; 25
    3600:	43 e0       	ldi	r20, 0x03	; 3
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	0e 94 18 20 	call	0x4030	; 0x4030 <attachInterrupt>
}
    3608:	08 95       	ret

0000360a <_Z9printdatav>:
#include "ArduImu_1_9_8_Modified.h"

void printdata(void)
    360a:	cf 92       	push	r12
    360c:	df 92       	push	r13
    360e:	ef 92       	push	r14
    3610:	ff 92       	push	r15
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	df 93       	push	r29
    3618:	cf 93       	push	r28
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	66 97       	sbiw	r28, 0x16	; 22
    3620:	0f b6       	in	r0, 0x3f	; 63
    3622:	f8 94       	cli
    3624:	de bf       	out	0x3e, r29	; 62
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	cd bf       	out	0x3d, r28	; 61
	long templong;
	byte IMU_ck_a=0;
	byte IMU_ck_b=0;
      
	//  This section outputs the gps binary message when new gps data is available
	if(GPS.new_data==1) {
    362a:	80 91 bd 03 	lds	r24, 0x03BD
    362e:	88 23       	and	r24, r24
    3630:	09 f4       	brne	.+2      	; 0x3634 <_Z9printdatav+0x2a>
    3632:	97 c0       	rjmp	.+302    	; 0x3762 <_Z9printdatav+0x158>
		#if PERFORMANCE_REPORTING == 1
			gps_messages_sent++;
		#endif
		GPS.new_data=0;
    3634:	10 92 bd 03 	sts	0x03BD, r1
		Serial.print("DIYd");  // This is the message preamble
    3638:	89 e7       	ldi	r24, 0x79	; 121
    363a:	93 e0       	ldi	r25, 0x03	; 3
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	71 e0       	ldi	r23, 0x01	; 1
    3640:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN5Print5printEPKc>
		IMU_buffer[0]=0x13;
    3644:	83 e1       	ldi	r24, 0x13	; 19
    3646:	89 83       	std	Y+1, r24	; 0x01
		ck=19;
		IMU_buffer[1] = 0x03;      
    3648:	83 e0       	ldi	r24, 0x03	; 3
    364a:	8a 83       	std	Y+2, r24	; 0x02

		templong = GPS.longitude; //Longitude *10**7 in 4 bytes
    364c:	80 91 a6 03 	lds	r24, 0x03A6
    3650:	90 91 a7 03 	lds	r25, 0x03A7
    3654:	a0 91 a8 03 	lds	r26, 0x03A8
    3658:	b0 91 a9 03 	lds	r27, 0x03A9
		IMU_buffer[2]=templong&0xff;
    365c:	8b 83       	std	Y+3, r24	; 0x03
		IMU_buffer[3]=(templong>>8)&0xff;
    365e:	29 2f       	mov	r18, r25
    3660:	3a 2f       	mov	r19, r26
    3662:	4b 2f       	mov	r20, r27
    3664:	55 27       	eor	r21, r21
    3666:	47 fd       	sbrc	r20, 7
    3668:	5a 95       	dec	r21
    366a:	2c 83       	std	Y+4, r18	; 0x04
		IMU_buffer[4]=(templong>>16)&0xff;
    366c:	9d 01       	movw	r18, r26
    366e:	55 27       	eor	r21, r21
    3670:	37 fd       	sbrc	r19, 7
    3672:	50 95       	com	r21
    3674:	45 2f       	mov	r20, r21
    3676:	2d 83       	std	Y+5, r18	; 0x05
		IMU_buffer[5]=(templong>>24)&0xff;
    3678:	8b 2f       	mov	r24, r27
    367a:	99 27       	eor	r25, r25
    367c:	aa 27       	eor	r26, r26
    367e:	bb 27       	eor	r27, r27
    3680:	8e 83       	std	Y+6, r24	; 0x06
      
		templong = GPS.latitude; //Latitude *10**7 in 4 bytes
    3682:	80 91 a2 03 	lds	r24, 0x03A2
    3686:	90 91 a3 03 	lds	r25, 0x03A3
    368a:	a0 91 a4 03 	lds	r26, 0x03A4
    368e:	b0 91 a5 03 	lds	r27, 0x03A5
		IMU_buffer[6]=templong&0xff;
    3692:	8f 83       	std	Y+7, r24	; 0x07
		IMU_buffer[7]=(templong>>8)&0xff;
    3694:	29 2f       	mov	r18, r25
    3696:	3a 2f       	mov	r19, r26
    3698:	4b 2f       	mov	r20, r27
    369a:	55 27       	eor	r21, r21
    369c:	47 fd       	sbrc	r20, 7
    369e:	5a 95       	dec	r21
    36a0:	28 87       	std	Y+8, r18	; 0x08
		IMU_buffer[8]=(templong>>16)&0xff;
    36a2:	9d 01       	movw	r18, r26
    36a4:	55 27       	eor	r21, r21
    36a6:	37 fd       	sbrc	r19, 7
    36a8:	50 95       	com	r21
    36aa:	45 2f       	mov	r20, r21
    36ac:	29 87       	std	Y+9, r18	; 0x09
		IMU_buffer[9]=(templong>>24)&0xff;
    36ae:	8b 2f       	mov	r24, r27
    36b0:	99 27       	eor	r25, r25
    36b2:	aa 27       	eor	r26, r26
    36b4:	bb 27       	eor	r27, r27
    36b6:	8a 87       	std	Y+10, r24	; 0x0a
      
		#if USE_BAROMETER==0
			tempint=GPS.altitude / 100;   // Altitude MSL in meters * 10 in 2 bytes
    36b8:	60 91 aa 03 	lds	r22, 0x03AA
    36bc:	70 91 ab 03 	lds	r23, 0x03AB
    36c0:	80 91 ac 03 	lds	r24, 0x03AC
    36c4:	90 91 ad 03 	lds	r25, 0x03AD
    36c8:	24 e6       	ldi	r18, 0x64	; 100
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e0       	ldi	r20, 0x00	; 0
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divmodsi4>
		#else
			alti();
			tempint = (press_alt * ALT_MIX + GPS.altitude * (100-ALT_MIX)) / 10000;	//Blended GPS and pressure altitude
		#endif
		IMU_buffer[10]=tempint&0xff;
    36d4:	2b 87       	std	Y+11, r18	; 0x0b
		IMU_buffer[11]=(tempint>>8)&0xff;
    36d6:	3c 87       	std	Y+12, r19	; 0x0c
      
		tempint=GPS.ground_speed;   // Speed in M/S * 100 in 2 bytes
    36d8:	80 91 ae 03 	lds	r24, 0x03AE
    36dc:	90 91 af 03 	lds	r25, 0x03AF
		IMU_buffer[12]=tempint&0xff;
    36e0:	8d 87       	std	Y+13, r24	; 0x0d
		IMU_buffer[13]=(tempint>>8)&0xff;
    36e2:	9e 87       	std	Y+14, r25	; 0x0e
        
		tempint=GPS.ground_course;   // course in degreees * 100 in 2 bytes
    36e4:	80 91 b2 03 	lds	r24, 0x03B2
    36e8:	90 91 b3 03 	lds	r25, 0x03B3
		IMU_buffer[14]=tempint&0xff;
    36ec:	8f 87       	std	Y+15, r24	; 0x0f
		IMU_buffer[15]=(tempint>>8)&0xff;
    36ee:	98 8b       	std	Y+16, r25	; 0x10
        
		IMU_buffer[16]=GPS.time&0xff;
    36f0:	80 91 9a 03 	lds	r24, 0x039A
    36f4:	90 91 9b 03 	lds	r25, 0x039B
    36f8:	a0 91 9c 03 	lds	r26, 0x039C
    36fc:	b0 91 9d 03 	lds	r27, 0x039D
    3700:	89 8b       	std	Y+17, r24	; 0x11
		IMU_buffer[17]=(GPS.time>>8)&0xff;
    3702:	29 2f       	mov	r18, r25
    3704:	3a 2f       	mov	r19, r26
    3706:	4b 2f       	mov	r20, r27
    3708:	55 27       	eor	r21, r21
    370a:	2a 8b       	std	Y+18, r18	; 0x12
		IMU_buffer[18]=(GPS.time>>16)&0xff;
    370c:	9d 01       	movw	r18, r26
    370e:	44 27       	eor	r20, r20
    3710:	55 27       	eor	r21, r21
    3712:	2b 8b       	std	Y+19, r18	; 0x13
		IMU_buffer[19]=(GPS.time>>24)&0xff;
    3714:	8b 2f       	mov	r24, r27
    3716:	99 27       	eor	r25, r25
    3718:	aa 27       	eor	r26, r26
    371a:	bb 27       	eor	r27, r27
    371c:	8c 8b       	std	Y+20, r24	; 0x14

        	IMU_buffer[20]=(imu_health>>8)&0xff;
    371e:	80 91 76 01 	lds	r24, 0x0176
    3722:	8d 8b       	std	Y+21, r24	; 0x15
    3724:	7e 01       	movw	r14, r28
    3726:	08 94       	sec
    3728:	e1 1c       	adc	r14, r1
    372a:	f1 1c       	adc	r15, r1
    372c:	87 01       	movw	r16, r14

		for (int i=0;i<ck+2;i++) Serial.write (IMU_buffer[i]); //PMR changed from Serial.print to Serial.write
    372e:	96 e1       	ldi	r25, 0x16	; 22
    3730:	c9 2e       	mov	r12, r25
    3732:	d1 2c       	mov	r13, r1
    3734:	cc 0e       	add	r12, r28
    3736:	dd 1e       	adc	r13, r29
    3738:	89 e7       	ldi	r24, 0x79	; 121
    373a:	93 e0       	ldi	r25, 0x03	; 3
    373c:	f8 01       	movw	r30, r16
    373e:	61 91       	ld	r22, Z+
    3740:	8f 01       	movw	r16, r30
    3742:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN10FastSerial5writeEh>
    3746:	0c 15       	cp	r16, r12
    3748:	1d 05       	cpc	r17, r13
    374a:	b1 f7       	brne	.-20     	; 0x3738 <_Z9printdatav+0x12e>
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	dd 24       	eor	r13, r13
		
		for (int i=0;i<ck+2;i++) {
			IMU_ck_a+=IMU_buffer[i];  //Calculates checksums
    3750:	f7 01       	movw	r30, r14
    3752:	81 91       	ld	r24, Z+
    3754:	7f 01       	movw	r14, r30
    3756:	68 0f       	add	r22, r24
			IMU_ck_b+=IMU_ck_a;       
    3758:	d6 0e       	add	r13, r22

        	IMU_buffer[20]=(imu_health>>8)&0xff;

		for (int i=0;i<ck+2;i++) Serial.write (IMU_buffer[i]); //PMR changed from Serial.print to Serial.write
		
		for (int i=0;i<ck+2;i++) {
    375a:	e0 17       	cp	r30, r16
    375c:	f1 07       	cpc	r31, r17
    375e:	c1 f7       	brne	.-16     	; 0x3750 <_Z9printdatav+0x146>
    3760:	8f c0       	rjmp	.+286    	; 0x3880 <_Z9printdatav+0x276>
      	Serial.write(IMU_ck_b); //PMR changed from Serial.print to Serial.write
  
	} else {
      
		// This section outputs the IMU orientatiom message
		Serial.print("DIYd");  // This is the message preamble
    3762:	89 e7       	ldi	r24, 0x79	; 121
    3764:	93 e0       	ldi	r25, 0x03	; 3
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	71 e0       	ldi	r23, 0x01	; 1
    376a:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN5Print5printEPKc>
		IMU_buffer[0]=0x06;
		ck=6;
		IMU_buffer[1] = 0x02;      

		tempint=ToDeg(roll)*100;  //Roll (degrees) * 100 in 2 bytes
    376e:	60 91 14 03 	lds	r22, 0x0314
    3772:	70 91 15 03 	lds	r23, 0x0315
    3776:	80 91 16 03 	lds	r24, 0x0316
    377a:	90 91 17 03 	lds	r25, 0x0317
    377e:	21 ee       	ldi	r18, 0xE1	; 225
    3780:	3e e2       	ldi	r19, 0x2E	; 46
    3782:	45 e6       	ldi	r20, 0x65	; 101
    3784:	52 e4       	ldi	r21, 0x42	; 66
    3786:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	48 ec       	ldi	r20, 0xC8	; 200
    3790:	52 e4       	ldi	r21, 0x42	; 66
    3792:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3796:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__fixsfsi>
    379a:	f6 2e       	mov	r15, r22
    379c:	e7 2e       	mov	r14, r23
		IMU_buffer[2]=tempint&0xff;
		IMU_buffer[3]=(tempint>>8)&0xff;
      
		tempint=ToDeg(pitch)*100;   //Pitch (degrees) * 100 in 2 bytes
    379e:	60 91 18 03 	lds	r22, 0x0318
    37a2:	70 91 19 03 	lds	r23, 0x0319
    37a6:	80 91 1a 03 	lds	r24, 0x031A
    37aa:	90 91 1b 03 	lds	r25, 0x031B
    37ae:	21 ee       	ldi	r18, 0xE1	; 225
    37b0:	3e e2       	ldi	r19, 0x2E	; 46
    37b2:	45 e6       	ldi	r20, 0x65	; 101
    37b4:	52 e4       	ldi	r21, 0x42	; 66
    37b6:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	48 ec       	ldi	r20, 0xC8	; 200
    37c0:	52 e4       	ldi	r21, 0x42	; 66
    37c2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    37c6:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__fixsfsi>
    37ca:	16 2f       	mov	r17, r22
    37cc:	07 2f       	mov	r16, r23
		IMU_buffer[4]=tempint&0xff;
		IMU_buffer[5]=(tempint>>8)&0xff;
      
		templong=ToDeg(yaw)*100;  //Yaw (degrees) * 100 in 2 bytes
    37ce:	60 91 1c 03 	lds	r22, 0x031C
    37d2:	70 91 1d 03 	lds	r23, 0x031D
    37d6:	80 91 1e 03 	lds	r24, 0x031E
    37da:	90 91 1f 03 	lds	r25, 0x031F
    37de:	21 ee       	ldi	r18, 0xE1	; 225
    37e0:	3e e2       	ldi	r19, 0x2E	; 46
    37e2:	45 e6       	ldi	r20, 0x65	; 101
    37e4:	52 e4       	ldi	r21, 0x42	; 66
    37e6:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	48 ec       	ldi	r20, 0xC8	; 200
    37f0:	52 e4       	ldi	r21, 0x42	; 66
    37f2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    37f6:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__fixsfsi>
    37fa:	9b 01       	movw	r18, r22
    37fc:	ac 01       	movw	r20, r24
		if(templong>18000) templong -=36000;
    37fe:	61 35       	cpi	r22, 0x51	; 81
    3800:	f6 e4       	ldi	r31, 0x46	; 70
    3802:	7f 07       	cpc	r23, r31
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	8f 07       	cpc	r24, r31
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	9f 07       	cpc	r25, r31
    380c:	2c f0       	brlt	.+10     	; 0x3818 <_Z9printdatav+0x20e>
    380e:	20 5a       	subi	r18, 0xA0	; 160
    3810:	3c 48       	sbci	r19, 0x8C	; 140
    3812:	40 40       	sbci	r20, 0x00	; 0
    3814:	50 40       	sbci	r21, 0x00	; 0
    3816:	0c c0       	rjmp	.+24     	; 0x3830 <_Z9printdatav+0x226>
		if(templong<-18000) templong +=36000;
    3818:	20 3b       	cpi	r18, 0xB0	; 176
    381a:	89 eb       	ldi	r24, 0xB9	; 185
    381c:	38 07       	cpc	r19, r24
    381e:	8f ef       	ldi	r24, 0xFF	; 255
    3820:	48 07       	cpc	r20, r24
    3822:	8f ef       	ldi	r24, 0xFF	; 255
    3824:	58 07       	cpc	r21, r24
    3826:	24 f4       	brge	.+8      	; 0x3830 <_Z9printdatav+0x226>
    3828:	20 56       	subi	r18, 0x60	; 96
    382a:	33 47       	sbci	r19, 0x73	; 115
    382c:	4f 4f       	sbci	r20, 0xFF	; 255
    382e:	5f 4f       	sbci	r21, 0xFF	; 255
  
	} else {
      
		// This section outputs the IMU orientatiom message
		Serial.print("DIYd");  // This is the message preamble
		IMU_buffer[0]=0x06;
    3830:	86 e0       	ldi	r24, 0x06	; 6
    3832:	89 83       	std	Y+1, r24	; 0x01
		ck=6;
		IMU_buffer[1] = 0x02;      
    3834:	82 e0       	ldi	r24, 0x02	; 2
    3836:	8a 83       	std	Y+2, r24	; 0x02

		tempint=ToDeg(roll)*100;  //Roll (degrees) * 100 in 2 bytes
		IMU_buffer[2]=tempint&0xff;
    3838:	fb 82       	std	Y+3, r15	; 0x03
		IMU_buffer[3]=(tempint>>8)&0xff;
    383a:	ec 82       	std	Y+4, r14	; 0x04
      
		tempint=ToDeg(pitch)*100;   //Pitch (degrees) * 100 in 2 bytes
		IMU_buffer[4]=tempint&0xff;
    383c:	1d 83       	std	Y+5, r17	; 0x05
		IMU_buffer[5]=(tempint>>8)&0xff;
    383e:	0e 83       	std	Y+6, r16	; 0x06
      
		templong=ToDeg(yaw)*100;  //Yaw (degrees) * 100 in 2 bytes
		if(templong>18000) templong -=36000;
		if(templong<-18000) templong +=36000;
		tempint = templong;
		IMU_buffer[6]=tempint&0xff;
    3840:	2f 83       	std	Y+7, r18	; 0x07
		IMU_buffer[7]=(tempint>>8)&0xff;
    3842:	38 87       	std	Y+8, r19	; 0x08
    3844:	7e 01       	movw	r14, r28
    3846:	08 94       	sec
    3848:	e1 1c       	adc	r14, r1
    384a:	f1 1c       	adc	r15, r1
    384c:	87 01       	movw	r16, r14
      
		for (int i=0;i<ck+2;i++) Serial.write (IMU_buffer[i]);//PMR changed from Serial.print to Serial.write
    384e:	89 e0       	ldi	r24, 0x09	; 9
    3850:	c8 2e       	mov	r12, r24
    3852:	d1 2c       	mov	r13, r1
    3854:	cc 0e       	add	r12, r28
    3856:	dd 1e       	adc	r13, r29
    3858:	89 e7       	ldi	r24, 0x79	; 121
    385a:	93 e0       	ldi	r25, 0x03	; 3
    385c:	f8 01       	movw	r30, r16
    385e:	61 91       	ld	r22, Z+
    3860:	8f 01       	movw	r16, r30
    3862:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN10FastSerial5writeEh>
    3866:	0c 15       	cp	r16, r12
    3868:	1d 05       	cpc	r17, r13
    386a:	b1 f7       	brne	.-20     	; 0x3858 <_Z9printdatav+0x24e>
    386c:	60 e0       	ldi	r22, 0x00	; 0
    386e:	dd 24       	eor	r13, r13
	  
		for (int i=0;i<ck+2;i++) {
			IMU_ck_a+=IMU_buffer[i];  //Calculates checksums
    3870:	f7 01       	movw	r30, r14
    3872:	81 91       	ld	r24, Z+
    3874:	7f 01       	movw	r14, r30
    3876:	68 0f       	add	r22, r24
			IMU_ck_b+=IMU_ck_a;       
    3878:	d6 0e       	add	r13, r22
		IMU_buffer[6]=tempint&0xff;
		IMU_buffer[7]=(tempint>>8)&0xff;
      
		for (int i=0;i<ck+2;i++) Serial.write (IMU_buffer[i]);//PMR changed from Serial.print to Serial.write
	  
		for (int i=0;i<ck+2;i++) {
    387a:	e0 17       	cp	r30, r16
    387c:	f1 07       	cpc	r31, r17
    387e:	c1 f7       	brne	.-16     	; 0x3870 <_Z9printdatav+0x266>
			IMU_ck_a+=IMU_buffer[i];  //Calculates checksums
			IMU_ck_b+=IMU_ck_a;       
		}
		Serial.write(IMU_ck_a);//PMR changed from Serial.print to Serial.write
    3880:	89 e7       	ldi	r24, 0x79	; 121
    3882:	93 e0       	ldi	r25, 0x03	; 3
    3884:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN10FastSerial5writeEh>
		Serial.write(IMU_ck_b);//PMR changed from Serial.print to Serial.write
    3888:	89 e7       	ldi	r24, 0x79	; 121
    388a:	93 e0       	ldi	r25, 0x03	; 3
    388c:	6d 2d       	mov	r22, r13
    388e:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN10FastSerial5writeEh>
          
    }
        
#endif  
}
    3892:	66 96       	adiw	r28, 0x16	; 22
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	1f 91       	pop	r17
    38a4:	0f 91       	pop	r16
    38a6:	ff 90       	pop	r15
    38a8:	ef 90       	pop	r14
    38aa:	df 90       	pop	r13
    38ac:	cf 90       	pop	r12
    38ae:	08 95       	ret

000038b0 <_Z18Vector_Dot_ProductPfS_>:
#include "ArduImu_1_9_8_Modified.h"
//Computes the dot product of two vectors
float Vector_Dot_Product(float vector1[3],float vector2[3])
    38b0:	af 92       	push	r10
    38b2:	bf 92       	push	r11
    38b4:	cf 92       	push	r12
    38b6:	df 92       	push	r13
    38b8:	ef 92       	push	r14
    38ba:	ff 92       	push	r15
    38bc:	0f 93       	push	r16
    38be:	1f 93       	push	r17
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	5c 01       	movw	r10, r24
    38c6:	6b 01       	movw	r12, r22
    38c8:	0f 2e       	mov	r0, r31
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	ef 2e       	mov	r14, r31
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	ff 2e       	mov	r15, r31
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	0f 2f       	mov	r16, r31
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	1f 2f       	mov	r17, r31
    38da:	f0 2d       	mov	r31, r0
    38dc:	c0 e0       	ldi	r28, 0x00	; 0
    38de:	d0 e0       	ldi	r29, 0x00	; 0
{
  float op=0;
  
  for(int c=0; c<3; c++)
  {
  op+=vector1[c]*vector2[c];
    38e0:	f5 01       	movw	r30, r10
    38e2:	ec 0f       	add	r30, r28
    38e4:	fd 1f       	adc	r31, r29
    38e6:	d6 01       	movw	r26, r12
    38e8:	ac 0f       	add	r26, r28
    38ea:	bd 1f       	adc	r27, r29
    38ec:	60 81       	ld	r22, Z
    38ee:	71 81       	ldd	r23, Z+1	; 0x01
    38f0:	82 81       	ldd	r24, Z+2	; 0x02
    38f2:	93 81       	ldd	r25, Z+3	; 0x03
    38f4:	2d 91       	ld	r18, X+
    38f6:	3d 91       	ld	r19, X+
    38f8:	4d 91       	ld	r20, X+
    38fa:	5c 91       	ld	r21, X
    38fc:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3900:	9b 01       	movw	r18, r22
    3902:	ac 01       	movw	r20, r24
    3904:	c8 01       	movw	r24, r16
    3906:	b7 01       	movw	r22, r14
    3908:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    390c:	7b 01       	movw	r14, r22
    390e:	8c 01       	movw	r16, r24
    3910:	24 96       	adiw	r28, 0x04	; 4
//Computes the dot product of two vectors
float Vector_Dot_Product(float vector1[3],float vector2[3])
{
  float op=0;
  
  for(int c=0; c<3; c++)
    3912:	cc 30       	cpi	r28, 0x0C	; 12
    3914:	d1 05       	cpc	r29, r1
    3916:	21 f7       	brne	.-56     	; 0x38e0 <_Z18Vector_Dot_ProductPfS_+0x30>
  {
  op+=vector1[c]*vector2[c];
  }
  
  return op; 
}
    3918:	c8 01       	movw	r24, r16
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	1f 91       	pop	r17
    3920:	0f 91       	pop	r16
    3922:	ff 90       	pop	r15
    3924:	ef 90       	pop	r14
    3926:	df 90       	pop	r13
    3928:	cf 90       	pop	r12
    392a:	bf 90       	pop	r11
    392c:	af 90       	pop	r10
    392e:	08 95       	ret

00003930 <_Z20Vector_Cross_ProductPfS_S_>:

//Computes the cross product of two vectors
void Vector_Cross_Product(float vectorOut[3], float v1[3],float v2[3])
    3930:	8f 92       	push	r8
    3932:	9f 92       	push	r9
    3934:	af 92       	push	r10
    3936:	bf 92       	push	r11
    3938:	cf 92       	push	r12
    393a:	df 92       	push	r13
    393c:	ef 92       	push	r14
    393e:	ff 92       	push	r15
    3940:	0f 93       	push	r16
    3942:	1f 93       	push	r17
    3944:	4c 01       	movw	r8, r24
    3946:	6b 01       	movw	r12, r22
    3948:	5a 01       	movw	r10, r20
{
  vectorOut[0]= (v1[1]*v2[2]) - (v1[2]*v2[1]);
    394a:	fb 01       	movw	r30, r22
    394c:	64 81       	ldd	r22, Z+4	; 0x04
    394e:	75 81       	ldd	r23, Z+5	; 0x05
    3950:	86 81       	ldd	r24, Z+6	; 0x06
    3952:	97 81       	ldd	r25, Z+7	; 0x07
    3954:	fa 01       	movw	r30, r20
    3956:	20 85       	ldd	r18, Z+8	; 0x08
    3958:	31 85       	ldd	r19, Z+9	; 0x09
    395a:	42 85       	ldd	r20, Z+10	; 0x0a
    395c:	53 85       	ldd	r21, Z+11	; 0x0b
    395e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3962:	7b 01       	movw	r14, r22
    3964:	8c 01       	movw	r16, r24
    3966:	f6 01       	movw	r30, r12
    3968:	60 85       	ldd	r22, Z+8	; 0x08
    396a:	71 85       	ldd	r23, Z+9	; 0x09
    396c:	82 85       	ldd	r24, Z+10	; 0x0a
    396e:	93 85       	ldd	r25, Z+11	; 0x0b
    3970:	f5 01       	movw	r30, r10
    3972:	24 81       	ldd	r18, Z+4	; 0x04
    3974:	35 81       	ldd	r19, Z+5	; 0x05
    3976:	46 81       	ldd	r20, Z+6	; 0x06
    3978:	57 81       	ldd	r21, Z+7	; 0x07
    397a:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    397e:	9b 01       	movw	r18, r22
    3980:	ac 01       	movw	r20, r24
    3982:	c8 01       	movw	r24, r16
    3984:	b7 01       	movw	r22, r14
    3986:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    398a:	f4 01       	movw	r30, r8
    398c:	60 83       	st	Z, r22
    398e:	71 83       	std	Z+1, r23	; 0x01
    3990:	82 83       	std	Z+2, r24	; 0x02
    3992:	93 83       	std	Z+3, r25	; 0x03
  vectorOut[1]= (v1[2]*v2[0]) - (v1[0]*v2[2]);
    3994:	f6 01       	movw	r30, r12
    3996:	60 85       	ldd	r22, Z+8	; 0x08
    3998:	71 85       	ldd	r23, Z+9	; 0x09
    399a:	82 85       	ldd	r24, Z+10	; 0x0a
    399c:	93 85       	ldd	r25, Z+11	; 0x0b
    399e:	f5 01       	movw	r30, r10
    39a0:	20 81       	ld	r18, Z
    39a2:	31 81       	ldd	r19, Z+1	; 0x01
    39a4:	42 81       	ldd	r20, Z+2	; 0x02
    39a6:	53 81       	ldd	r21, Z+3	; 0x03
    39a8:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    39ac:	7b 01       	movw	r14, r22
    39ae:	8c 01       	movw	r16, r24
    39b0:	f6 01       	movw	r30, r12
    39b2:	60 81       	ld	r22, Z
    39b4:	71 81       	ldd	r23, Z+1	; 0x01
    39b6:	82 81       	ldd	r24, Z+2	; 0x02
    39b8:	93 81       	ldd	r25, Z+3	; 0x03
    39ba:	f5 01       	movw	r30, r10
    39bc:	20 85       	ldd	r18, Z+8	; 0x08
    39be:	31 85       	ldd	r19, Z+9	; 0x09
    39c0:	42 85       	ldd	r20, Z+10	; 0x0a
    39c2:	53 85       	ldd	r21, Z+11	; 0x0b
    39c4:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    39c8:	9b 01       	movw	r18, r22
    39ca:	ac 01       	movw	r20, r24
    39cc:	c8 01       	movw	r24, r16
    39ce:	b7 01       	movw	r22, r14
    39d0:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    39d4:	f4 01       	movw	r30, r8
    39d6:	64 83       	std	Z+4, r22	; 0x04
    39d8:	75 83       	std	Z+5, r23	; 0x05
    39da:	86 83       	std	Z+6, r24	; 0x06
    39dc:	97 83       	std	Z+7, r25	; 0x07
  vectorOut[2]= (v1[0]*v2[1]) - (v1[1]*v2[0]);
    39de:	f6 01       	movw	r30, r12
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	f5 01       	movw	r30, r10
    39ea:	24 81       	ldd	r18, Z+4	; 0x04
    39ec:	35 81       	ldd	r19, Z+5	; 0x05
    39ee:	46 81       	ldd	r20, Z+6	; 0x06
    39f0:	57 81       	ldd	r21, Z+7	; 0x07
    39f2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    39f6:	7b 01       	movw	r14, r22
    39f8:	8c 01       	movw	r16, r24
    39fa:	f6 01       	movw	r30, r12
    39fc:	64 81       	ldd	r22, Z+4	; 0x04
    39fe:	75 81       	ldd	r23, Z+5	; 0x05
    3a00:	86 81       	ldd	r24, Z+6	; 0x06
    3a02:	97 81       	ldd	r25, Z+7	; 0x07
    3a04:	f5 01       	movw	r30, r10
    3a06:	20 81       	ld	r18, Z
    3a08:	31 81       	ldd	r19, Z+1	; 0x01
    3a0a:	42 81       	ldd	r20, Z+2	; 0x02
    3a0c:	53 81       	ldd	r21, Z+3	; 0x03
    3a0e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3a12:	9b 01       	movw	r18, r22
    3a14:	ac 01       	movw	r20, r24
    3a16:	c8 01       	movw	r24, r16
    3a18:	b7 01       	movw	r22, r14
    3a1a:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    3a1e:	f4 01       	movw	r30, r8
    3a20:	60 87       	std	Z+8, r22	; 0x08
    3a22:	71 87       	std	Z+9, r23	; 0x09
    3a24:	82 87       	std	Z+10, r24	; 0x0a
    3a26:	93 87       	std	Z+11, r25	; 0x0b
}
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	ff 90       	pop	r15
    3a2e:	ef 90       	pop	r14
    3a30:	df 90       	pop	r13
    3a32:	cf 90       	pop	r12
    3a34:	bf 90       	pop	r11
    3a36:	af 90       	pop	r10
    3a38:	9f 90       	pop	r9
    3a3a:	8f 90       	pop	r8
    3a3c:	08 95       	ret

00003a3e <_Z12Vector_ScalePfS_f>:

//Multiply the vector by a scalar. 
void Vector_Scale(float vectorOut[3],float vectorIn[3], float scale2)
    3a3e:	8f 92       	push	r8
    3a40:	9f 92       	push	r9
    3a42:	af 92       	push	r10
    3a44:	bf 92       	push	r11
    3a46:	cf 92       	push	r12
    3a48:	df 92       	push	r13
    3a4a:	ef 92       	push	r14
    3a4c:	ff 92       	push	r15
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	4c 01       	movw	r8, r24
    3a58:	5b 01       	movw	r10, r22
    3a5a:	69 01       	movw	r12, r18
    3a5c:	7a 01       	movw	r14, r20
    3a5e:	c0 e0       	ldi	r28, 0x00	; 0
    3a60:	d0 e0       	ldi	r29, 0x00	; 0
{
  for(int c=0; c<3; c++)
  {
   vectorOut[c]=vectorIn[c]*scale2; 
    3a62:	84 01       	movw	r16, r8
    3a64:	0c 0f       	add	r16, r28
    3a66:	1d 1f       	adc	r17, r29
    3a68:	f5 01       	movw	r30, r10
    3a6a:	ec 0f       	add	r30, r28
    3a6c:	fd 1f       	adc	r31, r29
    3a6e:	60 81       	ld	r22, Z
    3a70:	71 81       	ldd	r23, Z+1	; 0x01
    3a72:	82 81       	ldd	r24, Z+2	; 0x02
    3a74:	93 81       	ldd	r25, Z+3	; 0x03
    3a76:	a7 01       	movw	r20, r14
    3a78:	96 01       	movw	r18, r12
    3a7a:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3a7e:	f8 01       	movw	r30, r16
    3a80:	60 83       	st	Z, r22
    3a82:	71 83       	std	Z+1, r23	; 0x01
    3a84:	82 83       	std	Z+2, r24	; 0x02
    3a86:	93 83       	std	Z+3, r25	; 0x03
    3a88:	24 96       	adiw	r28, 0x04	; 4
}

//Multiply the vector by a scalar. 
void Vector_Scale(float vectorOut[3],float vectorIn[3], float scale2)
{
  for(int c=0; c<3; c++)
    3a8a:	cc 30       	cpi	r28, 0x0C	; 12
    3a8c:	d1 05       	cpc	r29, r1
    3a8e:	49 f7       	brne	.-46     	; 0x3a62 <_Z12Vector_ScalePfS_f+0x24>
  {
   vectorOut[c]=vectorIn[c]*scale2; 
  }
}
    3a90:	df 91       	pop	r29
    3a92:	cf 91       	pop	r28
    3a94:	1f 91       	pop	r17
    3a96:	0f 91       	pop	r16
    3a98:	ff 90       	pop	r15
    3a9a:	ef 90       	pop	r14
    3a9c:	df 90       	pop	r13
    3a9e:	cf 90       	pop	r12
    3aa0:	bf 90       	pop	r11
    3aa2:	af 90       	pop	r10
    3aa4:	9f 90       	pop	r9
    3aa6:	8f 90       	pop	r8
    3aa8:	08 95       	ret

00003aaa <_Z10Vector_AddPfS_S_>:

void Vector_Add(float vectorOut[3],float vectorIn1[3], float vectorIn2[3])
    3aaa:	af 92       	push	r10
    3aac:	bf 92       	push	r11
    3aae:	cf 92       	push	r12
    3ab0:	df 92       	push	r13
    3ab2:	ef 92       	push	r14
    3ab4:	ff 92       	push	r15
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	5c 01       	movw	r10, r24
    3ac0:	6b 01       	movw	r12, r22
    3ac2:	7a 01       	movw	r14, r20
    3ac4:	c0 e0       	ldi	r28, 0x00	; 0
    3ac6:	d0 e0       	ldi	r29, 0x00	; 0
{
  for(int c=0; c<3; c++)
  {
     vectorOut[c]=vectorIn1[c]+vectorIn2[c];
    3ac8:	85 01       	movw	r16, r10
    3aca:	0c 0f       	add	r16, r28
    3acc:	1d 1f       	adc	r17, r29
    3ace:	f6 01       	movw	r30, r12
    3ad0:	ec 0f       	add	r30, r28
    3ad2:	fd 1f       	adc	r31, r29
    3ad4:	d7 01       	movw	r26, r14
    3ad6:	ac 0f       	add	r26, r28
    3ad8:	bd 1f       	adc	r27, r29
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	2d 91       	ld	r18, X+
    3ae4:	3d 91       	ld	r19, X+
    3ae6:	4d 91       	ld	r20, X+
    3ae8:	5c 91       	ld	r21, X
    3aea:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    3aee:	f8 01       	movw	r30, r16
    3af0:	60 83       	st	Z, r22
    3af2:	71 83       	std	Z+1, r23	; 0x01
    3af4:	82 83       	std	Z+2, r24	; 0x02
    3af6:	93 83       	std	Z+3, r25	; 0x03
    3af8:	24 96       	adiw	r28, 0x04	; 4
  }
}

void Vector_Add(float vectorOut[3],float vectorIn1[3], float vectorIn2[3])
{
  for(int c=0; c<3; c++)
    3afa:	cc 30       	cpi	r28, 0x0C	; 12
    3afc:	d1 05       	cpc	r29, r1
    3afe:	21 f7       	brne	.-56     	; 0x3ac8 <_Z10Vector_AddPfS_S_+0x1e>
  {
     vectorOut[c]=vectorIn1[c]+vectorIn2[c];
  }
}
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	1f 91       	pop	r17
    3b06:	0f 91       	pop	r16
    3b08:	ff 90       	pop	r15
    3b0a:	ef 90       	pop	r14
    3b0c:	df 90       	pop	r13
    3b0e:	cf 90       	pop	r12
    3b10:	bf 90       	pop	r11
    3b12:	af 90       	pop	r10
    3b14:	08 95       	ret

00003b16 <_Z15Matrix_MultiplyPA3_fS0_S0_>:
#include "ArduImu_1_9_8_Modified.h"
/**************************************************/
//Multiply two 3x3 matrixs. This function developed by Jordi can be easily adapted to multiple n*n matrix's. (Pero me da flojera!). 
void Matrix_Multiply(float a[3][3], float b[3][3],float mat[3][3])
    3b16:	2f 92       	push	r2
    3b18:	3f 92       	push	r3
    3b1a:	4f 92       	push	r4
    3b1c:	5f 92       	push	r5
    3b1e:	6f 92       	push	r6
    3b20:	7f 92       	push	r7
    3b22:	8f 92       	push	r8
    3b24:	9f 92       	push	r9
    3b26:	af 92       	push	r10
    3b28:	bf 92       	push	r11
    3b2a:	cf 92       	push	r12
    3b2c:	df 92       	push	r13
    3b2e:	ef 92       	push	r14
    3b30:	ff 92       	push	r15
    3b32:	0f 93       	push	r16
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	3b 01       	movw	r6, r22
    3b3c:	1a 01       	movw	r2, r20
    3b3e:	6c 01       	movw	r12, r24
    3b40:	aa 24       	eor	r10, r10
    3b42:	bb 24       	eor	r11, r11
{
  float op[3]; 
  for(int x=0; x<3; x++)
  {
    for(int y=0; y<3; y++)
    3b44:	8c e0       	ldi	r24, 0x0C	; 12
    3b46:	48 2e       	mov	r4, r24
    3b48:	51 2c       	mov	r5, r1
    3b4a:	46 0e       	add	r4, r22
    3b4c:	57 1e       	adc	r5, r23
    3b4e:	45 c0       	rjmp	.+138    	; 0x3bda <_Z15Matrix_MultiplyPA3_fS0_S0_+0xc4>
      for(int w=0; w<3; w++)
      {
       op[w]=a[x][w]*b[w][y];
      } 
      mat[x][y]=0;
      mat[x][y]=op[0]+op[1]+op[2];
    3b50:	f6 01       	movw	r30, r12
    3b52:	60 81       	ld	r22, Z
    3b54:	71 81       	ldd	r23, Z+1	; 0x01
    3b56:	82 81       	ldd	r24, Z+2	; 0x02
    3b58:	93 81       	ldd	r25, Z+3	; 0x03
    3b5a:	28 81       	ld	r18, Y
    3b5c:	39 81       	ldd	r19, Y+1	; 0x01
    3b5e:	4a 81       	ldd	r20, Y+2	; 0x02
    3b60:	5b 81       	ldd	r21, Y+3	; 0x03
    3b62:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3b66:	7b 01       	movw	r14, r22
    3b68:	8c 01       	movw	r16, r24
    3b6a:	f6 01       	movw	r30, r12
    3b6c:	64 81       	ldd	r22, Z+4	; 0x04
    3b6e:	75 81       	ldd	r23, Z+5	; 0x05
    3b70:	86 81       	ldd	r24, Z+6	; 0x06
    3b72:	97 81       	ldd	r25, Z+7	; 0x07
    3b74:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b76:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b78:	4e 85       	ldd	r20, Y+14	; 0x0e
    3b7a:	5f 85       	ldd	r21, Y+15	; 0x0f
    3b7c:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3b80:	9b 01       	movw	r18, r22
    3b82:	ac 01       	movw	r20, r24
    3b84:	c8 01       	movw	r24, r16
    3b86:	b7 01       	movw	r22, r14
    3b88:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    3b8c:	7b 01       	movw	r14, r22
    3b8e:	8c 01       	movw	r16, r24
    3b90:	f6 01       	movw	r30, r12
    3b92:	60 85       	ldd	r22, Z+8	; 0x08
    3b94:	71 85       	ldd	r23, Z+9	; 0x09
    3b96:	82 85       	ldd	r24, Z+10	; 0x0a
    3b98:	93 85       	ldd	r25, Z+11	; 0x0b
    3b9a:	28 8d       	ldd	r18, Y+24	; 0x18
    3b9c:	39 8d       	ldd	r19, Y+25	; 0x19
    3b9e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3ba0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3ba2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3ba6:	9b 01       	movw	r18, r22
    3ba8:	ac 01       	movw	r20, r24
    3baa:	c8 01       	movw	r24, r16
    3bac:	b7 01       	movw	r22, r14
    3bae:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    3bb2:	f4 01       	movw	r30, r8
    3bb4:	61 93       	st	Z+, r22
    3bb6:	71 93       	st	Z+, r23
    3bb8:	81 93       	st	Z+, r24
    3bba:	91 93       	st	Z+, r25
    3bbc:	4f 01       	movw	r8, r30
    3bbe:	24 96       	adiw	r28, 0x04	; 4
void Matrix_Multiply(float a[3][3], float b[3][3],float mat[3][3])
{
  float op[3]; 
  for(int x=0; x<3; x++)
  {
    for(int y=0; y<3; y++)
    3bc0:	c4 15       	cp	r28, r4
    3bc2:	d5 05       	cpc	r29, r5
    3bc4:	29 f6       	brne	.-118    	; 0x3b50 <_Z15Matrix_MultiplyPA3_fS0_S0_+0x3a>
    3bc6:	8c e0       	ldi	r24, 0x0C	; 12
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	a8 0e       	add	r10, r24
    3bcc:	b9 1e       	adc	r11, r25
    3bce:	c8 0e       	add	r12, r24
    3bd0:	d9 1e       	adc	r13, r25
/**************************************************/
//Multiply two 3x3 matrixs. This function developed by Jordi can be easily adapted to multiple n*n matrix's. (Pero me da flojera!). 
void Matrix_Multiply(float a[3][3], float b[3][3],float mat[3][3])
{
  float op[3]; 
  for(int x=0; x<3; x++)
    3bd2:	94 e2       	ldi	r25, 0x24	; 36
    3bd4:	a9 16       	cp	r10, r25
    3bd6:	b1 04       	cpc	r11, r1
    3bd8:	29 f0       	breq	.+10     	; 0x3be4 <_Z15Matrix_MultiplyPA3_fS0_S0_+0xce>
    3bda:	e3 01       	movw	r28, r6
    3bdc:	41 01       	movw	r8, r2
    3bde:	8a 0c       	add	r8, r10
    3be0:	9b 1c       	adc	r9, r11
    3be2:	b6 cf       	rjmp	.-148    	; 0x3b50 <_Z15Matrix_MultiplyPA3_fS0_S0_+0x3a>
      mat[x][y]=op[0]+op[1]+op[2];
      
      float test=mat[x][y];
    }
  }
}
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	1f 91       	pop	r17
    3bea:	0f 91       	pop	r16
    3bec:	ff 90       	pop	r15
    3bee:	ef 90       	pop	r14
    3bf0:	df 90       	pop	r13
    3bf2:	cf 90       	pop	r12
    3bf4:	bf 90       	pop	r11
    3bf6:	af 90       	pop	r10
    3bf8:	9f 90       	pop	r9
    3bfa:	8f 90       	pop	r8
    3bfc:	7f 90       	pop	r7
    3bfe:	6f 90       	pop	r6
    3c00:	5f 90       	pop	r5
    3c02:	4f 90       	pop	r4
    3c04:	3f 90       	pop	r3
    3c06:	2f 90       	pop	r2
    3c08:	08 95       	ret

00003c0a <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    3c0a:	cf 92       	push	r12
    3c0c:	df 92       	push	r13
    3c0e:	ef 92       	push	r14
    3c10:	ff 92       	push	r15
    3c12:	0f 93       	push	r16
    3c14:	1f 93       	push	r17
    3c16:	cf 93       	push	r28
    3c18:	df 93       	push	r29
    3c1a:	7c 01       	movw	r14, r24
    3c1c:	6b 01       	movw	r12, r22
    3c1e:	8a 01       	movw	r16, r20
    3c20:	c0 e0       	ldi	r28, 0x00	; 0
    3c22:	d0 e0       	ldi	r29, 0x00	; 0
    3c24:	0f c0       	rjmp	.+30     	; 0x3c44 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    3c26:	d6 01       	movw	r26, r12
    3c28:	6d 91       	ld	r22, X+
    3c2a:	6d 01       	movw	r12, r26
    3c2c:	d7 01       	movw	r26, r14
    3c2e:	ed 91       	ld	r30, X+
    3c30:	fc 91       	ld	r31, X
    3c32:	01 90       	ld	r0, Z+
    3c34:	f0 81       	ld	r31, Z
    3c36:	e0 2d       	mov	r30, r0
    3c38:	c7 01       	movw	r24, r14
    3c3a:	09 95       	icall
    3c3c:	c8 0f       	add	r28, r24
    3c3e:	d9 1f       	adc	r29, r25
    3c40:	01 50       	subi	r16, 0x01	; 1
    3c42:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3c44:	01 15       	cp	r16, r1
    3c46:	11 05       	cpc	r17, r1
    3c48:	71 f7       	brne	.-36     	; 0x3c26 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	1f 91       	pop	r17
    3c52:	0f 91       	pop	r16
    3c54:	ff 90       	pop	r15
    3c56:	ef 90       	pop	r14
    3c58:	df 90       	pop	r13
    3c5a:	cf 90       	pop	r12
    3c5c:	08 95       	ret

00003c5e <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    3c5e:	ef 92       	push	r14
    3c60:	ff 92       	push	r15
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3c68:	dc 01       	movw	r26, r24
    3c6a:	ed 91       	ld	r30, X+
    3c6c:	fc 91       	ld	r31, X
    3c6e:	01 90       	ld	r0, Z+
    3c70:	f0 81       	ld	r31, Z
    3c72:	e0 2d       	mov	r30, r0
    3c74:	6d e0       	ldi	r22, 0x0D	; 13
    3c76:	09 95       	icall
    3c78:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    3c7a:	d8 01       	movw	r26, r16
    3c7c:	ed 91       	ld	r30, X+
    3c7e:	fc 91       	ld	r31, X
    3c80:	01 90       	ld	r0, Z+
    3c82:	f0 81       	ld	r31, Z
    3c84:	e0 2d       	mov	r30, r0
    3c86:	c8 01       	movw	r24, r16
    3c88:	6a e0       	ldi	r22, 0x0A	; 10
    3c8a:	09 95       	icall
    3c8c:	9c 01       	movw	r18, r24
    3c8e:	2e 0d       	add	r18, r14
    3c90:	3f 1d       	adc	r19, r15
    3c92:	c9 01       	movw	r24, r18
    3c94:	1f 91       	pop	r17
    3c96:	0f 91       	pop	r16
    3c98:	ff 90       	pop	r15
    3c9a:	ef 90       	pop	r14
    3c9c:	08 95       	ret

00003c9e <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    3ca4:	61 15       	cp	r22, r1
    3ca6:	71 05       	cpc	r23, r1
    3ca8:	19 f4       	brne	.+6      	; 0x3cb0 <_ZN5Print5writeEPKc+0x12>
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	0f c0       	rjmp	.+30     	; 0x3cce <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    3cb0:	db 01       	movw	r26, r22
    3cb2:	0d 90       	ld	r0, X+
    3cb4:	00 20       	and	r0, r0
    3cb6:	e9 f7       	brne	.-6      	; 0x3cb2 <_ZN5Print5writeEPKc+0x14>
    3cb8:	11 97       	sbiw	r26, 0x01	; 1
    3cba:	a6 1b       	sub	r26, r22
    3cbc:	b7 0b       	sbc	r27, r23
    3cbe:	e8 81       	ld	r30, Y
    3cc0:	f9 81       	ldd	r31, Y+1	; 0x01
    3cc2:	02 80       	ldd	r0, Z+2	; 0x02
    3cc4:	f3 81       	ldd	r31, Z+3	; 0x03
    3cc6:	e0 2d       	mov	r30, r0
    3cc8:	ad 01       	movw	r20, r26
    3cca:	09 95       	icall
    3ccc:	9c 01       	movw	r18, r24
    }
    3cce:	c9 01       	movw	r24, r18
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	08 95       	ret

00003cd6 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    3cd6:	4f 92       	push	r4
    3cd8:	5f 92       	push	r5
    3cda:	7f 92       	push	r7
    3cdc:	8f 92       	push	r8
    3cde:	9f 92       	push	r9
    3ce0:	af 92       	push	r10
    3ce2:	bf 92       	push	r11
    3ce4:	cf 92       	push	r12
    3ce6:	df 92       	push	r13
    3ce8:	ef 92       	push	r14
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	a1 97       	sbiw	r28, 0x21	; 33
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	f8 94       	cli
    3cfe:	de bf       	out	0x3e, r29	; 62
    3d00:	0f be       	out	0x3f, r0	; 63
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	2c 01       	movw	r4, r24
    3d06:	74 2e       	mov	r7, r20
    3d08:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3d0a:	22 30       	cpi	r18, 0x02	; 2
    3d0c:	08 f4       	brcc	.+2      	; 0x3d10 <_ZN5Print11printNumberEmh+0x3a>
    3d0e:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3d10:	19 a2       	std	Y+33, r1	; 0x21
    3d12:	31 e2       	ldi	r19, 0x21	; 33
    3d14:	c3 2e       	mov	r12, r19
    3d16:	d1 2c       	mov	r13, r1
    3d18:	cc 0e       	add	r12, r28
    3d1a:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    3d1c:	82 2e       	mov	r8, r18
    3d1e:	99 24       	eor	r9, r9
    3d20:	aa 24       	eor	r10, r10
    3d22:	bb 24       	eor	r11, r11
    3d24:	67 2d       	mov	r22, r7
    3d26:	75 2f       	mov	r23, r21
    3d28:	a5 01       	movw	r20, r10
    3d2a:	94 01       	movw	r18, r8
    3d2c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__udivmodsi4>
    3d30:	79 01       	movw	r14, r18
    3d32:	8a 01       	movw	r16, r20
    char c = m - base * n;
    3d34:	c8 01       	movw	r24, r16
    3d36:	b7 01       	movw	r22, r14
    3d38:	a5 01       	movw	r20, r10
    3d3a:	94 01       	movw	r18, r8
    3d3c:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__mulsi3>
    3d40:	47 2d       	mov	r20, r7
    3d42:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3d44:	08 94       	sec
    3d46:	c1 08       	sbc	r12, r1
    3d48:	d1 08       	sbc	r13, r1
    3d4a:	4a 30       	cpi	r20, 0x0A	; 10
    3d4c:	14 f4       	brge	.+4      	; 0x3d52 <_ZN5Print11printNumberEmh+0x7c>
    3d4e:	40 5d       	subi	r20, 0xD0	; 208
    3d50:	01 c0       	rjmp	.+2      	; 0x3d54 <_ZN5Print11printNumberEmh+0x7e>
    3d52:	49 5c       	subi	r20, 0xC9	; 201
    3d54:	f6 01       	movw	r30, r12
    3d56:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    3d58:	e1 14       	cp	r14, r1
    3d5a:	f1 04       	cpc	r15, r1
    3d5c:	01 05       	cpc	r16, r1
    3d5e:	11 05       	cpc	r17, r1
    3d60:	21 f0       	breq	.+8      	; 0x3d6a <_ZN5Print11printNumberEmh+0x94>
    3d62:	7e 2c       	mov	r7, r14
    3d64:	5f 2d       	mov	r21, r15
    3d66:	c8 01       	movw	r24, r16
    3d68:	dd cf       	rjmp	.-70     	; 0x3d24 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    3d6a:	c2 01       	movw	r24, r4
    3d6c:	b6 01       	movw	r22, r12
    3d6e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN5Print5writeEPKc>
}
    3d72:	a1 96       	adiw	r28, 0x21	; 33
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	f8 94       	cli
    3d78:	de bf       	out	0x3e, r29	; 62
    3d7a:	0f be       	out	0x3f, r0	; 63
    3d7c:	cd bf       	out	0x3d, r28	; 61
    3d7e:	cf 91       	pop	r28
    3d80:	df 91       	pop	r29
    3d82:	1f 91       	pop	r17
    3d84:	0f 91       	pop	r16
    3d86:	ff 90       	pop	r15
    3d88:	ef 90       	pop	r14
    3d8a:	df 90       	pop	r13
    3d8c:	cf 90       	pop	r12
    3d8e:	bf 90       	pop	r11
    3d90:	af 90       	pop	r10
    3d92:	9f 90       	pop	r9
    3d94:	8f 90       	pop	r8
    3d96:	7f 90       	pop	r7
    3d98:	5f 90       	pop	r5
    3d9a:	4f 90       	pop	r4
    3d9c:	08 95       	ret

00003d9e <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    3d9e:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    3da0:	21 15       	cp	r18, r1
    3da2:	31 05       	cpc	r19, r1
    3da4:	41 f4       	brne	.+16     	; 0x3db6 <_ZN5Print5printEmi+0x18>
    3da6:	ed 91       	ld	r30, X+
    3da8:	fc 91       	ld	r31, X
    3daa:	01 90       	ld	r0, Z+
    3dac:	f0 81       	ld	r31, Z
    3dae:	e0 2d       	mov	r30, r0
    3db0:	64 2f       	mov	r22, r20
    3db2:	09 95       	icall
    3db4:	08 95       	ret
  else return printNumber(n, base);
    3db6:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZN5Print11printNumberEmh>
}
    3dba:	08 95       	ret

00003dbc <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    3dbc:	cf 92       	push	r12
    3dbe:	df 92       	push	r13
    3dc0:	ef 92       	push	r14
    3dc2:	ff 92       	push	r15
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	ec 01       	movw	r28, r24
    3dce:	6a 01       	movw	r12, r20
    3dd0:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    3dd2:	21 15       	cp	r18, r1
    3dd4:	31 05       	cpc	r19, r1
    3dd6:	41 f4       	brne	.+16     	; 0x3de8 <_ZN5Print5printEli+0x2c>
    return write(n);
    3dd8:	e8 81       	ld	r30, Y
    3dda:	f9 81       	ldd	r31, Y+1	; 0x01
    3ddc:	01 90       	ld	r0, Z+
    3dde:	f0 81       	ld	r31, Z
    3de0:	e0 2d       	mov	r30, r0
    3de2:	64 2f       	mov	r22, r20
    3de4:	09 95       	icall
    3de6:	1f c0       	rjmp	.+62     	; 0x3e26 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    3de8:	2a 30       	cpi	r18, 0x0A	; 10
    3dea:	31 05       	cpc	r19, r1
    3dec:	d1 f4       	brne	.+52     	; 0x3e22 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    3dee:	77 ff       	sbrs	r23, 7
    3df0:	17 c0       	rjmp	.+46     	; 0x3e20 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3df2:	e8 81       	ld	r30, Y
    3df4:	f9 81       	ldd	r31, Y+1	; 0x01
    3df6:	01 90       	ld	r0, Z+
    3df8:	f0 81       	ld	r31, Z
    3dfa:	e0 2d       	mov	r30, r0
    3dfc:	6d e2       	ldi	r22, 0x2D	; 45
    3dfe:	09 95       	icall
    3e00:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    3e02:	44 27       	eor	r20, r20
    3e04:	55 27       	eor	r21, r21
    3e06:	ba 01       	movw	r22, r20
    3e08:	4c 19       	sub	r20, r12
    3e0a:	5d 09       	sbc	r21, r13
    3e0c:	6e 09       	sbc	r22, r14
    3e0e:	7f 09       	sbc	r23, r15
    3e10:	ce 01       	movw	r24, r28
    3e12:	2a e0       	ldi	r18, 0x0A	; 10
    3e14:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZN5Print11printNumberEmh>
    3e18:	98 01       	movw	r18, r16
    3e1a:	28 0f       	add	r18, r24
    3e1c:	39 1f       	adc	r19, r25
    3e1e:	04 c0       	rjmp	.+8      	; 0x3e28 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    3e20:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    3e22:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZN5Print11printNumberEmh>
    3e26:	9c 01       	movw	r18, r24
  }
}
    3e28:	c9 01       	movw	r24, r18
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	1f 91       	pop	r17
    3e30:	0f 91       	pop	r16
    3e32:	ff 90       	pop	r15
    3e34:	ef 90       	pop	r14
    3e36:	df 90       	pop	r13
    3e38:	cf 90       	pop	r12
    3e3a:	08 95       	ret

00003e3c <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3e3c:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN5Print5writeEPKc>
}
    3e40:	08 95       	ret

00003e42 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    3e42:	7f 92       	push	r7
    3e44:	8f 92       	push	r8
    3e46:	9f 92       	push	r9
    3e48:	af 92       	push	r10
    3e4a:	bf 92       	push	r11
    3e4c:	cf 92       	push	r12
    3e4e:	df 92       	push	r13
    3e50:	ef 92       	push	r14
    3e52:	ff 92       	push	r15
    3e54:	0f 93       	push	r16
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	4c 01       	movw	r8, r24
    3e5e:	7a 01       	movw	r14, r20
    3e60:	8b 01       	movw	r16, r22
    3e62:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3e64:	cb 01       	movw	r24, r22
    3e66:	ba 01       	movw	r22, r20
    3e68:	a8 01       	movw	r20, r16
    3e6a:	97 01       	movw	r18, r14
    3e6c:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <__unordsf2>
    3e70:	88 23       	and	r24, r24
    3e72:	21 f0       	breq	.+8      	; 0x3e7c <_ZN5Print10printFloatEdh+0x3a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3e74:	c4 01       	movw	r24, r8
    3e76:	65 e0       	ldi	r22, 0x05	; 5
    3e78:	71 e0       	ldi	r23, 0x01	; 1
    3e7a:	21 c0       	rjmp	.+66     	; 0x3ebe <_ZN5Print10printFloatEdh+0x7c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3e7c:	c0 e0       	ldi	r28, 0x00	; 0
    3e7e:	d0 e0       	ldi	r29, 0x00	; 0
    3e80:	57 01       	movw	r10, r14
    3e82:	68 01       	movw	r12, r16
    3e84:	e8 94       	clt
    3e86:	d7 f8       	bld	r13, 7
    3e88:	c6 01       	movw	r24, r12
    3e8a:	b5 01       	movw	r22, r10
    3e8c:	2f ef       	ldi	r18, 0xFF	; 255
    3e8e:	3f ef       	ldi	r19, 0xFF	; 255
    3e90:	4f e7       	ldi	r20, 0x7F	; 127
    3e92:	5f e7       	ldi	r21, 0x7F	; 127
    3e94:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <__unordsf2>
    3e98:	88 23       	and	r24, r24
    3e9a:	51 f4       	brne	.+20     	; 0x3eb0 <_ZN5Print10printFloatEdh+0x6e>
    3e9c:	c6 01       	movw	r24, r12
    3e9e:	b5 01       	movw	r22, r10
    3ea0:	2f ef       	ldi	r18, 0xFF	; 255
    3ea2:	3f ef       	ldi	r19, 0xFF	; 255
    3ea4:	4f e7       	ldi	r20, 0x7F	; 127
    3ea6:	5f e7       	ldi	r21, 0x7F	; 127
    3ea8:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    3eac:	18 16       	cp	r1, r24
    3eae:	14 f0       	brlt	.+4      	; 0x3eb4 <_ZN5Print10printFloatEdh+0x72>
    3eb0:	c1 e0       	ldi	r28, 0x01	; 1
    3eb2:	d0 e0       	ldi	r29, 0x00	; 0
    3eb4:	21 97       	sbiw	r28, 0x01	; 1
    3eb6:	39 f0       	breq	.+14     	; 0x3ec6 <_ZN5Print10printFloatEdh+0x84>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3eb8:	c4 01       	movw	r24, r8
    3eba:	69 e0       	ldi	r22, 0x09	; 9
    3ebc:	71 e0       	ldi	r23, 0x01	; 1
    3ebe:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN5Print5writeEPKc>
    3ec2:	ec 01       	movw	r28, r24
    3ec4:	93 c0       	rjmp	.+294    	; 0x3fec <_ZN5Print10printFloatEdh+0x1aa>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3ec6:	c8 01       	movw	r24, r16
    3ec8:	b7 01       	movw	r22, r14
    3eca:	2f ef       	ldi	r18, 0xFF	; 255
    3ecc:	3f ef       	ldi	r19, 0xFF	; 255
    3ece:	4f e7       	ldi	r20, 0x7F	; 127
    3ed0:	5f e4       	ldi	r21, 0x4F	; 79
    3ed2:	0e 94 56 26 	call	0x4cac	; 0x4cac <__gesf2>
    3ed6:	18 16       	cp	r1, r24
    3ed8:	54 f0       	brlt	.+20     	; 0x3eee <_ZN5Print10printFloatEdh+0xac>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3eda:	c8 01       	movw	r24, r16
    3edc:	b7 01       	movw	r22, r14
    3ede:	2f ef       	ldi	r18, 0xFF	; 255
    3ee0:	3f ef       	ldi	r19, 0xFF	; 255
    3ee2:	4f e7       	ldi	r20, 0x7F	; 127
    3ee4:	5f ec       	ldi	r21, 0xCF	; 207
    3ee6:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    3eea:	88 23       	and	r24, r24
    3eec:	24 f4       	brge	.+8      	; 0x3ef6 <_ZN5Print10printFloatEdh+0xb4>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3eee:	c4 01       	movw	r24, r8
    3ef0:	6d e0       	ldi	r22, 0x0D	; 13
    3ef2:	71 e0       	ldi	r23, 0x01	; 1
    3ef4:	e4 cf       	rjmp	.-56     	; 0x3ebe <_ZN5Print10printFloatEdh+0x7c>
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    3ef6:	c8 01       	movw	r24, r16
    3ef8:	b7 01       	movw	r22, r14
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 e0       	ldi	r20, 0x00	; 0
    3f00:	50 e0       	ldi	r21, 0x00	; 0
    3f02:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__cmpsf2>
    3f06:	87 fd       	sbrc	r24, 7
    3f08:	03 c0       	rjmp	.+6      	; 0x3f10 <_ZN5Print10printFloatEdh+0xce>
    3f0a:	c0 e0       	ldi	r28, 0x00	; 0
    3f0c:	d0 e0       	ldi	r29, 0x00	; 0
    3f0e:	0e c0       	rjmp	.+28     	; 0x3f2c <_ZN5Print10printFloatEdh+0xea>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3f10:	d4 01       	movw	r26, r8
    3f12:	ed 91       	ld	r30, X+
    3f14:	fc 91       	ld	r31, X
    3f16:	01 90       	ld	r0, Z+
    3f18:	f0 81       	ld	r31, Z
    3f1a:	e0 2d       	mov	r30, r0
    3f1c:	c4 01       	movw	r24, r8
    3f1e:	6d e2       	ldi	r22, 0x2D	; 45
    3f20:	09 95       	icall
    3f22:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    3f24:	17 fb       	bst	r17, 7
    3f26:	10 95       	com	r17
    3f28:	17 f9       	bld	r17, 7
    3f2a:	10 95       	com	r17
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	40 e0       	ldi	r20, 0x00	; 0
    3f32:	5f e3       	ldi	r21, 0x3F	; 63
    3f34:	dd 24       	eor	r13, r13
    3f36:	0b c0       	rjmp	.+22     	; 0x3f4e <_ZN5Print10printFloatEdh+0x10c>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    3f38:	ca 01       	movw	r24, r20
    3f3a:	b9 01       	movw	r22, r18
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 e2       	ldi	r20, 0x20	; 32
    3f42:	51 e4       	ldi	r21, 0x41	; 65
    3f44:	0e 94 78 24 	call	0x48f0	; 0x48f0 <__divsf3>
    3f48:	9b 01       	movw	r18, r22
    3f4a:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3f4c:	d3 94       	inc	r13
    3f4e:	d7 14       	cp	r13, r7
    3f50:	98 f3       	brcs	.-26     	; 0x3f38 <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
  
  number += rounding;
    3f52:	c8 01       	movw	r24, r16
    3f54:	b7 01       	movw	r22, r14
    3f56:	0e 94 94 23 	call	0x4728	; 0x4728 <__addsf3>
    3f5a:	5b 01       	movw	r10, r22
    3f5c:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3f5e:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__fixunssfsi>
    3f62:	7b 01       	movw	r14, r22
    3f64:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    3f66:	c4 01       	movw	r24, r8
    3f68:	b8 01       	movw	r22, r16
    3f6a:	a7 01       	movw	r20, r14
    3f6c:	2a e0       	ldi	r18, 0x0A	; 10
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN5Print5printEmi>
    3f74:	c8 0f       	add	r28, r24
    3f76:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    3f78:	77 20       	and	r7, r7
    3f7a:	39 f0       	breq	.+14     	; 0x3f8a <_ZN5Print10printFloatEdh+0x148>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3f7c:	c4 01       	movw	r24, r8
    3f7e:	61 e1       	ldi	r22, 0x11	; 17
    3f80:	71 e0       	ldi	r23, 0x01	; 1
    3f82:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    3f86:	c8 0f       	add	r28, r24
    3f88:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3f8a:	c8 01       	movw	r24, r16
    3f8c:	b7 01       	movw	r22, r14
    3f8e:	0e 94 11 25 	call	0x4a22	; 0x4a22 <__floatunsisf>
    3f92:	9b 01       	movw	r18, r22
    3f94:	ac 01       	movw	r20, r24
    3f96:	c6 01       	movw	r24, r12
    3f98:	b5 01       	movw	r22, r10
    3f9a:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    3f9e:	24 c0       	rjmp	.+72     	; 0x3fe8 <_ZN5Print10printFloatEdh+0x1a6>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e2       	ldi	r20, 0x20	; 32
    3fa6:	51 e4       	ldi	r21, 0x41	; 65
    3fa8:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <__mulsf3>
    3fac:	7b 01       	movw	r14, r22
    3fae:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    3fb0:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__fixsfsi>
    3fb4:	5b 01       	movw	r10, r22
    3fb6:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    3fb8:	cc 24       	eor	r12, r12
    3fba:	b7 fc       	sbrc	r11, 7
    3fbc:	c0 94       	com	r12
    3fbe:	dc 2c       	mov	r13, r12
    3fc0:	c4 01       	movw	r24, r8
    3fc2:	b6 01       	movw	r22, r12
    3fc4:	a5 01       	movw	r20, r10
    3fc6:	2a e0       	ldi	r18, 0x0A	; 10
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    3fce:	c8 0f       	add	r28, r24
    3fd0:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    3fd2:	c6 01       	movw	r24, r12
    3fd4:	b5 01       	movw	r22, r10
    3fd6:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__floatsisf>
    3fda:	9b 01       	movw	r18, r22
    3fdc:	ac 01       	movw	r20, r24
    3fde:	c8 01       	movw	r24, r16
    3fe0:	b7 01       	movw	r22, r14
    3fe2:	0e 94 93 23 	call	0x4726	; 0x4726 <__subsf3>
    3fe6:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3fe8:	77 20       	and	r7, r7
    3fea:	d1 f6       	brne	.-76     	; 0x3fa0 <_ZN5Print10printFloatEdh+0x15e>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3fec:	ce 01       	movw	r24, r28
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	1f 91       	pop	r17
    3ff4:	0f 91       	pop	r16
    3ff6:	ff 90       	pop	r15
    3ff8:	ef 90       	pop	r14
    3ffa:	df 90       	pop	r13
    3ffc:	cf 90       	pop	r12
    3ffe:	bf 90       	pop	r11
    4000:	af 90       	pop	r10
    4002:	9f 90       	pop	r9
    4004:	8f 90       	pop	r8
    4006:	7f 90       	pop	r7
    4008:	08 95       	ret

0000400a <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    400a:	ef 92       	push	r14
    400c:	ff 92       	push	r15
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4014:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <_ZN5Print10printFloatEdh>
    4018:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    401a:	c7 01       	movw	r24, r14
    401c:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_ZN5Print7printlnEv>
    4020:	08 0f       	add	r16, r24
    4022:	19 1f       	adc	r17, r25
  return n;
}
    4024:	c8 01       	movw	r24, r16
    4026:	1f 91       	pop	r17
    4028:	0f 91       	pop	r16
    402a:	ff 90       	pop	r15
    402c:	ef 90       	pop	r14
    402e:	08 95       	ret

00004030 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    4030:	82 30       	cpi	r24, 0x02	; 2
    4032:	00 f5       	brcc	.+64     	; 0x4074 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    4034:	e8 2f       	mov	r30, r24
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	ee 0f       	add	r30, r30
    403a:	ff 1f       	adc	r31, r31
    403c:	ea 5b       	subi	r30, 0xBA	; 186
    403e:	fb 4f       	sbci	r31, 0xFB	; 251
    4040:	71 83       	std	Z+1, r23	; 0x01
    4042:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    4044:	88 23       	and	r24, r24
    4046:	19 f0       	breq	.+6      	; 0x404e <attachInterrupt+0x1e>
    4048:	81 30       	cpi	r24, 0x01	; 1
    404a:	a1 f4       	brne	.+40     	; 0x4074 <attachInterrupt+0x44>
    404c:	08 c0       	rjmp	.+16     	; 0x405e <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    404e:	80 91 69 00 	lds	r24, 0x0069
    4052:	8c 7f       	andi	r24, 0xFC	; 252
    4054:	84 2b       	or	r24, r20
    4056:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    405a:	e8 9a       	sbi	0x1d, 0	; 29
    405c:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    405e:	80 91 69 00 	lds	r24, 0x0069
    4062:	44 0f       	add	r20, r20
    4064:	55 1f       	adc	r21, r21
    4066:	44 0f       	add	r20, r20
    4068:	55 1f       	adc	r21, r21
    406a:	83 7f       	andi	r24, 0xF3	; 243
    406c:	84 2b       	or	r24, r20
    406e:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    4072:	e9 9a       	sbi	0x1d, 1	; 29
    4074:	08 95       	ret

00004076 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    4076:	1f 92       	push	r1
    4078:	0f 92       	push	r0
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	0f 92       	push	r0
    407e:	11 24       	eor	r1, r1
    4080:	2f 93       	push	r18
    4082:	3f 93       	push	r19
    4084:	4f 93       	push	r20
    4086:	5f 93       	push	r21
    4088:	6f 93       	push	r22
    408a:	7f 93       	push	r23
    408c:	8f 93       	push	r24
    408e:	9f 93       	push	r25
    4090:	af 93       	push	r26
    4092:	bf 93       	push	r27
    4094:	ef 93       	push	r30
    4096:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    4098:	80 91 46 04 	lds	r24, 0x0446
    409c:	90 91 47 04 	lds	r25, 0x0447
    40a0:	89 2b       	or	r24, r25
    40a2:	29 f0       	breq	.+10     	; 0x40ae <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    40a4:	e0 91 46 04 	lds	r30, 0x0446
    40a8:	f0 91 47 04 	lds	r31, 0x0447
    40ac:	09 95       	icall
}
    40ae:	ff 91       	pop	r31
    40b0:	ef 91       	pop	r30
    40b2:	bf 91       	pop	r27
    40b4:	af 91       	pop	r26
    40b6:	9f 91       	pop	r25
    40b8:	8f 91       	pop	r24
    40ba:	7f 91       	pop	r23
    40bc:	6f 91       	pop	r22
    40be:	5f 91       	pop	r21
    40c0:	4f 91       	pop	r20
    40c2:	3f 91       	pop	r19
    40c4:	2f 91       	pop	r18
    40c6:	0f 90       	pop	r0
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	0f 90       	pop	r0
    40cc:	1f 90       	pop	r1
    40ce:	18 95       	reti

000040d0 <__vector_2>:

SIGNAL(INT1_vect) {
    40d0:	1f 92       	push	r1
    40d2:	0f 92       	push	r0
    40d4:	0f b6       	in	r0, 0x3f	; 63
    40d6:	0f 92       	push	r0
    40d8:	11 24       	eor	r1, r1
    40da:	2f 93       	push	r18
    40dc:	3f 93       	push	r19
    40de:	4f 93       	push	r20
    40e0:	5f 93       	push	r21
    40e2:	6f 93       	push	r22
    40e4:	7f 93       	push	r23
    40e6:	8f 93       	push	r24
    40e8:	9f 93       	push	r25
    40ea:	af 93       	push	r26
    40ec:	bf 93       	push	r27
    40ee:	ef 93       	push	r30
    40f0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    40f2:	80 91 48 04 	lds	r24, 0x0448
    40f6:	90 91 49 04 	lds	r25, 0x0449
    40fa:	89 2b       	or	r24, r25
    40fc:	29 f0       	breq	.+10     	; 0x4108 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    40fe:	e0 91 48 04 	lds	r30, 0x0448
    4102:	f0 91 49 04 	lds	r31, 0x0449
    4106:	09 95       	icall
}
    4108:	ff 91       	pop	r31
    410a:	ef 91       	pop	r30
    410c:	bf 91       	pop	r27
    410e:	af 91       	pop	r26
    4110:	9f 91       	pop	r25
    4112:	8f 91       	pop	r24
    4114:	7f 91       	pop	r23
    4116:	6f 91       	pop	r22
    4118:	5f 91       	pop	r21
    411a:	4f 91       	pop	r20
    411c:	3f 91       	pop	r19
    411e:	2f 91       	pop	r18
    4120:	0f 90       	pop	r0
    4122:	0f be       	out	0x3f, r0	; 63
    4124:	0f 90       	pop	r0
    4126:	1f 90       	pop	r1
    4128:	18 95       	reti

0000412a <main>:
#include <Arduino.h>

int main(void)
    412a:	cf 93       	push	r28
    412c:	df 93       	push	r29
{
	init();
    412e:	0e 94 72 22 	call	0x44e4	; 0x44e4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4132:	0e 94 19 12 	call	0x2432	; 0x2432 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4136:	c0 e0       	ldi	r28, 0x00	; 0
    4138:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    413a:	0e 94 a5 10 	call	0x214a	; 0x214a <loop>
		if (serialEventRun) serialEventRun();
    413e:	20 97       	sbiw	r28, 0x00	; 0
    4140:	e1 f3       	breq	.-8      	; 0x413a <main+0x10>
    4142:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    4146:	f9 cf       	rjmp	.-14     	; 0x413a <main+0x10>

00004148 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    4148:	0f 93       	push	r16
    414a:	1f 93       	push	r17
    414c:	cf 93       	push	r28
    414e:	df 93       	push	r29
    4150:	bc 01       	movw	r22, r24
    4152:	82 30       	cpi	r24, 0x02	; 2
    4154:	91 05       	cpc	r25, r1
    4156:	10 f4       	brcc	.+4      	; 0x415c <malloc+0x14>
    4158:	62 e0       	ldi	r22, 0x02	; 2
    415a:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    415c:	e0 91 53 04 	lds	r30, 0x0453
    4160:	f0 91 54 04 	lds	r31, 0x0454
    4164:	a0 e0       	ldi	r26, 0x00	; 0
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	50 e0       	ldi	r21, 0x00	; 0
    416c:	24 c0       	rjmp	.+72     	; 0x41b6 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    416e:	80 81       	ld	r24, Z
    4170:	91 81       	ldd	r25, Z+1	; 0x01
    4172:	86 17       	cp	r24, r22
    4174:	97 07       	cpc	r25, r23
    4176:	d0 f0       	brcs	.+52     	; 0x41ac <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    4178:	86 17       	cp	r24, r22
    417a:	97 07       	cpc	r25, r23
    417c:	71 f4       	brne	.+28     	; 0x419a <malloc+0x52>
    417e:	82 81       	ldd	r24, Z+2	; 0x02
    4180:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    4182:	10 97       	sbiw	r26, 0x00	; 0
    4184:	29 f0       	breq	.+10     	; 0x4190 <malloc+0x48>
				fp2->nx = fp1->nx;
    4186:	13 96       	adiw	r26, 0x03	; 3
    4188:	9c 93       	st	X, r25
    418a:	8e 93       	st	-X, r24
    418c:	12 97       	sbiw	r26, 0x02	; 2
    418e:	2c c0       	rjmp	.+88     	; 0x41e8 <malloc+0xa0>
			else
				__flp = fp1->nx;
    4190:	90 93 54 04 	sts	0x0454, r25
    4194:	80 93 53 04 	sts	0x0453, r24
    4198:	27 c0       	rjmp	.+78     	; 0x41e8 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    419a:	41 15       	cp	r20, r1
    419c:	51 05       	cpc	r21, r1
    419e:	19 f0       	breq	.+6      	; 0x41a6 <malloc+0x5e>
    41a0:	84 17       	cp	r24, r20
    41a2:	95 07       	cpc	r25, r21
    41a4:	18 f4       	brcc	.+6      	; 0x41ac <malloc+0x64>
    41a6:	ef 01       	movw	r28, r30
    41a8:	8d 01       	movw	r16, r26
    41aa:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    41ac:	df 01       	movw	r26, r30
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	9c 01       	movw	r18, r24
    41b4:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    41b6:	30 97       	sbiw	r30, 0x00	; 0
    41b8:	d1 f6       	brne	.-76     	; 0x416e <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    41ba:	41 15       	cp	r20, r1
    41bc:	51 05       	cpc	r21, r1
    41be:	f9 f0       	breq	.+62     	; 0x41fe <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    41c0:	ca 01       	movw	r24, r20
    41c2:	86 1b       	sub	r24, r22
    41c4:	97 0b       	sbc	r25, r23
    41c6:	84 30       	cpi	r24, 0x04	; 4
    41c8:	91 05       	cpc	r25, r1
    41ca:	80 f4       	brcc	.+32     	; 0x41ec <malloc+0xa4>
    41cc:	8a 81       	ldd	r24, Y+2	; 0x02
    41ce:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    41d0:	01 15       	cp	r16, r1
    41d2:	11 05       	cpc	r17, r1
    41d4:	21 f0       	breq	.+8      	; 0x41de <malloc+0x96>
				sfp2->nx = sfp1->nx;
    41d6:	f8 01       	movw	r30, r16
    41d8:	93 83       	std	Z+3, r25	; 0x03
    41da:	82 83       	std	Z+2, r24	; 0x02
    41dc:	04 c0       	rjmp	.+8      	; 0x41e6 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    41de:	90 93 54 04 	sts	0x0454, r25
    41e2:	80 93 53 04 	sts	0x0453, r24
			return &(sfp1->nx);
    41e6:	fe 01       	movw	r30, r28
    41e8:	32 96       	adiw	r30, 0x02	; 2
    41ea:	2f c0       	rjmp	.+94     	; 0x424a <malloc+0x102>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    41ec:	fe 01       	movw	r30, r28
    41ee:	e8 0f       	add	r30, r24
    41f0:	f9 1f       	adc	r31, r25
    41f2:	61 93       	st	Z+, r22
    41f4:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    41f6:	02 97       	sbiw	r24, 0x02	; 2
    41f8:	99 83       	std	Y+1, r25	; 0x01
    41fa:	88 83       	st	Y, r24
    41fc:	26 c0       	rjmp	.+76     	; 0x424a <malloc+0x102>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	cp = STACK_POINTER() - __MALLOC_MARGIN__;
    41fe:	8d b7       	in	r24, 0x3d	; 61
    4200:	9e b7       	in	r25, 0x3e	; 62
    4202:	88 57       	subi	r24, 0x78	; 120
    4204:	90 40       	sbci	r25, 0x00	; 0
	if (cp <= __brkval)
    4206:	20 91 77 01 	lds	r18, 0x0177
    420a:	30 91 78 01 	lds	r19, 0x0178
    420e:	28 17       	cp	r18, r24
    4210:	39 07       	cpc	r19, r25
    4212:	c8 f4       	brcc	.+50     	; 0x4246 <malloc+0xfe>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    4214:	ac 01       	movw	r20, r24
    4216:	42 1b       	sub	r20, r18
    4218:	53 0b       	sbc	r21, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    421a:	46 17       	cp	r20, r22
    421c:	57 07       	cpc	r21, r23
    421e:	98 f0       	brcs	.+38     	; 0x4246 <malloc+0xfe>
    4220:	cb 01       	movw	r24, r22
    4222:	02 96       	adiw	r24, 0x02	; 2
    4224:	48 17       	cp	r20, r24
    4226:	59 07       	cpc	r21, r25
    4228:	70 f0       	brcs	.+28     	; 0x4246 <malloc+0xfe>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    422a:	82 0f       	add	r24, r18
    422c:	93 1f       	adc	r25, r19
    422e:	90 93 78 01 	sts	0x0178, r25
    4232:	80 93 77 01 	sts	0x0177, r24
		__brkval_maximum = __brkval;
    4236:	90 93 7a 01 	sts	0x017A, r25
    423a:	80 93 79 01 	sts	0x0179, r24
		fp1->sz = len;
    423e:	f9 01       	movw	r30, r18
    4240:	61 93       	st	Z+, r22
    4242:	71 93       	st	Z+, r23
    4244:	02 c0       	rjmp	.+4      	; 0x424a <malloc+0x102>
		return &(fp1->nx);
    4246:	e0 e0       	ldi	r30, 0x00	; 0
    4248:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    424a:	cf 01       	movw	r24, r30
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	1f 91       	pop	r17
    4252:	0f 91       	pop	r16
    4254:	08 95       	ret

00004256 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	9c 01       	movw	r18, r24
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	09 f4       	brne	.+2      	; 0x4262 <free+0xc>
    4260:	8f c0       	rjmp	.+286    	; 0x4380 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    4262:	ec 01       	movw	r28, r24
    4264:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    4266:	1b 82       	std	Y+3, r1	; 0x03
    4268:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    426a:	60 91 53 04 	lds	r22, 0x0453
    426e:	70 91 54 04 	lds	r23, 0x0454
    4272:	61 15       	cp	r22, r1
    4274:	71 05       	cpc	r23, r1
    4276:	81 f4       	brne	.+32     	; 0x4298 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    4278:	88 81       	ld	r24, Y
    427a:	99 81       	ldd	r25, Y+1	; 0x01
    427c:	82 0f       	add	r24, r18
    427e:	93 1f       	adc	r25, r19
    4280:	20 91 77 01 	lds	r18, 0x0177
    4284:	30 91 78 01 	lds	r19, 0x0178
    4288:	28 17       	cp	r18, r24
    428a:	39 07       	cpc	r19, r25
    428c:	39 f5       	brne	.+78     	; 0x42dc <free+0x86>
			__brkval = cpnew;
    428e:	d0 93 78 01 	sts	0x0178, r29
    4292:	c0 93 77 01 	sts	0x0177, r28
    4296:	74 c0       	rjmp	.+232    	; 0x4380 <free+0x12a>
		else
			__flp = fpnew;
    4298:	db 01       	movw	r26, r22
    429a:	40 e0       	ldi	r20, 0x00	; 0
    429c:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    429e:	ac 17       	cp	r26, r28
    42a0:	bd 07       	cpc	r27, r29
    42a2:	08 f1       	brcs	.+66     	; 0x42e6 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    42a4:	bb 83       	std	Y+3, r27	; 0x03
    42a6:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    42a8:	fe 01       	movw	r30, r28
    42aa:	21 91       	ld	r18, Z+
    42ac:	31 91       	ld	r19, Z+
    42ae:	e2 0f       	add	r30, r18
    42b0:	f3 1f       	adc	r31, r19
    42b2:	ae 17       	cp	r26, r30
    42b4:	bf 07       	cpc	r27, r31
    42b6:	79 f4       	brne	.+30     	; 0x42d6 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    42b8:	8d 91       	ld	r24, X+
    42ba:	9c 91       	ld	r25, X
    42bc:	11 97       	sbiw	r26, 0x01	; 1
    42be:	28 0f       	add	r18, r24
    42c0:	39 1f       	adc	r19, r25
    42c2:	2e 5f       	subi	r18, 0xFE	; 254
    42c4:	3f 4f       	sbci	r19, 0xFF	; 255
    42c6:	39 83       	std	Y+1, r19	; 0x01
    42c8:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    42ca:	12 96       	adiw	r26, 0x02	; 2
    42cc:	8d 91       	ld	r24, X+
    42ce:	9c 91       	ld	r25, X
    42d0:	13 97       	sbiw	r26, 0x03	; 3
    42d2:	9b 83       	std	Y+3, r25	; 0x03
    42d4:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    42d6:	41 15       	cp	r20, r1
    42d8:	51 05       	cpc	r21, r1
    42da:	71 f4       	brne	.+28     	; 0x42f8 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    42dc:	d0 93 54 04 	sts	0x0454, r29
    42e0:	c0 93 53 04 	sts	0x0453, r28
    42e4:	4d c0       	rjmp	.+154    	; 0x4380 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    42e6:	12 96       	adiw	r26, 0x02	; 2
    42e8:	8d 91       	ld	r24, X+
    42ea:	9c 91       	ld	r25, X
    42ec:	13 97       	sbiw	r26, 0x03	; 3
    42ee:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    42f0:	00 97       	sbiw	r24, 0x00	; 0
    42f2:	11 f0       	breq	.+4      	; 0x42f8 <free+0xa2>
    42f4:	dc 01       	movw	r26, r24
    42f6:	d3 cf       	rjmp	.-90     	; 0x429e <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    42f8:	da 01       	movw	r26, r20
    42fa:	13 96       	adiw	r26, 0x03	; 3
    42fc:	dc 93       	st	X, r29
    42fe:	ce 93       	st	-X, r28
    4300:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    4302:	fa 01       	movw	r30, r20
    4304:	21 91       	ld	r18, Z+
    4306:	31 91       	ld	r19, Z+
    4308:	e2 0f       	add	r30, r18
    430a:	f3 1f       	adc	r31, r19
    430c:	ce 17       	cp	r28, r30
    430e:	df 07       	cpc	r29, r31
    4310:	69 f4       	brne	.+26     	; 0x432c <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    4312:	88 81       	ld	r24, Y
    4314:	99 81       	ldd	r25, Y+1	; 0x01
    4316:	28 0f       	add	r18, r24
    4318:	39 1f       	adc	r19, r25
    431a:	2e 5f       	subi	r18, 0xFE	; 254
    431c:	3f 4f       	sbci	r19, 0xFF	; 255
    431e:	fa 01       	movw	r30, r20
    4320:	31 83       	std	Z+1, r19	; 0x01
    4322:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    4324:	8a 81       	ldd	r24, Y+2	; 0x02
    4326:	9b 81       	ldd	r25, Y+3	; 0x03
    4328:	93 83       	std	Z+3, r25	; 0x03
    432a:	82 83       	std	Z+2, r24	; 0x02
    432c:	e0 e0       	ldi	r30, 0x00	; 0
    432e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    4330:	db 01       	movw	r26, r22
    4332:	12 96       	adiw	r26, 0x02	; 2
    4334:	8d 91       	ld	r24, X+
    4336:	9c 91       	ld	r25, X
    4338:	13 97       	sbiw	r26, 0x03	; 3
    433a:	00 97       	sbiw	r24, 0x00	; 0
    433c:	19 f0       	breq	.+6      	; 0x4344 <free+0xee>
    433e:	bc 01       	movw	r22, r24
    4340:	fd 01       	movw	r30, r26
    4342:	f6 cf       	rjmp	.-20     	; 0x4330 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    4344:	ab 01       	movw	r20, r22
    4346:	4e 5f       	subi	r20, 0xFE	; 254
    4348:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    434a:	db 01       	movw	r26, r22
    434c:	8d 91       	ld	r24, X+
    434e:	9c 91       	ld	r25, X
    4350:	84 0f       	add	r24, r20
    4352:	95 1f       	adc	r25, r21
    4354:	20 91 77 01 	lds	r18, 0x0177
    4358:	30 91 78 01 	lds	r19, 0x0178
    435c:	28 17       	cp	r18, r24
    435e:	39 07       	cpc	r19, r25
    4360:	79 f4       	brne	.+30     	; 0x4380 <free+0x12a>
		if (fp2 == NULL)
    4362:	30 97       	sbiw	r30, 0x00	; 0
    4364:	29 f4       	brne	.+10     	; 0x4370 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    4366:	10 92 54 04 	sts	0x0454, r1
    436a:	10 92 53 04 	sts	0x0453, r1
    436e:	02 c0       	rjmp	.+4      	; 0x4374 <free+0x11e>
		else
			fp2->nx = NULL;
    4370:	13 82       	std	Z+3, r1	; 0x03
    4372:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    4374:	42 50       	subi	r20, 0x02	; 2
    4376:	50 40       	sbci	r21, 0x00	; 0
    4378:	50 93 78 01 	sts	0x0178, r21
    437c:	40 93 77 01 	sts	0x0177, r20
	}
}
    4380:	df 91       	pop	r29
    4382:	cf 91       	pop	r28
    4384:	08 95       	ret

00004386 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    4386:	1f 92       	push	r1
    4388:	0f 92       	push	r0
    438a:	0f b6       	in	r0, 0x3f	; 63
    438c:	0f 92       	push	r0
    438e:	11 24       	eor	r1, r1
    4390:	2f 93       	push	r18
    4392:	3f 93       	push	r19
    4394:	8f 93       	push	r24
    4396:	9f 93       	push	r25
    4398:	af 93       	push	r26
    439a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    439c:	80 91 4e 04 	lds	r24, 0x044E
    43a0:	90 91 4f 04 	lds	r25, 0x044F
    43a4:	a0 91 50 04 	lds	r26, 0x0450
    43a8:	b0 91 51 04 	lds	r27, 0x0451
	unsigned char f = timer0_fract;
    43ac:	30 91 52 04 	lds	r19, 0x0452

	m += MILLIS_INC;
    43b0:	01 96       	adiw	r24, 0x01	; 1
    43b2:	a1 1d       	adc	r26, r1
    43b4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    43b6:	23 2f       	mov	r18, r19
    43b8:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    43ba:	2d 37       	cpi	r18, 0x7D	; 125
    43bc:	20 f0       	brcs	.+8      	; 0x43c6 <__vector_16+0x40>
		f -= FRACT_MAX;
    43be:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    43c0:	01 96       	adiw	r24, 0x01	; 1
    43c2:	a1 1d       	adc	r26, r1
    43c4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    43c6:	20 93 52 04 	sts	0x0452, r18
	timer0_millis = m;
    43ca:	80 93 4e 04 	sts	0x044E, r24
    43ce:	90 93 4f 04 	sts	0x044F, r25
    43d2:	a0 93 50 04 	sts	0x0450, r26
    43d6:	b0 93 51 04 	sts	0x0451, r27
	timer0_overflow_count++;
    43da:	80 91 4a 04 	lds	r24, 0x044A
    43de:	90 91 4b 04 	lds	r25, 0x044B
    43e2:	a0 91 4c 04 	lds	r26, 0x044C
    43e6:	b0 91 4d 04 	lds	r27, 0x044D
    43ea:	01 96       	adiw	r24, 0x01	; 1
    43ec:	a1 1d       	adc	r26, r1
    43ee:	b1 1d       	adc	r27, r1
    43f0:	80 93 4a 04 	sts	0x044A, r24
    43f4:	90 93 4b 04 	sts	0x044B, r25
    43f8:	a0 93 4c 04 	sts	0x044C, r26
    43fc:	b0 93 4d 04 	sts	0x044D, r27
}
    4400:	bf 91       	pop	r27
    4402:	af 91       	pop	r26
    4404:	9f 91       	pop	r25
    4406:	8f 91       	pop	r24
    4408:	3f 91       	pop	r19
    440a:	2f 91       	pop	r18
    440c:	0f 90       	pop	r0
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	0f 90       	pop	r0
    4412:	1f 90       	pop	r1
    4414:	18 95       	reti

00004416 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4416:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4418:	f8 94       	cli
	m = timer0_millis;
    441a:	20 91 4e 04 	lds	r18, 0x044E
    441e:	30 91 4f 04 	lds	r19, 0x044F
    4422:	40 91 50 04 	lds	r20, 0x0450
    4426:	50 91 51 04 	lds	r21, 0x0451
	SREG = oldSREG;
    442a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    442c:	b9 01       	movw	r22, r18
    442e:	ca 01       	movw	r24, r20
    4430:	08 95       	ret

00004432 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    4432:	9b 01       	movw	r18, r22
    4434:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4436:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    4438:	f8 94       	cli
	m = timer0_overflow_count;
    443a:	80 91 4a 04 	lds	r24, 0x044A
    443e:	90 91 4b 04 	lds	r25, 0x044B
    4442:	a0 91 4c 04 	lds	r26, 0x044C
    4446:	b0 91 4d 04 	lds	r27, 0x044D
#if defined(TCNT0)
	t = TCNT0;
    444a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    444c:	a8 9b       	sbis	0x15, 0	; 21
    444e:	05 c0       	rjmp	.+10     	; 0x445a <delay+0x28>
    4450:	6f 3f       	cpi	r22, 0xFF	; 255
    4452:	19 f0       	breq	.+6      	; 0x445a <delay+0x28>
		m++;
    4454:	01 96       	adiw	r24, 0x01	; 1
    4456:	a1 1d       	adc	r26, r1
    4458:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    445a:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    445c:	ba 2f       	mov	r27, r26
    445e:	a9 2f       	mov	r26, r25
    4460:	98 2f       	mov	r25, r24
    4462:	88 27       	eor	r24, r24
    4464:	86 0f       	add	r24, r22
    4466:	91 1d       	adc	r25, r1
    4468:	a1 1d       	adc	r26, r1
    446a:	b1 1d       	adc	r27, r1
    446c:	62 e0       	ldi	r22, 0x02	; 2
    446e:	88 0f       	add	r24, r24
    4470:	99 1f       	adc	r25, r25
    4472:	aa 1f       	adc	r26, r26
    4474:	bb 1f       	adc	r27, r27
    4476:	6a 95       	dec	r22
    4478:	d1 f7       	brne	.-12     	; 0x446e <delay+0x3c>
    447a:	bc 01       	movw	r22, r24
    447c:	2d c0       	rjmp	.+90     	; 0x44d8 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    447e:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    4480:	f8 94       	cli
	m = timer0_overflow_count;
    4482:	80 91 4a 04 	lds	r24, 0x044A
    4486:	90 91 4b 04 	lds	r25, 0x044B
    448a:	a0 91 4c 04 	lds	r26, 0x044C
    448e:	b0 91 4d 04 	lds	r27, 0x044D
#if defined(TCNT0)
	t = TCNT0;
    4492:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4494:	a8 9b       	sbis	0x15, 0	; 21
    4496:	05 c0       	rjmp	.+10     	; 0x44a2 <delay+0x70>
    4498:	ef 3f       	cpi	r30, 0xFF	; 255
    449a:	19 f0       	breq	.+6      	; 0x44a2 <delay+0x70>
		m++;
    449c:	01 96       	adiw	r24, 0x01	; 1
    449e:	a1 1d       	adc	r26, r1
    44a0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    44a2:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    44a4:	ba 2f       	mov	r27, r26
    44a6:	a9 2f       	mov	r26, r25
    44a8:	98 2f       	mov	r25, r24
    44aa:	88 27       	eor	r24, r24
    44ac:	8e 0f       	add	r24, r30
    44ae:	91 1d       	adc	r25, r1
    44b0:	a1 1d       	adc	r26, r1
    44b2:	b1 1d       	adc	r27, r1
    44b4:	e2 e0       	ldi	r30, 0x02	; 2
    44b6:	88 0f       	add	r24, r24
    44b8:	99 1f       	adc	r25, r25
    44ba:	aa 1f       	adc	r26, r26
    44bc:	bb 1f       	adc	r27, r27
    44be:	ea 95       	dec	r30
    44c0:	d1 f7       	brne	.-12     	; 0x44b6 <delay+0x84>
    44c2:	86 1b       	sub	r24, r22
    44c4:	97 0b       	sbc	r25, r23
    44c6:	88 5e       	subi	r24, 0xE8	; 232
    44c8:	93 40       	sbci	r25, 0x03	; 3
    44ca:	c8 f2       	brcs	.-78     	; 0x447e <delay+0x4c>
			ms--;
    44cc:	21 50       	subi	r18, 0x01	; 1
    44ce:	30 40       	sbci	r19, 0x00	; 0
    44d0:	40 40       	sbci	r20, 0x00	; 0
    44d2:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    44d4:	68 51       	subi	r22, 0x18	; 24
    44d6:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    44d8:	21 15       	cp	r18, r1
    44da:	31 05       	cpc	r19, r1
    44dc:	41 05       	cpc	r20, r1
    44de:	51 05       	cpc	r21, r1
    44e0:	71 f6       	brne	.-100    	; 0x447e <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    44e2:	08 95       	ret

000044e4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    44e4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    44e6:	84 b5       	in	r24, 0x24	; 36
    44e8:	82 60       	ori	r24, 0x02	; 2
    44ea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    44ec:	84 b5       	in	r24, 0x24	; 36
    44ee:	81 60       	ori	r24, 0x01	; 1
    44f0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    44f2:	85 b5       	in	r24, 0x25	; 37
    44f4:	82 60       	ori	r24, 0x02	; 2
    44f6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    44f8:	85 b5       	in	r24, 0x25	; 37
    44fa:	81 60       	ori	r24, 0x01	; 1
    44fc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    44fe:	ee e6       	ldi	r30, 0x6E	; 110
    4500:	f0 e0       	ldi	r31, 0x00	; 0
    4502:	80 81       	ld	r24, Z
    4504:	81 60       	ori	r24, 0x01	; 1
    4506:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4508:	e1 e8       	ldi	r30, 0x81	; 129
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    450e:	80 81       	ld	r24, Z
    4510:	82 60       	ori	r24, 0x02	; 2
    4512:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4514:	80 81       	ld	r24, Z
    4516:	81 60       	ori	r24, 0x01	; 1
    4518:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    451a:	e0 e8       	ldi	r30, 0x80	; 128
    451c:	f0 e0       	ldi	r31, 0x00	; 0
    451e:	80 81       	ld	r24, Z
    4520:	81 60       	ori	r24, 0x01	; 1
    4522:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4524:	e1 eb       	ldi	r30, 0xB1	; 177
    4526:	f0 e0       	ldi	r31, 0x00	; 0
    4528:	80 81       	ld	r24, Z
    452a:	84 60       	ori	r24, 0x04	; 4
    452c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    452e:	e0 eb       	ldi	r30, 0xB0	; 176
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	81 60       	ori	r24, 0x01	; 1
    4536:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    4538:	ea e7       	ldi	r30, 0x7A	; 122
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	80 81       	ld	r24, Z
    453e:	84 60       	ori	r24, 0x04	; 4
    4540:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    4542:	80 81       	ld	r24, Z
    4544:	82 60       	ori	r24, 0x02	; 2
    4546:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    4548:	80 81       	ld	r24, Z
    454a:	81 60       	ori	r24, 0x01	; 1
    454c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    454e:	80 81       	ld	r24, Z
    4550:	80 68       	ori	r24, 0x80	; 128
    4552:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4554:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    4558:	08 95       	ret

0000455a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    455e:	48 2f       	mov	r20, r24
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	ca 01       	movw	r24, r20
    4564:	80 55       	subi	r24, 0x50	; 80
    4566:	9d 4f       	sbci	r25, 0xFD	; 253
    4568:	fc 01       	movw	r30, r24
    456a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    456c:	44 56       	subi	r20, 0x64	; 100
    456e:	5d 4f       	sbci	r21, 0xFD	; 253
    4570:	fa 01       	movw	r30, r20
    4572:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4574:	88 23       	and	r24, r24
    4576:	69 f1       	breq	.+90     	; 0x45d2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	fc 01       	movw	r30, r24
    4580:	e2 58       	subi	r30, 0x82	; 130
    4582:	fd 4f       	sbci	r31, 0xFD	; 253
    4584:	a5 91       	lpm	r26, Z+
    4586:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    4588:	fc 01       	movw	r30, r24
    458a:	e8 57       	subi	r30, 0x78	; 120
    458c:	fd 4f       	sbci	r31, 0xFD	; 253
    458e:	c5 91       	lpm	r28, Z+
    4590:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    4592:	66 23       	and	r22, r22
    4594:	51 f4       	brne	.+20     	; 0x45aa <pinMode+0x50>
		uint8_t oldSREG = SREG;
    4596:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4598:	f8 94       	cli
		*reg &= ~bit;
    459a:	8c 91       	ld	r24, X
    459c:	93 2f       	mov	r25, r19
    459e:	90 95       	com	r25
    45a0:	89 23       	and	r24, r25
    45a2:	8c 93       	st	X, r24
		*out &= ~bit;
    45a4:	88 81       	ld	r24, Y
    45a6:	89 23       	and	r24, r25
    45a8:	0b c0       	rjmp	.+22     	; 0x45c0 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    45aa:	62 30       	cpi	r22, 0x02	; 2
    45ac:	61 f4       	brne	.+24     	; 0x45c6 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    45ae:	2f b7       	in	r18, 0x3f	; 63
                cli();
    45b0:	f8 94       	cli
		*reg &= ~bit;
    45b2:	8c 91       	ld	r24, X
    45b4:	93 2f       	mov	r25, r19
    45b6:	90 95       	com	r25
    45b8:	89 23       	and	r24, r25
    45ba:	8c 93       	st	X, r24
		*out |= bit;
    45bc:	88 81       	ld	r24, Y
    45be:	83 2b       	or	r24, r19
    45c0:	88 83       	st	Y, r24
		SREG = oldSREG;
    45c2:	2f bf       	out	0x3f, r18	; 63
    45c4:	06 c0       	rjmp	.+12     	; 0x45d2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    45c6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    45c8:	f8 94       	cli
		*reg |= bit;
    45ca:	8c 91       	ld	r24, X
    45cc:	83 2b       	or	r24, r19
    45ce:	8c 93       	st	X, r24
		SREG = oldSREG;
    45d0:	9f bf       	out	0x3f, r25	; 63
	}
}
    45d2:	df 91       	pop	r29
    45d4:	cf 91       	pop	r28
    45d6:	08 95       	ret

000045d8 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    45d8:	48 2f       	mov	r20, r24
    45da:	50 e0       	ldi	r21, 0x00	; 0
    45dc:	ca 01       	movw	r24, r20
    45de:	8c 53       	subi	r24, 0x3C	; 60
    45e0:	9d 4f       	sbci	r25, 0xFD	; 253
    45e2:	fc 01       	movw	r30, r24
    45e4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    45e6:	ca 01       	movw	r24, r20
    45e8:	80 55       	subi	r24, 0x50	; 80
    45ea:	9d 4f       	sbci	r25, 0xFD	; 253
    45ec:	fc 01       	movw	r30, r24
    45ee:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    45f0:	44 56       	subi	r20, 0x64	; 100
    45f2:	5d 4f       	sbci	r21, 0xFD	; 253
    45f4:	fa 01       	movw	r30, r20
    45f6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    45f8:	33 23       	and	r19, r19
    45fa:	09 f4       	brne	.+2      	; 0x45fe <digitalWrite+0x26>
    45fc:	40 c0       	rjmp	.+128    	; 0x467e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    45fe:	22 23       	and	r18, r18
    4600:	51 f1       	breq	.+84     	; 0x4656 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4602:	23 30       	cpi	r18, 0x03	; 3
    4604:	71 f0       	breq	.+28     	; 0x4622 <digitalWrite+0x4a>
    4606:	24 30       	cpi	r18, 0x04	; 4
    4608:	28 f4       	brcc	.+10     	; 0x4614 <digitalWrite+0x3c>
    460a:	21 30       	cpi	r18, 0x01	; 1
    460c:	a1 f0       	breq	.+40     	; 0x4636 <digitalWrite+0x5e>
    460e:	22 30       	cpi	r18, 0x02	; 2
    4610:	11 f5       	brne	.+68     	; 0x4656 <digitalWrite+0x7e>
    4612:	14 c0       	rjmp	.+40     	; 0x463c <digitalWrite+0x64>
    4614:	26 30       	cpi	r18, 0x06	; 6
    4616:	b1 f0       	breq	.+44     	; 0x4644 <digitalWrite+0x6c>
    4618:	27 30       	cpi	r18, 0x07	; 7
    461a:	c1 f0       	breq	.+48     	; 0x464c <digitalWrite+0x74>
    461c:	24 30       	cpi	r18, 0x04	; 4
    461e:	d9 f4       	brne	.+54     	; 0x4656 <digitalWrite+0x7e>
    4620:	04 c0       	rjmp	.+8      	; 0x462a <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4622:	80 91 80 00 	lds	r24, 0x0080
    4626:	8f 77       	andi	r24, 0x7F	; 127
    4628:	03 c0       	rjmp	.+6      	; 0x4630 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    462a:	80 91 80 00 	lds	r24, 0x0080
    462e:	8f 7d       	andi	r24, 0xDF	; 223
    4630:	80 93 80 00 	sts	0x0080, r24
    4634:	10 c0       	rjmp	.+32     	; 0x4656 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4636:	84 b5       	in	r24, 0x24	; 36
    4638:	8f 77       	andi	r24, 0x7F	; 127
    463a:	02 c0       	rjmp	.+4      	; 0x4640 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    463c:	84 b5       	in	r24, 0x24	; 36
    463e:	8f 7d       	andi	r24, 0xDF	; 223
    4640:	84 bd       	out	0x24, r24	; 36
    4642:	09 c0       	rjmp	.+18     	; 0x4656 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4644:	80 91 b0 00 	lds	r24, 0x00B0
    4648:	8f 77       	andi	r24, 0x7F	; 127
    464a:	03 c0       	rjmp	.+6      	; 0x4652 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    464c:	80 91 b0 00 	lds	r24, 0x00B0
    4650:	8f 7d       	andi	r24, 0xDF	; 223
    4652:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    4656:	e3 2f       	mov	r30, r19
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	ee 0f       	add	r30, r30
    465c:	ff 1f       	adc	r31, r31
    465e:	e8 57       	subi	r30, 0x78	; 120
    4660:	fd 4f       	sbci	r31, 0xFD	; 253
    4662:	a5 91       	lpm	r26, Z+
    4664:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    4666:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4668:	f8 94       	cli

	if (val == LOW) {
    466a:	66 23       	and	r22, r22
    466c:	21 f4       	brne	.+8      	; 0x4676 <digitalWrite+0x9e>
		*out &= ~bit;
    466e:	8c 91       	ld	r24, X
    4670:	90 95       	com	r25
    4672:	89 23       	and	r24, r25
    4674:	02 c0       	rjmp	.+4      	; 0x467a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    4676:	8c 91       	ld	r24, X
    4678:	89 2b       	or	r24, r25
    467a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    467c:	2f bf       	out	0x3f, r18	; 63
    467e:	08 95       	ret

00004680 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    4680:	68 2f       	mov	r22, r24
    4682:	70 e0       	ldi	r23, 0x00	; 0
    4684:	cb 01       	movw	r24, r22
    4686:	8c 53       	subi	r24, 0x3C	; 60
    4688:	9d 4f       	sbci	r25, 0xFD	; 253
    468a:	fc 01       	movw	r30, r24
    468c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    468e:	cb 01       	movw	r24, r22
    4690:	80 55       	subi	r24, 0x50	; 80
    4692:	9d 4f       	sbci	r25, 0xFD	; 253
    4694:	fc 01       	movw	r30, r24
    4696:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    4698:	64 56       	subi	r22, 0x64	; 100
    469a:	7d 4f       	sbci	r23, 0xFD	; 253
    469c:	fb 01       	movw	r30, r22
    469e:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    46a0:	99 23       	and	r25, r25
    46a2:	19 f4       	brne	.+6      	; 0x46aa <digitalRead+0x2a>
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	3c c0       	rjmp	.+120    	; 0x4722 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    46aa:	22 23       	and	r18, r18
    46ac:	51 f1       	breq	.+84     	; 0x4702 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    46ae:	23 30       	cpi	r18, 0x03	; 3
    46b0:	71 f0       	breq	.+28     	; 0x46ce <digitalRead+0x4e>
    46b2:	24 30       	cpi	r18, 0x04	; 4
    46b4:	28 f4       	brcc	.+10     	; 0x46c0 <digitalRead+0x40>
    46b6:	21 30       	cpi	r18, 0x01	; 1
    46b8:	a1 f0       	breq	.+40     	; 0x46e2 <digitalRead+0x62>
    46ba:	22 30       	cpi	r18, 0x02	; 2
    46bc:	11 f5       	brne	.+68     	; 0x4702 <digitalRead+0x82>
    46be:	14 c0       	rjmp	.+40     	; 0x46e8 <digitalRead+0x68>
    46c0:	26 30       	cpi	r18, 0x06	; 6
    46c2:	b1 f0       	breq	.+44     	; 0x46f0 <digitalRead+0x70>
    46c4:	27 30       	cpi	r18, 0x07	; 7
    46c6:	c1 f0       	breq	.+48     	; 0x46f8 <digitalRead+0x78>
    46c8:	24 30       	cpi	r18, 0x04	; 4
    46ca:	d9 f4       	brne	.+54     	; 0x4702 <digitalRead+0x82>
    46cc:	04 c0       	rjmp	.+8      	; 0x46d6 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    46ce:	80 91 80 00 	lds	r24, 0x0080
    46d2:	8f 77       	andi	r24, 0x7F	; 127
    46d4:	03 c0       	rjmp	.+6      	; 0x46dc <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    46d6:	80 91 80 00 	lds	r24, 0x0080
    46da:	8f 7d       	andi	r24, 0xDF	; 223
    46dc:	80 93 80 00 	sts	0x0080, r24
    46e0:	10 c0       	rjmp	.+32     	; 0x4702 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    46e2:	84 b5       	in	r24, 0x24	; 36
    46e4:	8f 77       	andi	r24, 0x7F	; 127
    46e6:	02 c0       	rjmp	.+4      	; 0x46ec <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    46e8:	84 b5       	in	r24, 0x24	; 36
    46ea:	8f 7d       	andi	r24, 0xDF	; 223
    46ec:	84 bd       	out	0x24, r24	; 36
    46ee:	09 c0       	rjmp	.+18     	; 0x4702 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    46f0:	80 91 b0 00 	lds	r24, 0x00B0
    46f4:	8f 77       	andi	r24, 0x7F	; 127
    46f6:	03 c0       	rjmp	.+6      	; 0x46fe <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    46f8:	80 91 b0 00 	lds	r24, 0x00B0
    46fc:	8f 7d       	andi	r24, 0xDF	; 223
    46fe:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    4702:	89 2f       	mov	r24, r25
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	88 0f       	add	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	8e 56       	subi	r24, 0x6E	; 110
    470c:	9d 4f       	sbci	r25, 0xFD	; 253
    470e:	fc 01       	movw	r30, r24
    4710:	a5 91       	lpm	r26, Z+
    4712:	b4 91       	lpm	r27, Z+
    4714:	8c 91       	ld	r24, X
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	84 23       	and	r24, r20
    471c:	11 f0       	breq	.+4      	; 0x4722 <digitalRead+0xa2>
    471e:	21 e0       	ldi	r18, 0x01	; 1
    4720:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    4722:	c9 01       	movw	r24, r18
    4724:	08 95       	ret

00004726 <__subsf3>:
    4726:	50 58       	subi	r21, 0x80	; 128

00004728 <__addsf3>:
    4728:	bb 27       	eor	r27, r27
    472a:	aa 27       	eor	r26, r26
    472c:	0e d0       	rcall	.+28     	; 0x474a <__addsf3x>
    472e:	73 c2       	rjmp	.+1254   	; 0x4c16 <__fp_round>
    4730:	33 d2       	rcall	.+1126   	; 0x4b98 <__fp_pscA>
    4732:	30 f0       	brcs	.+12     	; 0x4740 <__addsf3+0x18>
    4734:	38 d2       	rcall	.+1136   	; 0x4ba6 <__fp_pscB>
    4736:	20 f0       	brcs	.+8      	; 0x4740 <__addsf3+0x18>
    4738:	31 f4       	brne	.+12     	; 0x4746 <__addsf3+0x1e>
    473a:	9f 3f       	cpi	r25, 0xFF	; 255
    473c:	11 f4       	brne	.+4      	; 0x4742 <__addsf3+0x1a>
    473e:	1e f4       	brtc	.+6      	; 0x4746 <__addsf3+0x1e>
    4740:	f2 c1       	rjmp	.+996    	; 0x4b26 <__fp_nan>
    4742:	0e f4       	brtc	.+2      	; 0x4746 <__addsf3+0x1e>
    4744:	e0 95       	com	r30
    4746:	e7 fb       	bst	r30, 7
    4748:	e8 c1       	rjmp	.+976    	; 0x4b1a <__fp_inf>

0000474a <__addsf3x>:
    474a:	e9 2f       	mov	r30, r25
    474c:	86 d2       	rcall	.+1292   	; 0x4c5a <__fp_split3>
    474e:	80 f3       	brcs	.-32     	; 0x4730 <__addsf3+0x8>
    4750:	ba 17       	cp	r27, r26
    4752:	62 07       	cpc	r22, r18
    4754:	73 07       	cpc	r23, r19
    4756:	84 07       	cpc	r24, r20
    4758:	95 07       	cpc	r25, r21
    475a:	18 f0       	brcs	.+6      	; 0x4762 <__addsf3x+0x18>
    475c:	71 f4       	brne	.+28     	; 0x477a <__addsf3x+0x30>
    475e:	9e f5       	brtc	.+102    	; 0x47c6 <__addsf3x+0x7c>
    4760:	9e c2       	rjmp	.+1340   	; 0x4c9e <__fp_zero>
    4762:	0e f4       	brtc	.+2      	; 0x4766 <__addsf3x+0x1c>
    4764:	e0 95       	com	r30
    4766:	0b 2e       	mov	r0, r27
    4768:	ba 2f       	mov	r27, r26
    476a:	a0 2d       	mov	r26, r0
    476c:	0b 01       	movw	r0, r22
    476e:	b9 01       	movw	r22, r18
    4770:	90 01       	movw	r18, r0
    4772:	0c 01       	movw	r0, r24
    4774:	ca 01       	movw	r24, r20
    4776:	a0 01       	movw	r20, r0
    4778:	11 24       	eor	r1, r1
    477a:	ff 27       	eor	r31, r31
    477c:	59 1b       	sub	r21, r25
    477e:	99 f0       	breq	.+38     	; 0x47a6 <__addsf3x+0x5c>
    4780:	59 3f       	cpi	r21, 0xF9	; 249
    4782:	50 f4       	brcc	.+20     	; 0x4798 <__addsf3x+0x4e>
    4784:	50 3e       	cpi	r21, 0xE0	; 224
    4786:	68 f1       	brcs	.+90     	; 0x47e2 <__addsf3x+0x98>
    4788:	1a 16       	cp	r1, r26
    478a:	f0 40       	sbci	r31, 0x00	; 0
    478c:	a2 2f       	mov	r26, r18
    478e:	23 2f       	mov	r18, r19
    4790:	34 2f       	mov	r19, r20
    4792:	44 27       	eor	r20, r20
    4794:	58 5f       	subi	r21, 0xF8	; 248
    4796:	f3 cf       	rjmp	.-26     	; 0x477e <__addsf3x+0x34>
    4798:	46 95       	lsr	r20
    479a:	37 95       	ror	r19
    479c:	27 95       	ror	r18
    479e:	a7 95       	ror	r26
    47a0:	f0 40       	sbci	r31, 0x00	; 0
    47a2:	53 95       	inc	r21
    47a4:	c9 f7       	brne	.-14     	; 0x4798 <__addsf3x+0x4e>
    47a6:	7e f4       	brtc	.+30     	; 0x47c6 <__addsf3x+0x7c>
    47a8:	1f 16       	cp	r1, r31
    47aa:	ba 0b       	sbc	r27, r26
    47ac:	62 0b       	sbc	r22, r18
    47ae:	73 0b       	sbc	r23, r19
    47b0:	84 0b       	sbc	r24, r20
    47b2:	ba f0       	brmi	.+46     	; 0x47e2 <__addsf3x+0x98>
    47b4:	91 50       	subi	r25, 0x01	; 1
    47b6:	a1 f0       	breq	.+40     	; 0x47e0 <__addsf3x+0x96>
    47b8:	ff 0f       	add	r31, r31
    47ba:	bb 1f       	adc	r27, r27
    47bc:	66 1f       	adc	r22, r22
    47be:	77 1f       	adc	r23, r23
    47c0:	88 1f       	adc	r24, r24
    47c2:	c2 f7       	brpl	.-16     	; 0x47b4 <__addsf3x+0x6a>
    47c4:	0e c0       	rjmp	.+28     	; 0x47e2 <__addsf3x+0x98>
    47c6:	ba 0f       	add	r27, r26
    47c8:	62 1f       	adc	r22, r18
    47ca:	73 1f       	adc	r23, r19
    47cc:	84 1f       	adc	r24, r20
    47ce:	48 f4       	brcc	.+18     	; 0x47e2 <__addsf3x+0x98>
    47d0:	87 95       	ror	r24
    47d2:	77 95       	ror	r23
    47d4:	67 95       	ror	r22
    47d6:	b7 95       	ror	r27
    47d8:	f7 95       	ror	r31
    47da:	9e 3f       	cpi	r25, 0xFE	; 254
    47dc:	08 f0       	brcs	.+2      	; 0x47e0 <__addsf3x+0x96>
    47de:	b3 cf       	rjmp	.-154    	; 0x4746 <__addsf3+0x1e>
    47e0:	93 95       	inc	r25
    47e2:	88 0f       	add	r24, r24
    47e4:	08 f0       	brcs	.+2      	; 0x47e8 <__addsf3x+0x9e>
    47e6:	99 27       	eor	r25, r25
    47e8:	ee 0f       	add	r30, r30
    47ea:	97 95       	ror	r25
    47ec:	87 95       	ror	r24
    47ee:	08 95       	ret

000047f0 <asin>:
    47f0:	9f 93       	push	r25
    47f2:	9f 77       	andi	r25, 0x7F	; 127
    47f4:	ee e3       	ldi	r30, 0x3E	; 62
    47f6:	89 37       	cpi	r24, 0x79	; 121
    47f8:	9e 07       	cpc	r25, r30
    47fa:	20 f4       	brcc	.+8      	; 0x4804 <asin+0x14>
    47fc:	e8 e6       	ldi	r30, 0x68	; 104
    47fe:	f0 e0       	ldi	r31, 0x00	; 0
    4800:	ba d1       	rcall	.+884    	; 0x4b76 <__fp_powsodd>
    4802:	09 c0       	rjmp	.+18     	; 0x4816 <asin+0x26>
    4804:	4b d1       	rcall	.+662    	; 0x4a9c <__fp_arccos>
    4806:	90 58       	subi	r25, 0x80	; 128
    4808:	a2 ea       	ldi	r26, 0xA2	; 162
    480a:	2a ed       	ldi	r18, 0xDA	; 218
    480c:	3f e0       	ldi	r19, 0x0F	; 15
    480e:	49 ec       	ldi	r20, 0xC9	; 201
    4810:	5f e3       	ldi	r21, 0x3F	; 63
    4812:	9b df       	rcall	.-202    	; 0x474a <__addsf3x>
    4814:	00 d2       	rcall	.+1024   	; 0x4c16 <__fp_round>
    4816:	0f 90       	pop	r0
    4818:	07 fc       	sbrc	r0, 7
    481a:	90 58       	subi	r25, 0x80	; 128
    481c:	08 95       	ret
    481e:	bc d1       	rcall	.+888    	; 0x4b98 <__fp_pscA>
    4820:	58 f0       	brcs	.+22     	; 0x4838 <asin+0x48>
    4822:	80 e8       	ldi	r24, 0x80	; 128
    4824:	91 e0       	ldi	r25, 0x01	; 1
    4826:	09 f4       	brne	.+2      	; 0x482a <asin+0x3a>
    4828:	9e ef       	ldi	r25, 0xFE	; 254
    482a:	bd d1       	rcall	.+890    	; 0x4ba6 <__fp_pscB>
    482c:	28 f0       	brcs	.+10     	; 0x4838 <asin+0x48>
    482e:	40 e8       	ldi	r20, 0x80	; 128
    4830:	51 e0       	ldi	r21, 0x01	; 1
    4832:	59 f4       	brne	.+22     	; 0x484a <atan2+0xe>
    4834:	5e ef       	ldi	r21, 0xFE	; 254
    4836:	09 c0       	rjmp	.+18     	; 0x484a <atan2+0xe>
    4838:	76 c1       	rjmp	.+748    	; 0x4b26 <__fp_nan>
    483a:	31 c2       	rjmp	.+1122   	; 0x4c9e <__fp_zero>

0000483c <atan2>:
    483c:	e9 2f       	mov	r30, r25
    483e:	e0 78       	andi	r30, 0x80	; 128
    4840:	0c d2       	rcall	.+1048   	; 0x4c5a <__fp_split3>
    4842:	68 f3       	brcs	.-38     	; 0x481e <asin+0x2e>
    4844:	09 2e       	mov	r0, r25
    4846:	05 2a       	or	r0, r21
    4848:	c1 f3       	breq	.-16     	; 0x483a <asin+0x4a>
    484a:	26 17       	cp	r18, r22
    484c:	37 07       	cpc	r19, r23
    484e:	48 07       	cpc	r20, r24
    4850:	59 07       	cpc	r21, r25
    4852:	38 f0       	brcs	.+14     	; 0x4862 <atan2+0x26>
    4854:	0e 2e       	mov	r0, r30
    4856:	07 f8       	bld	r0, 7
    4858:	e0 25       	eor	r30, r0
    485a:	69 f0       	breq	.+26     	; 0x4876 <atan2+0x3a>
    485c:	e0 25       	eor	r30, r0
    485e:	e0 64       	ori	r30, 0x40	; 64
    4860:	0a c0       	rjmp	.+20     	; 0x4876 <atan2+0x3a>
    4862:	ef 63       	ori	r30, 0x3F	; 63
    4864:	07 f8       	bld	r0, 7
    4866:	00 94       	com	r0
    4868:	07 fa       	bst	r0, 7
    486a:	db 01       	movw	r26, r22
    486c:	b9 01       	movw	r22, r18
    486e:	9d 01       	movw	r18, r26
    4870:	dc 01       	movw	r26, r24
    4872:	ca 01       	movw	r24, r20
    4874:	ad 01       	movw	r20, r26
    4876:	ef 93       	push	r30
    4878:	4a d0       	rcall	.+148    	; 0x490e <__divsf3_pse>
    487a:	cd d1       	rcall	.+922    	; 0x4c16 <__fp_round>
    487c:	0a d0       	rcall	.+20     	; 0x4892 <atan>
    487e:	5f 91       	pop	r21
    4880:	55 23       	and	r21, r21
    4882:	31 f0       	breq	.+12     	; 0x4890 <atan2+0x54>
    4884:	2b ed       	ldi	r18, 0xDB	; 219
    4886:	3f e0       	ldi	r19, 0x0F	; 15
    4888:	49 e4       	ldi	r20, 0x49	; 73
    488a:	50 fd       	sbrc	r21, 0
    488c:	49 ec       	ldi	r20, 0xC9	; 201
    488e:	4c cf       	rjmp	.-360    	; 0x4728 <__addsf3>
    4890:	08 95       	ret

00004892 <atan>:
    4892:	df 93       	push	r29
    4894:	dd 27       	eor	r29, r29
    4896:	b9 2f       	mov	r27, r25
    4898:	bf 77       	andi	r27, 0x7F	; 127
    489a:	40 e8       	ldi	r20, 0x80	; 128
    489c:	5f e3       	ldi	r21, 0x3F	; 63
    489e:	16 16       	cp	r1, r22
    48a0:	17 06       	cpc	r1, r23
    48a2:	48 07       	cpc	r20, r24
    48a4:	5b 07       	cpc	r21, r27
    48a6:	10 f4       	brcc	.+4      	; 0x48ac <atan+0x1a>
    48a8:	d9 2f       	mov	r29, r25
    48aa:	04 d2       	rcall	.+1032   	; 0x4cb4 <inverse>
    48ac:	9f 93       	push	r25
    48ae:	8f 93       	push	r24
    48b0:	7f 93       	push	r23
    48b2:	6f 93       	push	r22
    48b4:	bd d2       	rcall	.+1402   	; 0x4e30 <square>
    48b6:	ec e7       	ldi	r30, 0x7C	; 124
    48b8:	f0 e0       	ldi	r31, 0x00	; 0
    48ba:	38 d1       	rcall	.+624    	; 0x4b2c <__fp_powser>
    48bc:	ac d1       	rcall	.+856    	; 0x4c16 <__fp_round>
    48be:	2f 91       	pop	r18
    48c0:	3f 91       	pop	r19
    48c2:	4f 91       	pop	r20
    48c4:	5f 91       	pop	r21
    48c6:	09 d2       	rcall	.+1042   	; 0x4cda <__mulsf3x>
    48c8:	dd 23       	and	r29, r29
    48ca:	49 f0       	breq	.+18     	; 0x48de <atan+0x4c>
    48cc:	90 58       	subi	r25, 0x80	; 128
    48ce:	a2 ea       	ldi	r26, 0xA2	; 162
    48d0:	2a ed       	ldi	r18, 0xDA	; 218
    48d2:	3f e0       	ldi	r19, 0x0F	; 15
    48d4:	49 ec       	ldi	r20, 0xC9	; 201
    48d6:	5f e3       	ldi	r21, 0x3F	; 63
    48d8:	d0 78       	andi	r29, 0x80	; 128
    48da:	5d 27       	eor	r21, r29
    48dc:	36 df       	rcall	.-404    	; 0x474a <__addsf3x>
    48de:	df 91       	pop	r29
    48e0:	9a c1       	rjmp	.+820    	; 0x4c16 <__fp_round>

000048e2 <__cmpsf2>:
    48e2:	f7 d0       	rcall	.+494    	; 0x4ad2 <__fp_cmp>
    48e4:	08 f4       	brcc	.+2      	; 0x48e8 <__cmpsf2+0x6>
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	08 95       	ret

000048ea <cos>:
    48ea:	65 d1       	rcall	.+714    	; 0x4bb6 <__fp_rempio2>
    48ec:	e3 95       	inc	r30
    48ee:	a4 c1       	rjmp	.+840    	; 0x4c38 <__fp_sinus>

000048f0 <__divsf3>:
    48f0:	0c d0       	rcall	.+24     	; 0x490a <__divsf3x>
    48f2:	91 c1       	rjmp	.+802    	; 0x4c16 <__fp_round>
    48f4:	58 d1       	rcall	.+688    	; 0x4ba6 <__fp_pscB>
    48f6:	40 f0       	brcs	.+16     	; 0x4908 <__divsf3+0x18>
    48f8:	4f d1       	rcall	.+670    	; 0x4b98 <__fp_pscA>
    48fa:	30 f0       	brcs	.+12     	; 0x4908 <__divsf3+0x18>
    48fc:	21 f4       	brne	.+8      	; 0x4906 <__divsf3+0x16>
    48fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4900:	19 f0       	breq	.+6      	; 0x4908 <__divsf3+0x18>
    4902:	0b c1       	rjmp	.+534    	; 0x4b1a <__fp_inf>
    4904:	51 11       	cpse	r21, r1
    4906:	cc c1       	rjmp	.+920    	; 0x4ca0 <__fp_szero>
    4908:	0e c1       	rjmp	.+540    	; 0x4b26 <__fp_nan>

0000490a <__divsf3x>:
    490a:	a7 d1       	rcall	.+846    	; 0x4c5a <__fp_split3>
    490c:	98 f3       	brcs	.-26     	; 0x48f4 <__divsf3+0x4>

0000490e <__divsf3_pse>:
    490e:	99 23       	and	r25, r25
    4910:	c9 f3       	breq	.-14     	; 0x4904 <__divsf3+0x14>
    4912:	55 23       	and	r21, r21
    4914:	b1 f3       	breq	.-20     	; 0x4902 <__divsf3+0x12>
    4916:	95 1b       	sub	r25, r21
    4918:	55 0b       	sbc	r21, r21
    491a:	bb 27       	eor	r27, r27
    491c:	aa 27       	eor	r26, r26
    491e:	62 17       	cp	r22, r18
    4920:	73 07       	cpc	r23, r19
    4922:	84 07       	cpc	r24, r20
    4924:	38 f0       	brcs	.+14     	; 0x4934 <__divsf3_pse+0x26>
    4926:	9f 5f       	subi	r25, 0xFF	; 255
    4928:	5f 4f       	sbci	r21, 0xFF	; 255
    492a:	22 0f       	add	r18, r18
    492c:	33 1f       	adc	r19, r19
    492e:	44 1f       	adc	r20, r20
    4930:	aa 1f       	adc	r26, r26
    4932:	a9 f3       	breq	.-22     	; 0x491e <__divsf3_pse+0x10>
    4934:	33 d0       	rcall	.+102    	; 0x499c <__divsf3_pse+0x8e>
    4936:	0e 2e       	mov	r0, r30
    4938:	3a f0       	brmi	.+14     	; 0x4948 <__divsf3_pse+0x3a>
    493a:	e0 e8       	ldi	r30, 0x80	; 128
    493c:	30 d0       	rcall	.+96     	; 0x499e <__divsf3_pse+0x90>
    493e:	91 50       	subi	r25, 0x01	; 1
    4940:	50 40       	sbci	r21, 0x00	; 0
    4942:	e6 95       	lsr	r30
    4944:	00 1c       	adc	r0, r0
    4946:	ca f7       	brpl	.-14     	; 0x493a <__divsf3_pse+0x2c>
    4948:	29 d0       	rcall	.+82     	; 0x499c <__divsf3_pse+0x8e>
    494a:	fe 2f       	mov	r31, r30
    494c:	27 d0       	rcall	.+78     	; 0x499c <__divsf3_pse+0x8e>
    494e:	66 0f       	add	r22, r22
    4950:	77 1f       	adc	r23, r23
    4952:	88 1f       	adc	r24, r24
    4954:	bb 1f       	adc	r27, r27
    4956:	26 17       	cp	r18, r22
    4958:	37 07       	cpc	r19, r23
    495a:	48 07       	cpc	r20, r24
    495c:	ab 07       	cpc	r26, r27
    495e:	b0 e8       	ldi	r27, 0x80	; 128
    4960:	09 f0       	breq	.+2      	; 0x4964 <__divsf3_pse+0x56>
    4962:	bb 0b       	sbc	r27, r27
    4964:	80 2d       	mov	r24, r0
    4966:	bf 01       	movw	r22, r30
    4968:	ff 27       	eor	r31, r31
    496a:	93 58       	subi	r25, 0x83	; 131
    496c:	5f 4f       	sbci	r21, 0xFF	; 255
    496e:	2a f0       	brmi	.+10     	; 0x497a <__divsf3_pse+0x6c>
    4970:	9e 3f       	cpi	r25, 0xFE	; 254
    4972:	51 05       	cpc	r21, r1
    4974:	68 f0       	brcs	.+26     	; 0x4990 <__divsf3_pse+0x82>
    4976:	d1 c0       	rjmp	.+418    	; 0x4b1a <__fp_inf>
    4978:	93 c1       	rjmp	.+806    	; 0x4ca0 <__fp_szero>
    497a:	5f 3f       	cpi	r21, 0xFF	; 255
    497c:	ec f3       	brlt	.-6      	; 0x4978 <__divsf3_pse+0x6a>
    497e:	98 3e       	cpi	r25, 0xE8	; 232
    4980:	dc f3       	brlt	.-10     	; 0x4978 <__divsf3_pse+0x6a>
    4982:	86 95       	lsr	r24
    4984:	77 95       	ror	r23
    4986:	67 95       	ror	r22
    4988:	b7 95       	ror	r27
    498a:	f7 95       	ror	r31
    498c:	9f 5f       	subi	r25, 0xFF	; 255
    498e:	c9 f7       	brne	.-14     	; 0x4982 <__divsf3_pse+0x74>
    4990:	88 0f       	add	r24, r24
    4992:	91 1d       	adc	r25, r1
    4994:	96 95       	lsr	r25
    4996:	87 95       	ror	r24
    4998:	97 f9       	bld	r25, 7
    499a:	08 95       	ret
    499c:	e1 e0       	ldi	r30, 0x01	; 1
    499e:	66 0f       	add	r22, r22
    49a0:	77 1f       	adc	r23, r23
    49a2:	88 1f       	adc	r24, r24
    49a4:	bb 1f       	adc	r27, r27
    49a6:	62 17       	cp	r22, r18
    49a8:	73 07       	cpc	r23, r19
    49aa:	84 07       	cpc	r24, r20
    49ac:	ba 07       	cpc	r27, r26
    49ae:	20 f0       	brcs	.+8      	; 0x49b8 <__divsf3_pse+0xaa>
    49b0:	62 1b       	sub	r22, r18
    49b2:	73 0b       	sbc	r23, r19
    49b4:	84 0b       	sbc	r24, r20
    49b6:	ba 0b       	sbc	r27, r26
    49b8:	ee 1f       	adc	r30, r30
    49ba:	88 f7       	brcc	.-30     	; 0x499e <__divsf3_pse+0x90>
    49bc:	e0 95       	com	r30
    49be:	08 95       	ret

000049c0 <__fixsfsi>:
    49c0:	04 d0       	rcall	.+8      	; 0x49ca <__fixunssfsi>
    49c2:	68 94       	set
    49c4:	b1 11       	cpse	r27, r1
    49c6:	6c c1       	rjmp	.+728    	; 0x4ca0 <__fp_szero>
    49c8:	08 95       	ret

000049ca <__fixunssfsi>:
    49ca:	4f d1       	rcall	.+670    	; 0x4c6a <__fp_splitA>
    49cc:	88 f0       	brcs	.+34     	; 0x49f0 <__fixunssfsi+0x26>
    49ce:	9f 57       	subi	r25, 0x7F	; 127
    49d0:	90 f0       	brcs	.+36     	; 0x49f6 <__fixunssfsi+0x2c>
    49d2:	b9 2f       	mov	r27, r25
    49d4:	99 27       	eor	r25, r25
    49d6:	b7 51       	subi	r27, 0x17	; 23
    49d8:	a0 f0       	brcs	.+40     	; 0x4a02 <__fixunssfsi+0x38>
    49da:	d1 f0       	breq	.+52     	; 0x4a10 <__fixunssfsi+0x46>
    49dc:	66 0f       	add	r22, r22
    49de:	77 1f       	adc	r23, r23
    49e0:	88 1f       	adc	r24, r24
    49e2:	99 1f       	adc	r25, r25
    49e4:	1a f0       	brmi	.+6      	; 0x49ec <__fixunssfsi+0x22>
    49e6:	ba 95       	dec	r27
    49e8:	c9 f7       	brne	.-14     	; 0x49dc <__fixunssfsi+0x12>
    49ea:	12 c0       	rjmp	.+36     	; 0x4a10 <__fixunssfsi+0x46>
    49ec:	b1 30       	cpi	r27, 0x01	; 1
    49ee:	81 f0       	breq	.+32     	; 0x4a10 <__fixunssfsi+0x46>
    49f0:	56 d1       	rcall	.+684    	; 0x4c9e <__fp_zero>
    49f2:	b1 e0       	ldi	r27, 0x01	; 1
    49f4:	08 95       	ret
    49f6:	53 c1       	rjmp	.+678    	; 0x4c9e <__fp_zero>
    49f8:	67 2f       	mov	r22, r23
    49fa:	78 2f       	mov	r23, r24
    49fc:	88 27       	eor	r24, r24
    49fe:	b8 5f       	subi	r27, 0xF8	; 248
    4a00:	39 f0       	breq	.+14     	; 0x4a10 <__fixunssfsi+0x46>
    4a02:	b9 3f       	cpi	r27, 0xF9	; 249
    4a04:	cc f3       	brlt	.-14     	; 0x49f8 <__fixunssfsi+0x2e>
    4a06:	86 95       	lsr	r24
    4a08:	77 95       	ror	r23
    4a0a:	67 95       	ror	r22
    4a0c:	b3 95       	inc	r27
    4a0e:	d9 f7       	brne	.-10     	; 0x4a06 <__fixunssfsi+0x3c>
    4a10:	3e f4       	brtc	.+14     	; 0x4a20 <__fixunssfsi+0x56>
    4a12:	90 95       	com	r25
    4a14:	80 95       	com	r24
    4a16:	70 95       	com	r23
    4a18:	61 95       	neg	r22
    4a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a20:	08 95       	ret

00004a22 <__floatunsisf>:
    4a22:	e8 94       	clt
    4a24:	09 c0       	rjmp	.+18     	; 0x4a38 <__floatsisf+0x12>

00004a26 <__floatsisf>:
    4a26:	97 fb       	bst	r25, 7
    4a28:	3e f4       	brtc	.+14     	; 0x4a38 <__floatsisf+0x12>
    4a2a:	90 95       	com	r25
    4a2c:	80 95       	com	r24
    4a2e:	70 95       	com	r23
    4a30:	61 95       	neg	r22
    4a32:	7f 4f       	sbci	r23, 0xFF	; 255
    4a34:	8f 4f       	sbci	r24, 0xFF	; 255
    4a36:	9f 4f       	sbci	r25, 0xFF	; 255
    4a38:	99 23       	and	r25, r25
    4a3a:	a9 f0       	breq	.+42     	; 0x4a66 <__floatsisf+0x40>
    4a3c:	f9 2f       	mov	r31, r25
    4a3e:	96 e9       	ldi	r25, 0x96	; 150
    4a40:	bb 27       	eor	r27, r27
    4a42:	93 95       	inc	r25
    4a44:	f6 95       	lsr	r31
    4a46:	87 95       	ror	r24
    4a48:	77 95       	ror	r23
    4a4a:	67 95       	ror	r22
    4a4c:	b7 95       	ror	r27
    4a4e:	f1 11       	cpse	r31, r1
    4a50:	f8 cf       	rjmp	.-16     	; 0x4a42 <__floatsisf+0x1c>
    4a52:	fa f4       	brpl	.+62     	; 0x4a92 <__floatsisf+0x6c>
    4a54:	bb 0f       	add	r27, r27
    4a56:	11 f4       	brne	.+4      	; 0x4a5c <__floatsisf+0x36>
    4a58:	60 ff       	sbrs	r22, 0
    4a5a:	1b c0       	rjmp	.+54     	; 0x4a92 <__floatsisf+0x6c>
    4a5c:	6f 5f       	subi	r22, 0xFF	; 255
    4a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a60:	8f 4f       	sbci	r24, 0xFF	; 255
    4a62:	9f 4f       	sbci	r25, 0xFF	; 255
    4a64:	16 c0       	rjmp	.+44     	; 0x4a92 <__floatsisf+0x6c>
    4a66:	88 23       	and	r24, r24
    4a68:	11 f0       	breq	.+4      	; 0x4a6e <__floatsisf+0x48>
    4a6a:	96 e9       	ldi	r25, 0x96	; 150
    4a6c:	11 c0       	rjmp	.+34     	; 0x4a90 <__floatsisf+0x6a>
    4a6e:	77 23       	and	r23, r23
    4a70:	21 f0       	breq	.+8      	; 0x4a7a <__floatsisf+0x54>
    4a72:	9e e8       	ldi	r25, 0x8E	; 142
    4a74:	87 2f       	mov	r24, r23
    4a76:	76 2f       	mov	r23, r22
    4a78:	05 c0       	rjmp	.+10     	; 0x4a84 <__floatsisf+0x5e>
    4a7a:	66 23       	and	r22, r22
    4a7c:	71 f0       	breq	.+28     	; 0x4a9a <__floatsisf+0x74>
    4a7e:	96 e8       	ldi	r25, 0x86	; 134
    4a80:	86 2f       	mov	r24, r22
    4a82:	70 e0       	ldi	r23, 0x00	; 0
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	2a f0       	brmi	.+10     	; 0x4a92 <__floatsisf+0x6c>
    4a88:	9a 95       	dec	r25
    4a8a:	66 0f       	add	r22, r22
    4a8c:	77 1f       	adc	r23, r23
    4a8e:	88 1f       	adc	r24, r24
    4a90:	da f7       	brpl	.-10     	; 0x4a88 <__floatsisf+0x62>
    4a92:	88 0f       	add	r24, r24
    4a94:	96 95       	lsr	r25
    4a96:	87 95       	ror	r24
    4a98:	97 f9       	bld	r25, 7
    4a9a:	08 95       	ret

00004a9c <__fp_arccos>:
    4a9c:	df 93       	push	r29
    4a9e:	cf 93       	push	r28
    4aa0:	1f 93       	push	r17
    4aa2:	0f 93       	push	r16
    4aa4:	8b 01       	movw	r16, r22
    4aa6:	ec 01       	movw	r28, r24
    4aa8:	e9 ea       	ldi	r30, 0xA9	; 169
    4aaa:	f0 e0       	ldi	r31, 0x00	; 0
    4aac:	3f d0       	rcall	.+126    	; 0x4b2c <__fp_powser>
    4aae:	b3 d0       	rcall	.+358    	; 0x4c16 <__fp_round>
    4ab0:	98 01       	movw	r18, r16
    4ab2:	ae 01       	movw	r20, r28
    4ab4:	8b 01       	movw	r16, r22
    4ab6:	ec 01       	movw	r28, r24
    4ab8:	60 e0       	ldi	r22, 0x00	; 0
    4aba:	70 e0       	ldi	r23, 0x00	; 0
    4abc:	80 e8       	ldi	r24, 0x80	; 128
    4abe:	9f e3       	ldi	r25, 0x3F	; 63
    4ac0:	32 de       	rcall	.-924    	; 0x4726 <__subsf3>
    4ac2:	6c d1       	rcall	.+728    	; 0x4d9c <sqrt>
    4ac4:	98 01       	movw	r18, r16
    4ac6:	ae 01       	movw	r20, r28
    4ac8:	0f 91       	pop	r16
    4aca:	1f 91       	pop	r17
    4acc:	cf 91       	pop	r28
    4ace:	df 91       	pop	r29
    4ad0:	04 c1       	rjmp	.+520    	; 0x4cda <__mulsf3x>

00004ad2 <__fp_cmp>:
    4ad2:	99 0f       	add	r25, r25
    4ad4:	00 08       	sbc	r0, r0
    4ad6:	55 0f       	add	r21, r21
    4ad8:	aa 0b       	sbc	r26, r26
    4ada:	e0 e8       	ldi	r30, 0x80	; 128
    4adc:	fe ef       	ldi	r31, 0xFE	; 254
    4ade:	16 16       	cp	r1, r22
    4ae0:	17 06       	cpc	r1, r23
    4ae2:	e8 07       	cpc	r30, r24
    4ae4:	f9 07       	cpc	r31, r25
    4ae6:	c0 f0       	brcs	.+48     	; 0x4b18 <__fp_cmp+0x46>
    4ae8:	12 16       	cp	r1, r18
    4aea:	13 06       	cpc	r1, r19
    4aec:	e4 07       	cpc	r30, r20
    4aee:	f5 07       	cpc	r31, r21
    4af0:	98 f0       	brcs	.+38     	; 0x4b18 <__fp_cmp+0x46>
    4af2:	62 1b       	sub	r22, r18
    4af4:	73 0b       	sbc	r23, r19
    4af6:	84 0b       	sbc	r24, r20
    4af8:	95 0b       	sbc	r25, r21
    4afa:	39 f4       	brne	.+14     	; 0x4b0a <__fp_cmp+0x38>
    4afc:	0a 26       	eor	r0, r26
    4afe:	61 f0       	breq	.+24     	; 0x4b18 <__fp_cmp+0x46>
    4b00:	23 2b       	or	r18, r19
    4b02:	24 2b       	or	r18, r20
    4b04:	25 2b       	or	r18, r21
    4b06:	21 f4       	brne	.+8      	; 0x4b10 <__fp_cmp+0x3e>
    4b08:	08 95       	ret
    4b0a:	0a 26       	eor	r0, r26
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <__fp_cmp+0x3e>
    4b0e:	a1 40       	sbci	r26, 0x01	; 1
    4b10:	a6 95       	lsr	r26
    4b12:	8f ef       	ldi	r24, 0xFF	; 255
    4b14:	81 1d       	adc	r24, r1
    4b16:	81 1d       	adc	r24, r1
    4b18:	08 95       	ret

00004b1a <__fp_inf>:
    4b1a:	97 f9       	bld	r25, 7
    4b1c:	9f 67       	ori	r25, 0x7F	; 127
    4b1e:	80 e8       	ldi	r24, 0x80	; 128
    4b20:	70 e0       	ldi	r23, 0x00	; 0
    4b22:	60 e0       	ldi	r22, 0x00	; 0
    4b24:	08 95       	ret

00004b26 <__fp_nan>:
    4b26:	9f ef       	ldi	r25, 0xFF	; 255
    4b28:	80 ec       	ldi	r24, 0xC0	; 192
    4b2a:	08 95       	ret

00004b2c <__fp_powser>:
    4b2c:	df 93       	push	r29
    4b2e:	cf 93       	push	r28
    4b30:	1f 93       	push	r17
    4b32:	0f 93       	push	r16
    4b34:	ff 92       	push	r15
    4b36:	ef 92       	push	r14
    4b38:	df 92       	push	r13
    4b3a:	7b 01       	movw	r14, r22
    4b3c:	8c 01       	movw	r16, r24
    4b3e:	68 94       	set
    4b40:	05 c0       	rjmp	.+10     	; 0x4b4c <__fp_powser+0x20>
    4b42:	da 2e       	mov	r13, r26
    4b44:	ef 01       	movw	r28, r30
    4b46:	c9 d0       	rcall	.+402    	; 0x4cda <__mulsf3x>
    4b48:	fe 01       	movw	r30, r28
    4b4a:	e8 94       	clt
    4b4c:	a5 91       	lpm	r26, Z+
    4b4e:	25 91       	lpm	r18, Z+
    4b50:	35 91       	lpm	r19, Z+
    4b52:	45 91       	lpm	r20, Z+
    4b54:	55 91       	lpm	r21, Z+
    4b56:	ae f3       	brts	.-22     	; 0x4b42 <__fp_powser+0x16>
    4b58:	ef 01       	movw	r28, r30
    4b5a:	f7 dd       	rcall	.-1042   	; 0x474a <__addsf3x>
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	97 01       	movw	r18, r14
    4b60:	a8 01       	movw	r20, r16
    4b62:	da 94       	dec	r13
    4b64:	79 f7       	brne	.-34     	; 0x4b44 <__fp_powser+0x18>
    4b66:	df 90       	pop	r13
    4b68:	ef 90       	pop	r14
    4b6a:	ff 90       	pop	r15
    4b6c:	0f 91       	pop	r16
    4b6e:	1f 91       	pop	r17
    4b70:	cf 91       	pop	r28
    4b72:	df 91       	pop	r29
    4b74:	08 95       	ret

00004b76 <__fp_powsodd>:
    4b76:	9f 93       	push	r25
    4b78:	8f 93       	push	r24
    4b7a:	7f 93       	push	r23
    4b7c:	6f 93       	push	r22
    4b7e:	ff 93       	push	r31
    4b80:	ef 93       	push	r30
    4b82:	9b 01       	movw	r18, r22
    4b84:	ac 01       	movw	r20, r24
    4b86:	9d d0       	rcall	.+314    	; 0x4cc2 <__mulsf3>
    4b88:	ef 91       	pop	r30
    4b8a:	ff 91       	pop	r31
    4b8c:	cf df       	rcall	.-98     	; 0x4b2c <__fp_powser>
    4b8e:	2f 91       	pop	r18
    4b90:	3f 91       	pop	r19
    4b92:	4f 91       	pop	r20
    4b94:	5f 91       	pop	r21
    4b96:	95 c0       	rjmp	.+298    	; 0x4cc2 <__mulsf3>

00004b98 <__fp_pscA>:
    4b98:	00 24       	eor	r0, r0
    4b9a:	0a 94       	dec	r0
    4b9c:	16 16       	cp	r1, r22
    4b9e:	17 06       	cpc	r1, r23
    4ba0:	18 06       	cpc	r1, r24
    4ba2:	09 06       	cpc	r0, r25
    4ba4:	08 95       	ret

00004ba6 <__fp_pscB>:
    4ba6:	00 24       	eor	r0, r0
    4ba8:	0a 94       	dec	r0
    4baa:	12 16       	cp	r1, r18
    4bac:	13 06       	cpc	r1, r19
    4bae:	14 06       	cpc	r1, r20
    4bb0:	05 06       	cpc	r0, r21
    4bb2:	08 95       	ret
    4bb4:	b8 cf       	rjmp	.-144    	; 0x4b26 <__fp_nan>

00004bb6 <__fp_rempio2>:
    4bb6:	59 d0       	rcall	.+178    	; 0x4c6a <__fp_splitA>
    4bb8:	e8 f3       	brcs	.-6      	; 0x4bb4 <__fp_pscB+0xe>
    4bba:	e8 94       	clt
    4bbc:	ef ef       	ldi	r30, 0xFF	; 255
    4bbe:	bb 27       	eor	r27, r27
    4bc0:	3f e0       	ldi	r19, 0x0F	; 15
    4bc2:	48 ec       	ldi	r20, 0xC8	; 200
    4bc4:	5f e7       	ldi	r21, 0x7F	; 127
    4bc6:	6b 3d       	cpi	r22, 0xDB	; 219
    4bc8:	73 07       	cpc	r23, r19
    4bca:	84 07       	cpc	r24, r20
    4bcc:	95 07       	cpc	r25, r21
    4bce:	08 f1       	brcs	.+66     	; 0x4c12 <__fp_rempio2+0x5c>
    4bd0:	ff 27       	eor	r31, r31
    4bd2:	9f 57       	subi	r25, 0x7F	; 127
    4bd4:	b2 5a       	subi	r27, 0xA2	; 162
    4bd6:	6a 4d       	sbci	r22, 0xDA	; 218
    4bd8:	7f 40       	sbci	r23, 0x0F	; 15
    4bda:	89 4c       	sbci	r24, 0xC9	; 201
    4bdc:	f0 40       	sbci	r31, 0x00	; 0
    4bde:	32 f4       	brpl	.+12     	; 0x4bec <__fp_rempio2+0x36>
    4be0:	be 55       	subi	r27, 0x5E	; 94
    4be2:	65 42       	sbci	r22, 0x25	; 37
    4be4:	70 4f       	sbci	r23, 0xF0	; 240
    4be6:	86 43       	sbci	r24, 0x36	; 54
    4be8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bea:	08 94       	sec
    4bec:	ee 1f       	adc	r30, r30
    4bee:	91 50       	subi	r25, 0x01	; 1
    4bf0:	30 f0       	brcs	.+12     	; 0x4bfe <__fp_rempio2+0x48>
    4bf2:	bb 0f       	add	r27, r27
    4bf4:	66 1f       	adc	r22, r22
    4bf6:	77 1f       	adc	r23, r23
    4bf8:	88 1f       	adc	r24, r24
    4bfa:	ff 1f       	adc	r31, r31
    4bfc:	eb cf       	rjmp	.-42     	; 0x4bd4 <__fp_rempio2+0x1e>
    4bfe:	9e e7       	ldi	r25, 0x7E	; 126
    4c00:	88 23       	and	r24, r24
    4c02:	32 f0       	brmi	.+12     	; 0x4c10 <__fp_rempio2+0x5a>
    4c04:	bb 0f       	add	r27, r27
    4c06:	66 1f       	adc	r22, r22
    4c08:	77 1f       	adc	r23, r23
    4c0a:	88 1f       	adc	r24, r24
    4c0c:	9a 95       	dec	r25
    4c0e:	c1 f7       	brne	.-16     	; 0x4c00 <__fp_rempio2+0x4a>
    4c10:	93 95       	inc	r25
    4c12:	e0 95       	com	r30
    4c14:	14 c1       	rjmp	.+552    	; 0x4e3e <__fp_mpack>

00004c16 <__fp_round>:
    4c16:	09 2e       	mov	r0, r25
    4c18:	03 94       	inc	r0
    4c1a:	00 0c       	add	r0, r0
    4c1c:	11 f4       	brne	.+4      	; 0x4c22 <__fp_round+0xc>
    4c1e:	88 23       	and	r24, r24
    4c20:	52 f0       	brmi	.+20     	; 0x4c36 <__fp_round+0x20>
    4c22:	bb 0f       	add	r27, r27
    4c24:	40 f4       	brcc	.+16     	; 0x4c36 <__fp_round+0x20>
    4c26:	bf 2b       	or	r27, r31
    4c28:	11 f4       	brne	.+4      	; 0x4c2e <__fp_round+0x18>
    4c2a:	60 ff       	sbrs	r22, 0
    4c2c:	04 c0       	rjmp	.+8      	; 0x4c36 <__fp_round+0x20>
    4c2e:	6f 5f       	subi	r22, 0xFF	; 255
    4c30:	7f 4f       	sbci	r23, 0xFF	; 255
    4c32:	8f 4f       	sbci	r24, 0xFF	; 255
    4c34:	9f 4f       	sbci	r25, 0xFF	; 255
    4c36:	08 95       	ret

00004c38 <__fp_sinus>:
    4c38:	ef 93       	push	r30
    4c3a:	e0 ff       	sbrs	r30, 0
    4c3c:	06 c0       	rjmp	.+12     	; 0x4c4a <__fp_sinus+0x12>
    4c3e:	a2 ea       	ldi	r26, 0xA2	; 162
    4c40:	2a ed       	ldi	r18, 0xDA	; 218
    4c42:	3f e0       	ldi	r19, 0x0F	; 15
    4c44:	49 ec       	ldi	r20, 0xC9	; 201
    4c46:	5f eb       	ldi	r21, 0xBF	; 191
    4c48:	80 dd       	rcall	.-1280   	; 0x474a <__addsf3x>
    4c4a:	e5 df       	rcall	.-54     	; 0x4c16 <__fp_round>
    4c4c:	0f 90       	pop	r0
    4c4e:	03 94       	inc	r0
    4c50:	01 fc       	sbrc	r0, 1
    4c52:	90 58       	subi	r25, 0x80	; 128
    4c54:	e1 ed       	ldi	r30, 0xD1	; 209
    4c56:	f0 e0       	ldi	r31, 0x00	; 0
    4c58:	8e cf       	rjmp	.-228    	; 0x4b76 <__fp_powsodd>

00004c5a <__fp_split3>:
    4c5a:	57 fd       	sbrc	r21, 7
    4c5c:	90 58       	subi	r25, 0x80	; 128
    4c5e:	44 0f       	add	r20, r20
    4c60:	55 1f       	adc	r21, r21
    4c62:	59 f0       	breq	.+22     	; 0x4c7a <__fp_splitA+0x10>
    4c64:	5f 3f       	cpi	r21, 0xFF	; 255
    4c66:	71 f0       	breq	.+28     	; 0x4c84 <__fp_splitA+0x1a>
    4c68:	47 95       	ror	r20

00004c6a <__fp_splitA>:
    4c6a:	88 0f       	add	r24, r24
    4c6c:	97 fb       	bst	r25, 7
    4c6e:	99 1f       	adc	r25, r25
    4c70:	61 f0       	breq	.+24     	; 0x4c8a <__fp_splitA+0x20>
    4c72:	9f 3f       	cpi	r25, 0xFF	; 255
    4c74:	79 f0       	breq	.+30     	; 0x4c94 <__fp_splitA+0x2a>
    4c76:	87 95       	ror	r24
    4c78:	08 95       	ret
    4c7a:	12 16       	cp	r1, r18
    4c7c:	13 06       	cpc	r1, r19
    4c7e:	14 06       	cpc	r1, r20
    4c80:	55 1f       	adc	r21, r21
    4c82:	f2 cf       	rjmp	.-28     	; 0x4c68 <__fp_split3+0xe>
    4c84:	46 95       	lsr	r20
    4c86:	f1 df       	rcall	.-30     	; 0x4c6a <__fp_splitA>
    4c88:	08 c0       	rjmp	.+16     	; 0x4c9a <__fp_splitA+0x30>
    4c8a:	16 16       	cp	r1, r22
    4c8c:	17 06       	cpc	r1, r23
    4c8e:	18 06       	cpc	r1, r24
    4c90:	99 1f       	adc	r25, r25
    4c92:	f1 cf       	rjmp	.-30     	; 0x4c76 <__fp_splitA+0xc>
    4c94:	86 95       	lsr	r24
    4c96:	71 05       	cpc	r23, r1
    4c98:	61 05       	cpc	r22, r1
    4c9a:	08 94       	sec
    4c9c:	08 95       	ret

00004c9e <__fp_zero>:
    4c9e:	e8 94       	clt

00004ca0 <__fp_szero>:
    4ca0:	bb 27       	eor	r27, r27
    4ca2:	66 27       	eor	r22, r22
    4ca4:	77 27       	eor	r23, r23
    4ca6:	cb 01       	movw	r24, r22
    4ca8:	97 f9       	bld	r25, 7
    4caa:	08 95       	ret

00004cac <__gesf2>:
    4cac:	12 df       	rcall	.-476    	; 0x4ad2 <__fp_cmp>
    4cae:	08 f4       	brcc	.+2      	; 0x4cb2 <__gesf2+0x6>
    4cb0:	8f ef       	ldi	r24, 0xFF	; 255
    4cb2:	08 95       	ret

00004cb4 <inverse>:
    4cb4:	9b 01       	movw	r18, r22
    4cb6:	ac 01       	movw	r20, r24
    4cb8:	60 e0       	ldi	r22, 0x00	; 0
    4cba:	70 e0       	ldi	r23, 0x00	; 0
    4cbc:	80 e8       	ldi	r24, 0x80	; 128
    4cbe:	9f e3       	ldi	r25, 0x3F	; 63
    4cc0:	17 ce       	rjmp	.-978    	; 0x48f0 <__divsf3>

00004cc2 <__mulsf3>:
    4cc2:	0b d0       	rcall	.+22     	; 0x4cda <__mulsf3x>
    4cc4:	a8 cf       	rjmp	.-176    	; 0x4c16 <__fp_round>
    4cc6:	68 df       	rcall	.-304    	; 0x4b98 <__fp_pscA>
    4cc8:	28 f0       	brcs	.+10     	; 0x4cd4 <__mulsf3+0x12>
    4cca:	6d df       	rcall	.-294    	; 0x4ba6 <__fp_pscB>
    4ccc:	18 f0       	brcs	.+6      	; 0x4cd4 <__mulsf3+0x12>
    4cce:	95 23       	and	r25, r21
    4cd0:	09 f0       	breq	.+2      	; 0x4cd4 <__mulsf3+0x12>
    4cd2:	23 cf       	rjmp	.-442    	; 0x4b1a <__fp_inf>
    4cd4:	28 cf       	rjmp	.-432    	; 0x4b26 <__fp_nan>
    4cd6:	11 24       	eor	r1, r1
    4cd8:	e3 cf       	rjmp	.-58     	; 0x4ca0 <__fp_szero>

00004cda <__mulsf3x>:
    4cda:	bf df       	rcall	.-130    	; 0x4c5a <__fp_split3>
    4cdc:	a0 f3       	brcs	.-24     	; 0x4cc6 <__mulsf3+0x4>

00004cde <__mulsf3_pse>:
    4cde:	95 9f       	mul	r25, r21
    4ce0:	d1 f3       	breq	.-12     	; 0x4cd6 <__mulsf3+0x14>
    4ce2:	95 0f       	add	r25, r21
    4ce4:	50 e0       	ldi	r21, 0x00	; 0
    4ce6:	55 1f       	adc	r21, r21
    4ce8:	62 9f       	mul	r22, r18
    4cea:	f0 01       	movw	r30, r0
    4cec:	72 9f       	mul	r23, r18
    4cee:	bb 27       	eor	r27, r27
    4cf0:	f0 0d       	add	r31, r0
    4cf2:	b1 1d       	adc	r27, r1
    4cf4:	63 9f       	mul	r22, r19
    4cf6:	aa 27       	eor	r26, r26
    4cf8:	f0 0d       	add	r31, r0
    4cfa:	b1 1d       	adc	r27, r1
    4cfc:	aa 1f       	adc	r26, r26
    4cfe:	64 9f       	mul	r22, r20
    4d00:	66 27       	eor	r22, r22
    4d02:	b0 0d       	add	r27, r0
    4d04:	a1 1d       	adc	r26, r1
    4d06:	66 1f       	adc	r22, r22
    4d08:	82 9f       	mul	r24, r18
    4d0a:	22 27       	eor	r18, r18
    4d0c:	b0 0d       	add	r27, r0
    4d0e:	a1 1d       	adc	r26, r1
    4d10:	62 1f       	adc	r22, r18
    4d12:	73 9f       	mul	r23, r19
    4d14:	b0 0d       	add	r27, r0
    4d16:	a1 1d       	adc	r26, r1
    4d18:	62 1f       	adc	r22, r18
    4d1a:	83 9f       	mul	r24, r19
    4d1c:	a0 0d       	add	r26, r0
    4d1e:	61 1d       	adc	r22, r1
    4d20:	22 1f       	adc	r18, r18
    4d22:	74 9f       	mul	r23, r20
    4d24:	33 27       	eor	r19, r19
    4d26:	a0 0d       	add	r26, r0
    4d28:	61 1d       	adc	r22, r1
    4d2a:	23 1f       	adc	r18, r19
    4d2c:	84 9f       	mul	r24, r20
    4d2e:	60 0d       	add	r22, r0
    4d30:	21 1d       	adc	r18, r1
    4d32:	82 2f       	mov	r24, r18
    4d34:	76 2f       	mov	r23, r22
    4d36:	6a 2f       	mov	r22, r26
    4d38:	11 24       	eor	r1, r1
    4d3a:	9f 57       	subi	r25, 0x7F	; 127
    4d3c:	50 40       	sbci	r21, 0x00	; 0
    4d3e:	8a f0       	brmi	.+34     	; 0x4d62 <__mulsf3_pse+0x84>
    4d40:	e1 f0       	breq	.+56     	; 0x4d7a <__mulsf3_pse+0x9c>
    4d42:	88 23       	and	r24, r24
    4d44:	4a f0       	brmi	.+18     	; 0x4d58 <__mulsf3_pse+0x7a>
    4d46:	ee 0f       	add	r30, r30
    4d48:	ff 1f       	adc	r31, r31
    4d4a:	bb 1f       	adc	r27, r27
    4d4c:	66 1f       	adc	r22, r22
    4d4e:	77 1f       	adc	r23, r23
    4d50:	88 1f       	adc	r24, r24
    4d52:	91 50       	subi	r25, 0x01	; 1
    4d54:	50 40       	sbci	r21, 0x00	; 0
    4d56:	a9 f7       	brne	.-22     	; 0x4d42 <__mulsf3_pse+0x64>
    4d58:	9e 3f       	cpi	r25, 0xFE	; 254
    4d5a:	51 05       	cpc	r21, r1
    4d5c:	70 f0       	brcs	.+28     	; 0x4d7a <__mulsf3_pse+0x9c>
    4d5e:	dd ce       	rjmp	.-582    	; 0x4b1a <__fp_inf>
    4d60:	9f cf       	rjmp	.-194    	; 0x4ca0 <__fp_szero>
    4d62:	5f 3f       	cpi	r21, 0xFF	; 255
    4d64:	ec f3       	brlt	.-6      	; 0x4d60 <__mulsf3_pse+0x82>
    4d66:	98 3e       	cpi	r25, 0xE8	; 232
    4d68:	dc f3       	brlt	.-10     	; 0x4d60 <__mulsf3_pse+0x82>
    4d6a:	86 95       	lsr	r24
    4d6c:	77 95       	ror	r23
    4d6e:	67 95       	ror	r22
    4d70:	b7 95       	ror	r27
    4d72:	f7 95       	ror	r31
    4d74:	e7 95       	ror	r30
    4d76:	9f 5f       	subi	r25, 0xFF	; 255
    4d78:	c1 f7       	brne	.-16     	; 0x4d6a <__mulsf3_pse+0x8c>
    4d7a:	fe 2b       	or	r31, r30
    4d7c:	88 0f       	add	r24, r24
    4d7e:	91 1d       	adc	r25, r1
    4d80:	96 95       	lsr	r25
    4d82:	87 95       	ror	r24
    4d84:	97 f9       	bld	r25, 7
    4d86:	08 95       	ret

00004d88 <sin>:
    4d88:	9f 93       	push	r25
    4d8a:	15 df       	rcall	.-470    	; 0x4bb6 <__fp_rempio2>
    4d8c:	0f 90       	pop	r0
    4d8e:	07 fc       	sbrc	r0, 7
    4d90:	ee 5f       	subi	r30, 0xFE	; 254
    4d92:	52 cf       	rjmp	.-348    	; 0x4c38 <__fp_sinus>
    4d94:	11 f4       	brne	.+4      	; 0x4d9a <sin+0x12>
    4d96:	0e f4       	brtc	.+2      	; 0x4d9a <sin+0x12>
    4d98:	c6 ce       	rjmp	.-628    	; 0x4b26 <__fp_nan>
    4d9a:	51 c0       	rjmp	.+162    	; 0x4e3e <__fp_mpack>

00004d9c <sqrt>:
    4d9c:	66 df       	rcall	.-308    	; 0x4c6a <__fp_splitA>
    4d9e:	d0 f3       	brcs	.-12     	; 0x4d94 <sin+0xc>
    4da0:	99 23       	and	r25, r25
    4da2:	d9 f3       	breq	.-10     	; 0x4d9a <sin+0x12>
    4da4:	ce f3       	brts	.-14     	; 0x4d98 <sin+0x10>
    4da6:	9f 57       	subi	r25, 0x7F	; 127
    4da8:	55 0b       	sbc	r21, r21
    4daa:	87 ff       	sbrs	r24, 7
    4dac:	58 d0       	rcall	.+176    	; 0x4e5e <__fp_norm2>
    4dae:	56 95       	lsr	r21
    4db0:	97 95       	ror	r25
    4db2:	b0 e0       	ldi	r27, 0x00	; 0
    4db4:	20 f4       	brcc	.+8      	; 0x4dbe <sqrt+0x22>
    4db6:	66 0f       	add	r22, r22
    4db8:	77 1f       	adc	r23, r23
    4dba:	88 1f       	adc	r24, r24
    4dbc:	bb 1f       	adc	r27, r27
    4dbe:	1f 93       	push	r17
    4dc0:	0f 93       	push	r16
    4dc2:	00 24       	eor	r0, r0
    4dc4:	90 01       	movw	r18, r0
    4dc6:	a0 01       	movw	r20, r0
    4dc8:	80 01       	movw	r16, r0
    4dca:	f0 01       	movw	r30, r0
    4dcc:	a0 e8       	ldi	r26, 0x80	; 128
    4dce:	0e 0f       	add	r16, r30
    4dd0:	1f 1f       	adc	r17, r31
    4dd2:	0a 1e       	adc	r0, r26
    4dd4:	51 1d       	adc	r21, r1
    4dd6:	60 1b       	sub	r22, r16
    4dd8:	71 0b       	sbc	r23, r17
    4dda:	80 09       	sbc	r24, r0
    4ddc:	b5 0b       	sbc	r27, r21
    4dde:	48 f4       	brcc	.+18     	; 0x4df2 <sqrt+0x56>
    4de0:	60 0f       	add	r22, r16
    4de2:	71 1f       	adc	r23, r17
    4de4:	80 1d       	adc	r24, r0
    4de6:	b5 1f       	adc	r27, r21
    4de8:	0e 1b       	sub	r16, r30
    4dea:	1f 0b       	sbc	r17, r31
    4dec:	0a 0a       	sbc	r0, r26
    4dee:	51 09       	sbc	r21, r1
    4df0:	07 c0       	rjmp	.+14     	; 0x4e00 <sqrt+0x64>
    4df2:	2e 0f       	add	r18, r30
    4df4:	3f 1f       	adc	r19, r31
    4df6:	4a 1f       	adc	r20, r26
    4df8:	0e 0f       	add	r16, r30
    4dfa:	1f 1f       	adc	r17, r31
    4dfc:	0a 1e       	adc	r0, r26
    4dfe:	51 1d       	adc	r21, r1
    4e00:	66 0f       	add	r22, r22
    4e02:	77 1f       	adc	r23, r23
    4e04:	88 1f       	adc	r24, r24
    4e06:	bb 1f       	adc	r27, r27
    4e08:	a6 95       	lsr	r26
    4e0a:	f7 95       	ror	r31
    4e0c:	e7 95       	ror	r30
    4e0e:	f8 f6       	brcc	.-66     	; 0x4dce <sqrt+0x32>
    4e10:	06 17       	cp	r16, r22
    4e12:	17 07       	cpc	r17, r23
    4e14:	08 06       	cpc	r0, r24
    4e16:	5b 07       	cpc	r21, r27
    4e18:	21 1d       	adc	r18, r1
    4e1a:	31 1d       	adc	r19, r1
    4e1c:	41 1d       	adc	r20, r1
    4e1e:	0f 91       	pop	r16
    4e20:	1f 91       	pop	r17
    4e22:	b9 01       	movw	r22, r18
    4e24:	84 2f       	mov	r24, r20
    4e26:	91 58       	subi	r25, 0x81	; 129
    4e28:	88 0f       	add	r24, r24
    4e2a:	96 95       	lsr	r25
    4e2c:	87 95       	ror	r24
    4e2e:	08 95       	ret

00004e30 <square>:
    4e30:	9b 01       	movw	r18, r22
    4e32:	ac 01       	movw	r20, r24
    4e34:	46 cf       	rjmp	.-372    	; 0x4cc2 <__mulsf3>

00004e36 <__unordsf2>:
    4e36:	4d de       	rcall	.-870    	; 0x4ad2 <__fp_cmp>
    4e38:	88 0b       	sbc	r24, r24
    4e3a:	99 0b       	sbc	r25, r25
    4e3c:	08 95       	ret

00004e3e <__fp_mpack>:
    4e3e:	9f 3f       	cpi	r25, 0xFF	; 255
    4e40:	49 f0       	breq	.+18     	; 0x4e54 <__fp_mpack+0x16>
    4e42:	91 50       	subi	r25, 0x01	; 1
    4e44:	28 f4       	brcc	.+10     	; 0x4e50 <__fp_mpack+0x12>
    4e46:	86 95       	lsr	r24
    4e48:	77 95       	ror	r23
    4e4a:	67 95       	ror	r22
    4e4c:	b7 95       	ror	r27
    4e4e:	9f 5f       	subi	r25, 0xFF	; 255
    4e50:	80 38       	cpi	r24, 0x80	; 128
    4e52:	9f 4f       	sbci	r25, 0xFF	; 255
    4e54:	88 0f       	add	r24, r24
    4e56:	96 95       	lsr	r25
    4e58:	87 95       	ror	r24
    4e5a:	97 f9       	bld	r25, 7
    4e5c:	08 95       	ret

00004e5e <__fp_norm2>:
    4e5e:	91 50       	subi	r25, 0x01	; 1
    4e60:	50 40       	sbci	r21, 0x00	; 0
    4e62:	66 0f       	add	r22, r22
    4e64:	77 1f       	adc	r23, r23
    4e66:	88 1f       	adc	r24, r24
    4e68:	d2 f7       	brpl	.-12     	; 0x4e5e <__fp_norm2>
    4e6a:	08 95       	ret

00004e6c <__mulsi3>:
    4e6c:	62 9f       	mul	r22, r18
    4e6e:	d0 01       	movw	r26, r0
    4e70:	73 9f       	mul	r23, r19
    4e72:	f0 01       	movw	r30, r0
    4e74:	82 9f       	mul	r24, r18
    4e76:	e0 0d       	add	r30, r0
    4e78:	f1 1d       	adc	r31, r1
    4e7a:	64 9f       	mul	r22, r20
    4e7c:	e0 0d       	add	r30, r0
    4e7e:	f1 1d       	adc	r31, r1
    4e80:	92 9f       	mul	r25, r18
    4e82:	f0 0d       	add	r31, r0
    4e84:	83 9f       	mul	r24, r19
    4e86:	f0 0d       	add	r31, r0
    4e88:	74 9f       	mul	r23, r20
    4e8a:	f0 0d       	add	r31, r0
    4e8c:	65 9f       	mul	r22, r21
    4e8e:	f0 0d       	add	r31, r0
    4e90:	99 27       	eor	r25, r25
    4e92:	72 9f       	mul	r23, r18
    4e94:	b0 0d       	add	r27, r0
    4e96:	e1 1d       	adc	r30, r1
    4e98:	f9 1f       	adc	r31, r25
    4e9a:	63 9f       	mul	r22, r19
    4e9c:	b0 0d       	add	r27, r0
    4e9e:	e1 1d       	adc	r30, r1
    4ea0:	f9 1f       	adc	r31, r25
    4ea2:	bd 01       	movw	r22, r26
    4ea4:	cf 01       	movw	r24, r30
    4ea6:	11 24       	eor	r1, r1
    4ea8:	08 95       	ret

00004eaa <__udivmodsi4>:
    4eaa:	a1 e2       	ldi	r26, 0x21	; 33
    4eac:	1a 2e       	mov	r1, r26
    4eae:	aa 1b       	sub	r26, r26
    4eb0:	bb 1b       	sub	r27, r27
    4eb2:	fd 01       	movw	r30, r26
    4eb4:	0d c0       	rjmp	.+26     	; 0x4ed0 <__udivmodsi4_ep>

00004eb6 <__udivmodsi4_loop>:
    4eb6:	aa 1f       	adc	r26, r26
    4eb8:	bb 1f       	adc	r27, r27
    4eba:	ee 1f       	adc	r30, r30
    4ebc:	ff 1f       	adc	r31, r31
    4ebe:	a2 17       	cp	r26, r18
    4ec0:	b3 07       	cpc	r27, r19
    4ec2:	e4 07       	cpc	r30, r20
    4ec4:	f5 07       	cpc	r31, r21
    4ec6:	20 f0       	brcs	.+8      	; 0x4ed0 <__udivmodsi4_ep>
    4ec8:	a2 1b       	sub	r26, r18
    4eca:	b3 0b       	sbc	r27, r19
    4ecc:	e4 0b       	sbc	r30, r20
    4ece:	f5 0b       	sbc	r31, r21

00004ed0 <__udivmodsi4_ep>:
    4ed0:	66 1f       	adc	r22, r22
    4ed2:	77 1f       	adc	r23, r23
    4ed4:	88 1f       	adc	r24, r24
    4ed6:	99 1f       	adc	r25, r25
    4ed8:	1a 94       	dec	r1
    4eda:	69 f7       	brne	.-38     	; 0x4eb6 <__udivmodsi4_loop>
    4edc:	60 95       	com	r22
    4ede:	70 95       	com	r23
    4ee0:	80 95       	com	r24
    4ee2:	90 95       	com	r25
    4ee4:	9b 01       	movw	r18, r22
    4ee6:	ac 01       	movw	r20, r24
    4ee8:	bd 01       	movw	r22, r26
    4eea:	cf 01       	movw	r24, r30
    4eec:	08 95       	ret

00004eee <__divmodsi4>:
    4eee:	97 fb       	bst	r25, 7
    4ef0:	09 2e       	mov	r0, r25
    4ef2:	05 26       	eor	r0, r21
    4ef4:	0e d0       	rcall	.+28     	; 0x4f12 <__divmodsi4_neg1>
    4ef6:	57 fd       	sbrc	r21, 7
    4ef8:	04 d0       	rcall	.+8      	; 0x4f02 <__divmodsi4_neg2>
    4efa:	d7 df       	rcall	.-82     	; 0x4eaa <__udivmodsi4>
    4efc:	0a d0       	rcall	.+20     	; 0x4f12 <__divmodsi4_neg1>
    4efe:	00 1c       	adc	r0, r0
    4f00:	38 f4       	brcc	.+14     	; 0x4f10 <__divmodsi4_exit>

00004f02 <__divmodsi4_neg2>:
    4f02:	50 95       	com	r21
    4f04:	40 95       	com	r20
    4f06:	30 95       	com	r19
    4f08:	21 95       	neg	r18
    4f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f0c:	4f 4f       	sbci	r20, 0xFF	; 255
    4f0e:	5f 4f       	sbci	r21, 0xFF	; 255

00004f10 <__divmodsi4_exit>:
    4f10:	08 95       	ret

00004f12 <__divmodsi4_neg1>:
    4f12:	f6 f7       	brtc	.-4      	; 0x4f10 <__divmodsi4_exit>
    4f14:	90 95       	com	r25
    4f16:	80 95       	com	r24
    4f18:	70 95       	com	r23
    4f1a:	61 95       	neg	r22
    4f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    4f20:	9f 4f       	sbci	r25, 0xFF	; 255
    4f22:	08 95       	ret

00004f24 <__tablejump2__>:
    4f24:	ee 0f       	add	r30, r30
    4f26:	ff 1f       	adc	r31, r31

00004f28 <__tablejump__>:
    4f28:	05 90       	lpm	r0, Z+
    4f2a:	f4 91       	lpm	r31, Z+
    4f2c:	e0 2d       	mov	r30, r0
    4f2e:	09 94       	ijmp

00004f30 <_exit>:
    4f30:	f8 94       	cli

00004f32 <__stop_program>:
    4f32:	ff cf       	rjmp	.-2      	; 0x4f32 <__stop_program>
